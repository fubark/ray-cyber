var Root.libUrl = switch os.system:
case 'linux' => 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.so.4.5.0'
case 'windows' => 'https://raw.githubusercontent.com/fubark/ray-cyber/master/raylib.4.5.0.dll'
case 'macos' => 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.4.5.0.dylib'
else => throw error.Unsupported

var Root.libPath = os.cacheUrl(libUrl)

func InitFoo(width int, height int, title pointer) none: pass

func InitWindow(width int, height int, title string) none:
    var cstr = os.cstr(title)
    (lib.InitWindow)(width, height, cstr)
    os.free(cstr)

func DrawText(text string, x int, y int, size int, color Color) none:
    var cstr = os.cstr(text)
    (lib.DrawText)(cstr, x, y, size, color)
    os.free(cstr)

func MeasureText(text string, size int) int:
    var cstr = os.cstr(text)
    var res = (lib.MeasureText)(cstr, size)
    os.free(cstr)
    return res as int

func LoadTexture(fileName string) Texture2D:
    var cstr = os.cstr(fileName)
    var res = (lib.LoadTexture)(cstr)
    os.free(cstr)
    return res as Texture2D

-- CBINDGEN MARKER
-- Code below is generated by cbindgen.cy
-- typedef __gnuc_va_list

-- typedef va_list

type Vector2 object:
    var x float
    var y float

type Vector3 object:
    var x float
    var y float
    var z float

type Vector4 object:
    var x float
    var y float
    var z float
    var w float

type Quaternion Vector4

type Matrix object:
    var m0 float
    var m4 float
    var m8 float
    var m12 float
    var m1 float
    var m5 float
    var m9 float
    var m13 float
    var m2 float
    var m6 float
    var m10 float
    var m14 float
    var m3 float
    var m7 float
    var m11 float
    var m15 float

type Color object:
    var r int
    var g int
    var b int
    var a int

type Rectangle object:
    var x float
    var y float
    var width float
    var height float

type Image object:
    var data any -- void *
    var width int
    var height int
    var mipmaps int
    var format int

type Texture object:
    var id int
    var width int
    var height int
    var mipmaps int
    var format int

type Texture2D Texture

type TextureCubemap Texture

type RenderTexture object:
    var id int
    var texture Texture
    var depth Texture

type RenderTexture2D RenderTexture

type NPatchInfo object:
    var source Rectangle
    var left int
    var top int
    var right int
    var bottom int
    var layout int

type GlyphInfo object:
    var value int
    var offsetX int
    var offsetY int
    var advanceX int
    var image Image

type Font object:
    var baseSize int
    var glyphCount int
    var glyphPadding int
    var texture Texture
    var recs any -- Rectangle *
    var glyphs any -- GlyphInfo *

type Camera3D object:
    var position Vector3
    var target Vector3
    var up Vector3
    var fovy float
    var projection int

type Camera Camera3D

type Camera2D object:
    var offset Vector2
    var target Vector2
    var rotation float
    var zoom float

type Mesh object:
    var vertexCount int
    var triangleCount int
    var vertices any -- float *
    var texcoords any -- float *
    var texcoords2 any -- float *
    var normals any -- float *
    var tangents any -- float *
    var colors any -- unsigned char *
    var indices any -- unsigned short *
    var animVertices any -- float *
    var animNormals any -- float *
    var boneIds any -- unsigned char *
    var boneWeights any -- float *
    var vaoId int
    var vboId any -- unsigned int *

type Shader object:
    var id int
    var locs any -- int *

type MaterialMap object:
    var texture Texture
    var color Color
    var value float

type Material object:
    var shader Shader
    var maps any -- MaterialMap *
    var params List -- float[4]

type Transform object:
    var translation Vector3
    var rotation Vector4
    var scale Vector3

type BoneInfo object:
    var name List -- char[32]
    var parent int

type Model object:
    var transform Matrix
    var meshCount int
    var materialCount int
    var meshes any -- Mesh *
    var materials any -- Material *
    var meshMaterial any -- int *
    var boneCount int
    var bones any -- BoneInfo *
    var bindPose any -- Transform *

type ModelAnimation object:
    var boneCount int
    var frameCount int
    var bones any -- BoneInfo *
    var framePoses any -- Transform **

type Ray object:
    var position Vector3
    var direction Vector3

type RayCollision object:
    var hit bool
    var distance float
    var point Vector3
    var normal Vector3

type BoundingBox object:
    var min Vector3
    var max Vector3

type Wave object:
    var frameCount int
    var sampleRate int
    var sampleSize int
    var channels int
    var data any -- void *

type AudioStream object:
    var buffer any -- rAudioBuffer *
    var processor any -- rAudioProcessor *
    var sampleRate int
    var sampleSize int
    var channels int

type Sound object:
    var stream AudioStream
    var frameCount int

type Music object:
    var stream AudioStream
    var frameCount int
    var looping bool
    var ctxType int
    var ctxData any -- void *

type VrDeviceInfo object:
    var hResolution int
    var vResolution int
    var hScreenSize float
    var vScreenSize float
    var vScreenCenter float
    var eyeToScreenDistance float
    var lensSeparationDistance float
    var interpupillaryDistance float
    var lensDistortionValues List -- float[4]
    var chromaAbCorrection List -- float[4]

type VrStereoConfig object:
    var projection List -- Matrix[2]
    var viewOffset List -- Matrix[2]
    var leftLensCenter List -- float[2]
    var rightLensCenter List -- float[2]
    var leftScreenCenter List -- float[2]
    var rightScreenCenter List -- float[2]
    var scale List -- float[2]
    var scaleIn List -- float[2]

type FilePathList object:
    var capacity int
    var count int
    var paths any -- char **

var Root.FLAG_VSYNC_HINT int = 64
var Root.FLAG_FULLSCREEN_MODE int = 2
var Root.FLAG_WINDOW_RESIZABLE int = 4
var Root.FLAG_WINDOW_UNDECORATED int = 8
var Root.FLAG_WINDOW_HIDDEN int = 128
var Root.FLAG_WINDOW_MINIMIZED int = 512
var Root.FLAG_WINDOW_MAXIMIZED int = 1024
var Root.FLAG_WINDOW_UNFOCUSED int = 2048
var Root.FLAG_WINDOW_TOPMOST int = 4096
var Root.FLAG_WINDOW_ALWAYS_RUN int = 256
var Root.FLAG_WINDOW_TRANSPARENT int = 16
var Root.FLAG_WINDOW_HIGHDPI int = 8192
var Root.FLAG_WINDOW_MOUSE_PASSTHROUGH int = 16384
var Root.FLAG_MSAA_4X_HINT int = 32
var Root.FLAG_INTERLACED_HINT int = 65536

type ConfigFlags int

var Root.LOG_ALL int = 0
var Root.LOG_TRACE int = 1
var Root.LOG_DEBUG int = 2
var Root.LOG_INFO int = 3
var Root.LOG_WARNING int = 4
var Root.LOG_ERROR int = 5
var Root.LOG_FATAL int = 6
var Root.LOG_NONE int = 7

type TraceLogLevel int

var Root.KEY_NULL int = 0
var Root.KEY_APOSTROPHE int = 39
var Root.KEY_COMMA int = 44
var Root.KEY_MINUS int = 45
var Root.KEY_PERIOD int = 46
var Root.KEY_SLASH int = 47
var Root.KEY_ZERO int = 48
var Root.KEY_ONE int = 49
var Root.KEY_TWO int = 50
var Root.KEY_THREE int = 51
var Root.KEY_FOUR int = 52
var Root.KEY_FIVE int = 53
var Root.KEY_SIX int = 54
var Root.KEY_SEVEN int = 55
var Root.KEY_EIGHT int = 56
var Root.KEY_NINE int = 57
var Root.KEY_SEMICOLON int = 59
var Root.KEY_EQUAL int = 61
var Root.KEY_A int = 65
var Root.KEY_B int = 66
var Root.KEY_C int = 67
var Root.KEY_D int = 68
var Root.KEY_E int = 69
var Root.KEY_F int = 70
var Root.KEY_G int = 71
var Root.KEY_H int = 72
var Root.KEY_I int = 73
var Root.KEY_J int = 74
var Root.KEY_K int = 75
var Root.KEY_L int = 76
var Root.KEY_M int = 77
var Root.KEY_N int = 78
var Root.KEY_O int = 79
var Root.KEY_P int = 80
var Root.KEY_Q int = 81
var Root.KEY_R int = 82
var Root.KEY_S int = 83
var Root.KEY_T int = 84
var Root.KEY_U int = 85
var Root.KEY_V int = 86
var Root.KEY_W int = 87
var Root.KEY_X int = 88
var Root.KEY_Y int = 89
var Root.KEY_Z int = 90
var Root.KEY_LEFT_BRACKET int = 91
var Root.KEY_BACKSLASH int = 92
var Root.KEY_RIGHT_BRACKET int = 93
var Root.KEY_GRAVE int = 96
var Root.KEY_SPACE int = 32
var Root.KEY_ESCAPE int = 256
var Root.KEY_ENTER int = 257
var Root.KEY_TAB int = 258
var Root.KEY_BACKSPACE int = 259
var Root.KEY_INSERT int = 260
var Root.KEY_DELETE int = 261
var Root.KEY_RIGHT int = 262
var Root.KEY_LEFT int = 263
var Root.KEY_DOWN int = 264
var Root.KEY_UP int = 265
var Root.KEY_PAGE_UP int = 266
var Root.KEY_PAGE_DOWN int = 267
var Root.KEY_HOME int = 268
var Root.KEY_END int = 269
var Root.KEY_CAPS_LOCK int = 280
var Root.KEY_SCROLL_LOCK int = 281
var Root.KEY_NUM_LOCK int = 282
var Root.KEY_PRINT_SCREEN int = 283
var Root.KEY_PAUSE int = 284
var Root.KEY_F1 int = 290
var Root.KEY_F2 int = 291
var Root.KEY_F3 int = 292
var Root.KEY_F4 int = 293
var Root.KEY_F5 int = 294
var Root.KEY_F6 int = 295
var Root.KEY_F7 int = 296
var Root.KEY_F8 int = 297
var Root.KEY_F9 int = 298
var Root.KEY_F10 int = 299
var Root.KEY_F11 int = 300
var Root.KEY_F12 int = 301
var Root.KEY_LEFT_SHIFT int = 340
var Root.KEY_LEFT_CONTROL int = 341
var Root.KEY_LEFT_ALT int = 342
var Root.KEY_LEFT_SUPER int = 343
var Root.KEY_RIGHT_SHIFT int = 344
var Root.KEY_RIGHT_CONTROL int = 345
var Root.KEY_RIGHT_ALT int = 346
var Root.KEY_RIGHT_SUPER int = 347
var Root.KEY_KB_MENU int = 348
var Root.KEY_KP_0 int = 320
var Root.KEY_KP_1 int = 321
var Root.KEY_KP_2 int = 322
var Root.KEY_KP_3 int = 323
var Root.KEY_KP_4 int = 324
var Root.KEY_KP_5 int = 325
var Root.KEY_KP_6 int = 326
var Root.KEY_KP_7 int = 327
var Root.KEY_KP_8 int = 328
var Root.KEY_KP_9 int = 329
var Root.KEY_KP_DECIMAL int = 330
var Root.KEY_KP_DIVIDE int = 331
var Root.KEY_KP_MULTIPLY int = 332
var Root.KEY_KP_SUBTRACT int = 333
var Root.KEY_KP_ADD int = 334
var Root.KEY_KP_ENTER int = 335
var Root.KEY_KP_EQUAL int = 336
var Root.KEY_BACK int = 4
var Root.KEY_MENU int = 82
var Root.KEY_VOLUME_UP int = 24
var Root.KEY_VOLUME_DOWN int = 25

type KeyboardKey int

var Root.MOUSE_BUTTON_LEFT int = 0
var Root.MOUSE_BUTTON_RIGHT int = 1
var Root.MOUSE_BUTTON_MIDDLE int = 2
var Root.MOUSE_BUTTON_SIDE int = 3
var Root.MOUSE_BUTTON_EXTRA int = 4
var Root.MOUSE_BUTTON_FORWARD int = 5
var Root.MOUSE_BUTTON_BACK int = 6

type MouseButton int

var Root.MOUSE_CURSOR_DEFAULT int = 0
var Root.MOUSE_CURSOR_ARROW int = 1
var Root.MOUSE_CURSOR_IBEAM int = 2
var Root.MOUSE_CURSOR_CROSSHAIR int = 3
var Root.MOUSE_CURSOR_POINTING_HAND int = 4
var Root.MOUSE_CURSOR_RESIZE_EW int = 5
var Root.MOUSE_CURSOR_RESIZE_NS int = 6
var Root.MOUSE_CURSOR_RESIZE_NWSE int = 7
var Root.MOUSE_CURSOR_RESIZE_NESW int = 8
var Root.MOUSE_CURSOR_RESIZE_ALL int = 9
var Root.MOUSE_CURSOR_NOT_ALLOWED int = 10

type MouseCursor int

var Root.GAMEPAD_BUTTON_UNKNOWN int = 0
var Root.GAMEPAD_BUTTON_LEFT_FACE_UP int = 1
var Root.GAMEPAD_BUTTON_LEFT_FACE_RIGHT int = 2
var Root.GAMEPAD_BUTTON_LEFT_FACE_DOWN int = 3
var Root.GAMEPAD_BUTTON_LEFT_FACE_LEFT int = 4
var Root.GAMEPAD_BUTTON_RIGHT_FACE_UP int = 5
var Root.GAMEPAD_BUTTON_RIGHT_FACE_RIGHT int = 6
var Root.GAMEPAD_BUTTON_RIGHT_FACE_DOWN int = 7
var Root.GAMEPAD_BUTTON_RIGHT_FACE_LEFT int = 8
var Root.GAMEPAD_BUTTON_LEFT_TRIGGER_1 int = 9
var Root.GAMEPAD_BUTTON_LEFT_TRIGGER_2 int = 10
var Root.GAMEPAD_BUTTON_RIGHT_TRIGGER_1 int = 11
var Root.GAMEPAD_BUTTON_RIGHT_TRIGGER_2 int = 12
var Root.GAMEPAD_BUTTON_MIDDLE_LEFT int = 13
var Root.GAMEPAD_BUTTON_MIDDLE int = 14
var Root.GAMEPAD_BUTTON_MIDDLE_RIGHT int = 15
var Root.GAMEPAD_BUTTON_LEFT_THUMB int = 16
var Root.GAMEPAD_BUTTON_RIGHT_THUMB int = 17

type GamepadButton int

var Root.GAMEPAD_AXIS_LEFT_X int = 0
var Root.GAMEPAD_AXIS_LEFT_Y int = 1
var Root.GAMEPAD_AXIS_RIGHT_X int = 2
var Root.GAMEPAD_AXIS_RIGHT_Y int = 3
var Root.GAMEPAD_AXIS_LEFT_TRIGGER int = 4
var Root.GAMEPAD_AXIS_RIGHT_TRIGGER int = 5

type GamepadAxis int

var Root.MATERIAL_MAP_ALBEDO int = 0
var Root.MATERIAL_MAP_METALNESS int = 1
var Root.MATERIAL_MAP_NORMAL int = 2
var Root.MATERIAL_MAP_ROUGHNESS int = 3
var Root.MATERIAL_MAP_OCCLUSION int = 4
var Root.MATERIAL_MAP_EMISSION int = 5
var Root.MATERIAL_MAP_HEIGHT int = 6
var Root.MATERIAL_MAP_CUBEMAP int = 7
var Root.MATERIAL_MAP_IRRADIANCE int = 8
var Root.MATERIAL_MAP_PREFILTER int = 9
var Root.MATERIAL_MAP_BRDF int = 10

type MaterialMapIndex int

var Root.SHADER_LOC_VERTEX_POSITION int = 0
var Root.SHADER_LOC_VERTEX_TEXCOORD01 int = 1
var Root.SHADER_LOC_VERTEX_TEXCOORD02 int = 2
var Root.SHADER_LOC_VERTEX_NORMAL int = 3
var Root.SHADER_LOC_VERTEX_TANGENT int = 4
var Root.SHADER_LOC_VERTEX_COLOR int = 5
var Root.SHADER_LOC_MATRIX_MVP int = 6
var Root.SHADER_LOC_MATRIX_VIEW int = 7
var Root.SHADER_LOC_MATRIX_PROJECTION int = 8
var Root.SHADER_LOC_MATRIX_MODEL int = 9
var Root.SHADER_LOC_MATRIX_NORMAL int = 10
var Root.SHADER_LOC_VECTOR_VIEW int = 11
var Root.SHADER_LOC_COLOR_DIFFUSE int = 12
var Root.SHADER_LOC_COLOR_SPECULAR int = 13
var Root.SHADER_LOC_COLOR_AMBIENT int = 14
var Root.SHADER_LOC_MAP_ALBEDO int = 15
var Root.SHADER_LOC_MAP_METALNESS int = 16
var Root.SHADER_LOC_MAP_NORMAL int = 17
var Root.SHADER_LOC_MAP_ROUGHNESS int = 18
var Root.SHADER_LOC_MAP_OCCLUSION int = 19
var Root.SHADER_LOC_MAP_EMISSION int = 20
var Root.SHADER_LOC_MAP_HEIGHT int = 21
var Root.SHADER_LOC_MAP_CUBEMAP int = 22
var Root.SHADER_LOC_MAP_IRRADIANCE int = 23
var Root.SHADER_LOC_MAP_PREFILTER int = 24
var Root.SHADER_LOC_MAP_BRDF int = 25

type ShaderLocationIndex int

var Root.SHADER_UNIFORM_FLOAT int = 0
var Root.SHADER_UNIFORM_VEC2 int = 1
var Root.SHADER_UNIFORM_VEC3 int = 2
var Root.SHADER_UNIFORM_VEC4 int = 3
var Root.SHADER_UNIFORM_INT int = 4
var Root.SHADER_UNIFORM_IVEC2 int = 5
var Root.SHADER_UNIFORM_IVEC3 int = 6
var Root.SHADER_UNIFORM_IVEC4 int = 7
var Root.SHADER_UNIFORM_SAMPLER2D int = 8

type ShaderUniformDataType int

var Root.SHADER_ATTRIB_FLOAT int = 0
var Root.SHADER_ATTRIB_VEC2 int = 1
var Root.SHADER_ATTRIB_VEC3 int = 2
var Root.SHADER_ATTRIB_VEC4 int = 3

type ShaderAttributeDataType int

var Root.PIXELFORMAT_UNCOMPRESSED_GRAYSCALE int = 1
var Root.PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA int = 2
var Root.PIXELFORMAT_UNCOMPRESSED_R5G6B5 int = 3
var Root.PIXELFORMAT_UNCOMPRESSED_R8G8B8 int = 4
var Root.PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 int = 5
var Root.PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 int = 6
var Root.PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 int = 7
var Root.PIXELFORMAT_UNCOMPRESSED_R32 int = 8
var Root.PIXELFORMAT_UNCOMPRESSED_R32G32B32 int = 9
var Root.PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 int = 10
var Root.PIXELFORMAT_COMPRESSED_DXT1_RGB int = 11
var Root.PIXELFORMAT_COMPRESSED_DXT1_RGBA int = 12
var Root.PIXELFORMAT_COMPRESSED_DXT3_RGBA int = 13
var Root.PIXELFORMAT_COMPRESSED_DXT5_RGBA int = 14
var Root.PIXELFORMAT_COMPRESSED_ETC1_RGB int = 15
var Root.PIXELFORMAT_COMPRESSED_ETC2_RGB int = 16
var Root.PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA int = 17
var Root.PIXELFORMAT_COMPRESSED_PVRT_RGB int = 18
var Root.PIXELFORMAT_COMPRESSED_PVRT_RGBA int = 19
var Root.PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA int = 20
var Root.PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA int = 21

type PixelFormat int

var Root.TEXTURE_FILTER_POINT int = 0
var Root.TEXTURE_FILTER_BILINEAR int = 1
var Root.TEXTURE_FILTER_TRILINEAR int = 2
var Root.TEXTURE_FILTER_ANISOTROPIC_4X int = 3
var Root.TEXTURE_FILTER_ANISOTROPIC_8X int = 4
var Root.TEXTURE_FILTER_ANISOTROPIC_16X int = 5

type TextureFilter int

var Root.TEXTURE_WRAP_REPEAT int = 0
var Root.TEXTURE_WRAP_CLAMP int = 1
var Root.TEXTURE_WRAP_MIRROR_REPEAT int = 2
var Root.TEXTURE_WRAP_MIRROR_CLAMP int = 3

type TextureWrap int

var Root.CUBEMAP_LAYOUT_AUTO_DETECT int = 0
var Root.CUBEMAP_LAYOUT_LINE_VERTICAL int = 1
var Root.CUBEMAP_LAYOUT_LINE_HORIZONTAL int = 2
var Root.CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR int = 3
var Root.CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE int = 4
var Root.CUBEMAP_LAYOUT_PANORAMA int = 5

type CubemapLayout int

var Root.FONT_DEFAULT int = 0
var Root.FONT_BITMAP int = 1
var Root.FONT_SDF int = 2

type FontType int

var Root.BLEND_ALPHA int = 0
var Root.BLEND_ADDITIVE int = 1
var Root.BLEND_MULTIPLIED int = 2
var Root.BLEND_ADD_COLORS int = 3
var Root.BLEND_SUBTRACT_COLORS int = 4
var Root.BLEND_ALPHA_PREMULTIPLY int = 5
var Root.BLEND_CUSTOM int = 6
var Root.BLEND_CUSTOM_SEPARATE int = 7

type BlendMode int

var Root.GESTURE_NONE int = 0
var Root.GESTURE_TAP int = 1
var Root.GESTURE_DOUBLETAP int = 2
var Root.GESTURE_HOLD int = 4
var Root.GESTURE_DRAG int = 8
var Root.GESTURE_SWIPE_RIGHT int = 16
var Root.GESTURE_SWIPE_LEFT int = 32
var Root.GESTURE_SWIPE_UP int = 64
var Root.GESTURE_SWIPE_DOWN int = 128
var Root.GESTURE_PINCH_IN int = 256
var Root.GESTURE_PINCH_OUT int = 512

type Gesture int

var Root.CAMERA_CUSTOM int = 0
var Root.CAMERA_FREE int = 1
var Root.CAMERA_ORBITAL int = 2
var Root.CAMERA_FIRST_PERSON int = 3
var Root.CAMERA_THIRD_PERSON int = 4

type CameraMode int

var Root.CAMERA_PERSPECTIVE int = 0
var Root.CAMERA_ORTHOGRAPHIC int = 1

type CameraProjection int

var Root.NPATCH_NINE_PATCH int = 0
var Root.NPATCH_THREE_PATCH_VERTICAL int = 1
var Root.NPATCH_THREE_PATCH_HORIZONTAL int = 2

type NPatchLayout int

type TraceLogCallback pointer

type LoadFileDataCallback pointer

type SaveFileDataCallback pointer

type LoadFileTextCallback pointer

type SaveFileTextCallback pointer

-- func InitWindow(width int, height int, title any) none: pass
-- func InitFoo(width int, height int, title any) none: pass
func WindowShouldClose() bool: pass
func CloseWindow() none: pass
func IsWindowReady() bool: pass
func IsWindowFullscreen() bool: pass
func IsWindowHidden() bool: pass
func IsWindowMinimized() bool: pass
func IsWindowMaximized() bool: pass
func IsWindowFocused() bool: pass
func IsWindowResized() bool: pass
func IsWindowState(flag int) bool: pass
func SetWindowState(flags int) none: pass
func ClearWindowState(flags int) none: pass
func ToggleFullscreen() none: pass
func MaximizeWindow() none: pass
func MinimizeWindow() none: pass
func RestoreWindow() none: pass
func SetWindowIcon(image Image) none: pass
func SetWindowIcons(images any, count int) none: pass
func SetWindowTitle(title any) none: pass
func SetWindowPosition(x int, y int) none: pass
func SetWindowMonitor(monitor int) none: pass
func SetWindowMinSize(width int, height int) none: pass
func SetWindowSize(width int, height int) none: pass
func SetWindowOpacity(opacity float) none: pass
func GetWindowHandle() pointer: pass
func GetScreenWidth() int: pass
func GetScreenHeight() int: pass
func GetRenderWidth() int: pass
func GetRenderHeight() int: pass
func GetMonitorCount() int: pass
func GetCurrentMonitor() int: pass
func GetMonitorPosition(monitor int) Vector2: pass
func GetMonitorWidth(monitor int) int: pass
func GetMonitorHeight(monitor int) int: pass
func GetMonitorPhysicalWidth(monitor int) int: pass
func GetMonitorPhysicalHeight(monitor int) int: pass
func GetMonitorRefreshRate(monitor int) int: pass
func GetWindowPosition() Vector2: pass
func GetWindowScaleDPI() Vector2: pass
func GetMonitorName(monitor int) pointer: pass
func SetClipboardText(text any) none: pass
func GetClipboardText() pointer: pass
func EnableEventWaiting() none: pass
func DisableEventWaiting() none: pass
func SwapScreenBuffer() none: pass
func PollInputEvents() none: pass
func WaitTime(seconds float) none: pass
func ShowCursor() none: pass
func HideCursor() none: pass
func IsCursorHidden() bool: pass
func EnableCursor() none: pass
func DisableCursor() none: pass
func IsCursorOnScreen() bool: pass
func ClearBackground(color Color) none: pass
func BeginDrawing() none: pass
func EndDrawing() none: pass
func BeginMode2D(camera Camera2D) none: pass
func EndMode2D() none: pass
func BeginMode3D(camera Camera3D) none: pass
func EndMode3D() none: pass
func BeginTextureMode(target RenderTexture) none: pass
func EndTextureMode() none: pass
func BeginShaderMode(shader Shader) none: pass
func EndShaderMode() none: pass
func BeginBlendMode(mode int) none: pass
func EndBlendMode() none: pass
func BeginScissorMode(x int, y int, width int, height int) none: pass
func EndScissorMode() none: pass
func BeginVrStereoMode(config VrStereoConfig) none: pass
func EndVrStereoMode() none: pass
func LoadVrStereoConfig(device VrDeviceInfo) VrStereoConfig: pass
func UnloadVrStereoConfig(config VrStereoConfig) none: pass
func LoadShader(vsFileName any, fsFileName any) Shader: pass
func LoadShaderFromMemory(vsCode any, fsCode any) Shader: pass
func IsShaderReady(shader Shader) bool: pass
func GetShaderLocation(shader Shader, uniformName any) int: pass
func GetShaderLocationAttrib(shader Shader, attribName any) int: pass
func SetShaderValue(shader Shader, locIndex int, value any, uniformType int) none: pass
func SetShaderValueV(shader Shader, locIndex int, value any, uniformType int, count int) none: pass
func SetShaderValueMatrix(shader Shader, locIndex int, mat Matrix) none: pass
func SetShaderValueTexture(shader Shader, locIndex int, texture Texture) none: pass
func UnloadShader(shader Shader) none: pass
func GetMouseRay(mousePosition Vector2, camera Camera3D) Ray: pass
func GetCameraMatrix(camera Camera3D) Matrix: pass
func GetCameraMatrix2D(camera Camera2D) Matrix: pass
func GetWorldToScreen(position Vector3, camera Camera3D) Vector2: pass
func GetScreenToWorld2D(position Vector2, camera Camera2D) Vector2: pass
func GetWorldToScreenEx(position Vector3, camera Camera3D, width int, height int) Vector2: pass
func GetWorldToScreen2D(position Vector2, camera Camera2D) Vector2: pass
func SetTargetFPS(fps int) none: pass
func GetFPS() int: pass
func GetFrameTime() float: pass
func GetTime() float: pass
func GetRandomValue(min int, max int) int: pass
func SetRandomSeed(seed int) none: pass
func TakeScreenshot(fileName any) none: pass
func SetConfigFlags(flags int) none: pass
func TraceLog(logLevel int, text any) none: pass
func SetTraceLogLevel(logLevel int) none: pass
func MemAlloc(size int) pointer: pass
func MemRealloc(ptr any, size int) pointer: pass
func MemFree(ptr any) none: pass
func OpenURL(url any) none: pass
func SetTraceLogCallback(callback any) none: pass
func SetLoadFileDataCallback(callback any) none: pass
func SetSaveFileDataCallback(callback any) none: pass
func SetLoadFileTextCallback(callback any) none: pass
func SetSaveFileTextCallback(callback any) none: pass
func LoadFileData(fileName any, bytesRead any) pointer: pass
func UnloadFileData(data any) none: pass
func SaveFileData(fileName any, data any, bytesToWrite int) bool: pass
func ExportDataAsCode(data any, size int, fileName any) bool: pass
func LoadFileText(fileName any) pointer: pass
func UnloadFileText(text any) none: pass
func SaveFileText(fileName any, text any) bool: pass
func FileExists(fileName any) bool: pass
func DirectoryExists(dirPath any) bool: pass
func IsFileExtension(fileName any, ext any) bool: pass
func GetFileLength(fileName any) int: pass
func GetFileExtension(fileName any) pointer: pass
func GetFileName(filePath any) pointer: pass
func GetFileNameWithoutExt(filePath any) pointer: pass
func GetDirectoryPath(filePath any) pointer: pass
func GetPrevDirectoryPath(dirPath any) pointer: pass
func GetWorkingDirectory() pointer: pass
func GetApplicationDirectory() pointer: pass
func ChangeDirectory(dir any) bool: pass
func IsPathFile(path any) bool: pass
func LoadDirectoryFiles(dirPath any) FilePathList: pass
func LoadDirectoryFilesEx(basePath any, filter any, scanSubdirs bool) FilePathList: pass
func UnloadDirectoryFiles(files FilePathList) none: pass
func IsFileDropped() bool: pass
func LoadDroppedFiles() FilePathList: pass
func UnloadDroppedFiles(files FilePathList) none: pass
func GetFileModTime(fileName any) int: pass
func CompressData(data any, dataSize int, compDataSize any) pointer: pass
func DecompressData(compData any, compDataSize int, dataSize any) pointer: pass
func EncodeDataBase64(data any, dataSize int, outputSize any) pointer: pass
func DecodeDataBase64(data any, outputSize any) pointer: pass
func IsKeyPressed(key int) bool: pass
func IsKeyDown(key int) bool: pass
func IsKeyReleased(key int) bool: pass
func IsKeyUp(key int) bool: pass
func SetExitKey(key int) none: pass
func GetKeyPressed() int: pass
func GetCharPressed() int: pass
func IsGamepadAvailable(gamepad int) bool: pass
func GetGamepadName(gamepad int) pointer: pass
func IsGamepadButtonPressed(gamepad int, button int) bool: pass
func IsGamepadButtonDown(gamepad int, button int) bool: pass
func IsGamepadButtonReleased(gamepad int, button int) bool: pass
func IsGamepadButtonUp(gamepad int, button int) bool: pass
func GetGamepadButtonPressed() int: pass
func GetGamepadAxisCount(gamepad int) int: pass
func GetGamepadAxisMovement(gamepad int, axis int) float: pass
func SetGamepadMappings(mappings any) int: pass
func IsMouseButtonPressed(button int) bool: pass
func IsMouseButtonDown(button int) bool: pass
func IsMouseButtonReleased(button int) bool: pass
func IsMouseButtonUp(button int) bool: pass
func GetMouseX() int: pass
func GetMouseY() int: pass
func GetMousePosition() Vector2: pass
func GetMouseDelta() Vector2: pass
func SetMousePosition(x int, y int) none: pass
func SetMouseOffset(offsetX int, offsetY int) none: pass
func SetMouseScale(scaleX float, scaleY float) none: pass
func GetMouseWheelMove() float: pass
func GetMouseWheelMoveV() Vector2: pass
func SetMouseCursor(cursor int) none: pass
func GetTouchX() int: pass
func GetTouchY() int: pass
func GetTouchPosition(index int) Vector2: pass
func GetTouchPointId(index int) int: pass
func GetTouchPointCount() int: pass
func SetGesturesEnabled(flags int) none: pass
func IsGestureDetected(gesture int) bool: pass
func GetGestureDetected() int: pass
func GetGestureHoldDuration() float: pass
func GetGestureDragVector() Vector2: pass
func GetGestureDragAngle() float: pass
func GetGesturePinchVector() Vector2: pass
func GetGesturePinchAngle() float: pass
func UpdateCamera(camera any, mode int) none: pass
func UpdateCameraPro(camera any, movement Vector3, rotation Vector3, zoom float) none: pass
func SetShapesTexture(texture Texture, source Rectangle) none: pass
func DrawPixel(posX int, posY int, color Color) none: pass
func DrawPixelV(position Vector2, color Color) none: pass
func DrawLine(startPosX int, startPosY int, endPosX int, endPosY int, color Color) none: pass
func DrawLineV(startPos Vector2, endPos Vector2, color Color) none: pass
func DrawLineEx(startPos Vector2, endPos Vector2, thick float, color Color) none: pass
func DrawLineBezier(startPos Vector2, endPos Vector2, thick float, color Color) none: pass
func DrawLineBezierQuad(startPos Vector2, endPos Vector2, controlPos Vector2, thick float, color Color) none: pass
func DrawLineBezierCubic(startPos Vector2, endPos Vector2, startControlPos Vector2, endControlPos Vector2, thick float, color Color) none: pass
func DrawLineStrip(points any, pointCount int, color Color) none: pass
func DrawCircle(centerX int, centerY int, radius float, color Color) none: pass
func DrawCircleSector(center Vector2, radius float, startAngle float, endAngle float, segments int, color Color) none: pass
func DrawCircleSectorLines(center Vector2, radius float, startAngle float, endAngle float, segments int, color Color) none: pass
func DrawCircleGradient(centerX int, centerY int, radius float, color1 Color, color2 Color) none: pass
func DrawCircleV(center Vector2, radius float, color Color) none: pass
func DrawCircleLines(centerX int, centerY int, radius float, color Color) none: pass
func DrawEllipse(centerX int, centerY int, radiusH float, radiusV float, color Color) none: pass
func DrawEllipseLines(centerX int, centerY int, radiusH float, radiusV float, color Color) none: pass
func DrawRing(center Vector2, innerRadius float, outerRadius float, startAngle float, endAngle float, segments int, color Color) none: pass
func DrawRingLines(center Vector2, innerRadius float, outerRadius float, startAngle float, endAngle float, segments int, color Color) none: pass
func DrawRectangle(posX int, posY int, width int, height int, color Color) none: pass
func DrawRectangleV(position Vector2, size Vector2, color Color) none: pass
func DrawRectangleRec(rec Rectangle, color Color) none: pass
func DrawRectanglePro(rec Rectangle, origin Vector2, rotation float, color Color) none: pass
func DrawRectangleGradientV(posX int, posY int, width int, height int, color1 Color, color2 Color) none: pass
func DrawRectangleGradientH(posX int, posY int, width int, height int, color1 Color, color2 Color) none: pass
func DrawRectangleGradientEx(rec Rectangle, col1 Color, col2 Color, col3 Color, col4 Color) none: pass
func DrawRectangleLines(posX int, posY int, width int, height int, color Color) none: pass
func DrawRectangleLinesEx(rec Rectangle, lineThick float, color Color) none: pass
func DrawRectangleRounded(rec Rectangle, roundness float, segments int, color Color) none: pass
func DrawRectangleRoundedLines(rec Rectangle, roundness float, segments int, lineThick float, color Color) none: pass
func DrawTriangle(v1 Vector2, v2 Vector2, v3 Vector2, color Color) none: pass
func DrawTriangleLines(v1 Vector2, v2 Vector2, v3 Vector2, color Color) none: pass
func DrawTriangleFan(points any, pointCount int, color Color) none: pass
func DrawTriangleStrip(points any, pointCount int, color Color) none: pass
func DrawPoly(center Vector2, sides int, radius float, rotation float, color Color) none: pass
func DrawPolyLines(center Vector2, sides int, radius float, rotation float, color Color) none: pass
func DrawPolyLinesEx(center Vector2, sides int, radius float, rotation float, lineThick float, color Color) none: pass
func CheckCollisionRecs(rec1 Rectangle, rec2 Rectangle) bool: pass
func CheckCollisionCircles(center1 Vector2, radius1 float, center2 Vector2, radius2 float) bool: pass
func CheckCollisionCircleRec(center Vector2, radius float, rec Rectangle) bool: pass
func CheckCollisionPointRec(point Vector2, rec Rectangle) bool: pass
func CheckCollisionPointCircle(point Vector2, center Vector2, radius float) bool: pass
func CheckCollisionPointTriangle(point Vector2, p1 Vector2, p2 Vector2, p3 Vector2) bool: pass
func CheckCollisionPointPoly(point Vector2, points any, pointCount int) bool: pass
func CheckCollisionLines(startPos1 Vector2, endPos1 Vector2, startPos2 Vector2, endPos2 Vector2, collisionPoint any) bool: pass
func CheckCollisionPointLine(point Vector2, p1 Vector2, p2 Vector2, threshold int) bool: pass
func GetCollisionRec(rec1 Rectangle, rec2 Rectangle) Rectangle: pass
func LoadImage(fileName any) Image: pass
func LoadImageRaw(fileName any, width int, height int, format int, headerSize int) Image: pass
func LoadImageAnim(fileName any, frames any) Image: pass
func LoadImageFromMemory(fileType any, fileData any, dataSize int) Image: pass
func LoadImageFromTexture(texture Texture) Image: pass
func LoadImageFromScreen() Image: pass
func IsImageReady(image Image) bool: pass
func UnloadImage(image Image) none: pass
func ExportImage(image Image, fileName any) bool: pass
func ExportImageAsCode(image Image, fileName any) bool: pass
func GenImageColor(width int, height int, color Color) Image: pass
func GenImageGradientV(width int, height int, top Color, bottom Color) Image: pass
func GenImageGradientH(width int, height int, left Color, right Color) Image: pass
func GenImageGradientRadial(width int, height int, density float, inner Color, outer Color) Image: pass
func GenImageChecked(width int, height int, checksX int, checksY int, col1 Color, col2 Color) Image: pass
func GenImageWhiteNoise(width int, height int, factor float) Image: pass
func GenImagePerlinNoise(width int, height int, offsetX int, offsetY int, scale float) Image: pass
func GenImageCellular(width int, height int, tileSize int) Image: pass
func GenImageText(width int, height int, text any) Image: pass
func ImageCopy(image Image) Image: pass
func ImageFromImage(image Image, rec Rectangle) Image: pass
func ImageText(text any, fontSize int, color Color) Image: pass
func ImageTextEx(font Font, text any, fontSize float, spacing float, tint Color) Image: pass
func ImageFormat(image any, newFormat int) none: pass
func ImageToPOT(image any, fill Color) none: pass
func ImageCrop(image any, crop Rectangle) none: pass
func ImageAlphaCrop(image any, threshold float) none: pass
func ImageAlphaClear(image any, color Color, threshold float) none: pass
func ImageAlphaMask(image any, alphaMask Image) none: pass
func ImageAlphaPremultiply(image any) none: pass
func ImageBlurGaussian(image any, blurSize int) none: pass
func ImageResize(image any, newWidth int, newHeight int) none: pass
func ImageResizeNN(image any, newWidth int, newHeight int) none: pass
func ImageResizeCanvas(image any, newWidth int, newHeight int, offsetX int, offsetY int, fill Color) none: pass
func ImageMipmaps(image any) none: pass
func ImageDither(image any, rBpp int, gBpp int, bBpp int, aBpp int) none: pass
func ImageFlipVertical(image any) none: pass
func ImageFlipHorizontal(image any) none: pass
func ImageRotateCW(image any) none: pass
func ImageRotateCCW(image any) none: pass
func ImageColorTint(image any, color Color) none: pass
func ImageColorInvert(image any) none: pass
func ImageColorGrayscale(image any) none: pass
func ImageColorContrast(image any, contrast float) none: pass
func ImageColorBrightness(image any, brightness int) none: pass
func ImageColorReplace(image any, color Color, replace Color) none: pass
func LoadImageColors(image Image) pointer: pass
func LoadImagePalette(image Image, maxPaletteSize int, colorCount any) pointer: pass
func UnloadImageColors(colors any) none: pass
func UnloadImagePalette(colors any) none: pass
func GetImageAlphaBorder(image Image, threshold float) Rectangle: pass
func GetImageColor(image Image, x int, y int) Color: pass
func ImageClearBackground(dst any, color Color) none: pass
func ImageDrawPixel(dst any, posX int, posY int, color Color) none: pass
func ImageDrawPixelV(dst any, position Vector2, color Color) none: pass
func ImageDrawLine(dst any, startPosX int, startPosY int, endPosX int, endPosY int, color Color) none: pass
func ImageDrawLineV(dst any, start Vector2, end Vector2, color Color) none: pass
func ImageDrawCircle(dst any, centerX int, centerY int, radius int, color Color) none: pass
func ImageDrawCircleV(dst any, center Vector2, radius int, color Color) none: pass
func ImageDrawCircleLines(dst any, centerX int, centerY int, radius int, color Color) none: pass
func ImageDrawCircleLinesV(dst any, center Vector2, radius int, color Color) none: pass
func ImageDrawRectangle(dst any, posX int, posY int, width int, height int, color Color) none: pass
func ImageDrawRectangleV(dst any, position Vector2, size Vector2, color Color) none: pass
func ImageDrawRectangleRec(dst any, rec Rectangle, color Color) none: pass
func ImageDrawRectangleLines(dst any, rec Rectangle, thick int, color Color) none: pass
func ImageDraw(dst any, src Image, srcRec Rectangle, dstRec Rectangle, tint Color) none: pass
func ImageDrawText(dst any, text any, posX int, posY int, fontSize int, color Color) none: pass
func ImageDrawTextEx(dst any, font Font, text any, position Vector2, fontSize float, spacing float, tint Color) none: pass
-- func LoadTexture(fileName any) Texture: pass
func LoadTextureFromImage(image Image) Texture: pass
func LoadTextureCubemap(image Image, layout int) Texture: pass
func LoadRenderTexture(width int, height int) RenderTexture: pass
func IsTextureReady(texture Texture) bool: pass
func UnloadTexture(texture Texture) none: pass
func IsRenderTextureReady(target RenderTexture) bool: pass
func UnloadRenderTexture(target RenderTexture) none: pass
func UpdateTexture(texture Texture, pixels any) none: pass
func UpdateTextureRec(texture Texture, rec Rectangle, pixels any) none: pass
func GenTextureMipmaps(texture any) none: pass
func SetTextureFilter(texture Texture, filter int) none: pass
func SetTextureWrap(texture Texture, wrap int) none: pass
func DrawTexture(texture Texture, posX int, posY int, tint Color) none: pass
func DrawTextureV(texture Texture, position Vector2, tint Color) none: pass
func DrawTextureEx(texture Texture, position Vector2, rotation float, scale float, tint Color) none: pass
func DrawTextureRec(texture Texture, source Rectangle, position Vector2, tint Color) none: pass
func DrawTexturePro(texture Texture, source Rectangle, dest Rectangle, origin Vector2, rotation float, tint Color) none: pass
func DrawTextureNPatch(texture Texture, nPatchInfo NPatchInfo, dest Rectangle, origin Vector2, rotation float, tint Color) none: pass
func Fade(color Color, alpha float) Color: pass
func ColorToInt(color Color) int: pass
func ColorNormalize(color Color) Vector4: pass
func ColorFromNormalized(normalized Vector4) Color: pass
func ColorToHSV(color Color) Vector3: pass
func ColorFromHSV(hue float, saturation float, value float) Color: pass
func ColorTint(color Color, tint Color) Color: pass
func ColorBrightness(color Color, factor float) Color: pass
func ColorContrast(color Color, contrast float) Color: pass
func ColorAlpha(color Color, alpha float) Color: pass
func ColorAlphaBlend(dst Color, src Color, tint Color) Color: pass
func GetColor(hexValue int) Color: pass
func GetPixelColor(srcPtr any, format int) Color: pass
func SetPixelColor(dstPtr any, color Color, format int) none: pass
func GetPixelDataSize(width int, height int, format int) int: pass
func GetFontDefault() Font: pass
func LoadFont(fileName any) Font: pass
func LoadFontEx(fileName any, fontSize int, fontChars any, glyphCount int) Font: pass
func LoadFontFromImage(image Image, key Color, firstChar int) Font: pass
func LoadFontFromMemory(fileType any, fileData any, dataSize int, fontSize int, fontChars any, glyphCount int) Font: pass
func IsFontReady(font Font) bool: pass
func LoadFontData(fileData any, dataSize int, fontSize int, fontChars any, glyphCount int, type int) pointer: pass
func GenImageFontAtlas(chars any, recs any, glyphCount int, fontSize int, padding int, packMethod int) Image: pass
func UnloadFontData(chars any, glyphCount int) none: pass
func UnloadFont(font Font) none: pass
func ExportFontAsCode(font Font, fileName any) bool: pass
func DrawFPS(posX int, posY int) none: pass
-- func DrawText(text any, posX int, posY int, fontSize int, color Color) none: pass
func DrawTextEx(font Font, text any, position Vector2, fontSize float, spacing float, tint Color) none: pass
func DrawTextPro(font Font, text any, position Vector2, origin Vector2, rotation float, fontSize float, spacing float, tint Color) none: pass
func DrawTextCodepoint(font Font, codepoint int, position Vector2, fontSize float, tint Color) none: pass
func DrawTextCodepoints(font Font, codepoints any, count int, position Vector2, fontSize float, spacing float, tint Color) none: pass
-- func MeasureText(text any, fontSize int) int: pass
func MeasureTextEx(font Font, text any, fontSize float, spacing float) Vector2: pass
func GetGlyphIndex(font Font, codepoint int) int: pass
func GetGlyphInfo(font Font, codepoint int) GlyphInfo: pass
func GetGlyphAtlasRec(font Font, codepoint int) Rectangle: pass
func LoadUTF8(codepoints any, length int) pointer: pass
func UnloadUTF8(text any) none: pass
func LoadCodepoints(text any, count any) pointer: pass
func UnloadCodepoints(codepoints any) none: pass
func GetCodepointCount(text any) int: pass
func GetCodepoint(text any, codepointSize any) int: pass
func GetCodepointNext(text any, codepointSize any) int: pass
func GetCodepointPrevious(text any, codepointSize any) int: pass
func CodepointToUTF8(codepoint int, utf8Size any) pointer: pass
func TextCopy(dst any, src any) int: pass
func TextIsEqual(text1 any, text2 any) bool: pass
func TextLength(text any) int: pass
func TextFormat(text any) pointer: pass
func TextSubtext(text any, position int, length int) pointer: pass
func TextReplace(text any, replace any, by any) pointer: pass
func TextInsert(text any, insert any, position int) pointer: pass
func TextJoin(textList any, count int, delimiter any) pointer: pass
func TextSplit(text any, delimiter int, count any) pointer: pass
func TextAppend(text any, append any, position any) none: pass
func TextFindIndex(text any, find any) int: pass
func TextToUpper(text any) pointer: pass
func TextToLower(text any) pointer: pass
func TextToPascal(text any) pointer: pass
func TextToInteger(text any) int: pass
func DrawLine3D(startPos Vector3, endPos Vector3, color Color) none: pass
func DrawPoint3D(position Vector3, color Color) none: pass
func DrawCircle3D(center Vector3, radius float, rotationAxis Vector3, rotationAngle float, color Color) none: pass
func DrawTriangle3D(v1 Vector3, v2 Vector3, v3 Vector3, color Color) none: pass
func DrawTriangleStrip3D(points any, pointCount int, color Color) none: pass
func DrawCube(position Vector3, width float, height float, length float, color Color) none: pass
func DrawCubeV(position Vector3, size Vector3, color Color) none: pass
func DrawCubeWires(position Vector3, width float, height float, length float, color Color) none: pass
func DrawCubeWiresV(position Vector3, size Vector3, color Color) none: pass
func DrawSphere(centerPos Vector3, radius float, color Color) none: pass
func DrawSphereEx(centerPos Vector3, radius float, rings int, slices int, color Color) none: pass
func DrawSphereWires(centerPos Vector3, radius float, rings int, slices int, color Color) none: pass
func DrawCylinder(position Vector3, radiusTop float, radiusBottom float, height float, slices int, color Color) none: pass
func DrawCylinderEx(startPos Vector3, endPos Vector3, startRadius float, endRadius float, sides int, color Color) none: pass
func DrawCylinderWires(position Vector3, radiusTop float, radiusBottom float, height float, slices int, color Color) none: pass
func DrawCylinderWiresEx(startPos Vector3, endPos Vector3, startRadius float, endRadius float, sides int, color Color) none: pass
func DrawCapsule(startPos Vector3, endPos Vector3, radius float, slices int, rings int, color Color) none: pass
func DrawCapsuleWires(startPos Vector3, endPos Vector3, radius float, slices int, rings int, color Color) none: pass
func DrawPlane(centerPos Vector3, size Vector2, color Color) none: pass
func DrawRay(ray Ray, color Color) none: pass
func DrawGrid(slices int, spacing float) none: pass
func LoadModel(fileName any) Model: pass
func LoadModelFromMesh(mesh Mesh) Model: pass
func IsModelReady(model Model) bool: pass
func UnloadModel(model Model) none: pass
func GetModelBoundingBox(model Model) BoundingBox: pass
func DrawModel(model Model, position Vector3, scale float, tint Color) none: pass
func DrawModelEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float, scale Vector3, tint Color) none: pass
func DrawModelWires(model Model, position Vector3, scale float, tint Color) none: pass
func DrawModelWiresEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float, scale Vector3, tint Color) none: pass
func DrawBoundingBox(box BoundingBox, color Color) none: pass
func DrawBillboard(camera Camera3D, texture Texture, position Vector3, size float, tint Color) none: pass
func DrawBillboardRec(camera Camera3D, texture Texture, source Rectangle, position Vector3, size Vector2, tint Color) none: pass
func DrawBillboardPro(camera Camera3D, texture Texture, source Rectangle, position Vector3, up Vector3, size Vector2, origin Vector2, rotation float, tint Color) none: pass
func UploadMesh(mesh any, dynamic bool) none: pass
func UpdateMeshBuffer(mesh Mesh, index int, data any, dataSize int, offset int) none: pass
func UnloadMesh(mesh Mesh) none: pass
func DrawMesh(mesh Mesh, material Material, transform Matrix) none: pass
func DrawMeshInstanced(mesh Mesh, material Material, transforms any, instances int) none: pass
func ExportMesh(mesh Mesh, fileName any) bool: pass
func GetMeshBoundingBox(mesh Mesh) BoundingBox: pass
func GenMeshTangents(mesh any) none: pass
func GenMeshPoly(sides int, radius float) Mesh: pass
func GenMeshPlane(width float, length float, resX int, resZ int) Mesh: pass
func GenMeshCube(width float, height float, length float) Mesh: pass
func GenMeshSphere(radius float, rings int, slices int) Mesh: pass
func GenMeshHemiSphere(radius float, rings int, slices int) Mesh: pass
func GenMeshCylinder(radius float, height float, slices int) Mesh: pass
func GenMeshCone(radius float, height float, slices int) Mesh: pass
func GenMeshTorus(radius float, size float, radSeg int, sides int) Mesh: pass
func GenMeshKnot(radius float, size float, radSeg int, sides int) Mesh: pass
func GenMeshHeightmap(heightmap Image, size Vector3) Mesh: pass
func GenMeshCubicmap(cubicmap Image, cubeSize Vector3) Mesh: pass
func LoadMaterials(fileName any, materialCount any) pointer: pass
func LoadMaterialDefault() Material: pass
func IsMaterialReady(material Material) bool: pass
func UnloadMaterial(material Material) none: pass
func SetMaterialTexture(material any, mapType int, texture Texture) none: pass
func SetModelMeshMaterial(model any, meshId int, materialId int) none: pass
func LoadModelAnimations(fileName any, animCount any) pointer: pass
func UpdateModelAnimation(model Model, anim ModelAnimation, frame int) none: pass
func UnloadModelAnimation(anim ModelAnimation) none: pass
func UnloadModelAnimations(animations any, count int) none: pass
func IsModelAnimationValid(model Model, anim ModelAnimation) bool: pass
func CheckCollisionSpheres(center1 Vector3, radius1 float, center2 Vector3, radius2 float) bool: pass
func CheckCollisionBoxes(box1 BoundingBox, box2 BoundingBox) bool: pass
func CheckCollisionBoxSphere(box BoundingBox, center Vector3, radius float) bool: pass
func GetRayCollisionSphere(ray Ray, center Vector3, radius float) RayCollision: pass
func GetRayCollisionBox(ray Ray, box BoundingBox) RayCollision: pass
func GetRayCollisionMesh(ray Ray, mesh Mesh, transform Matrix) RayCollision: pass
func GetRayCollisionTriangle(ray Ray, p1 Vector3, p2 Vector3, p3 Vector3) RayCollision: pass
func GetRayCollisionQuad(ray Ray, p1 Vector3, p2 Vector3, p3 Vector3, p4 Vector3) RayCollision: pass
type AudioCallback pointer

func InitAudioDevice() none: pass
func CloseAudioDevice() none: pass
func IsAudioDeviceReady() bool: pass
func SetMasterVolume(volume float) none: pass
func LoadWave(fileName any) Wave: pass
func LoadWaveFromMemory(fileType any, fileData any, dataSize int) Wave: pass
func IsWaveReady(wave Wave) bool: pass
func LoadSound(fileName any) Sound: pass
func LoadSoundFromWave(wave Wave) Sound: pass
func IsSoundReady(sound Sound) bool: pass
func UpdateSound(sound Sound, data any, sampleCount int) none: pass
func UnloadWave(wave Wave) none: pass
func UnloadSound(sound Sound) none: pass
func ExportWave(wave Wave, fileName any) bool: pass
func ExportWaveAsCode(wave Wave, fileName any) bool: pass
func PlaySound(sound Sound) none: pass
func StopSound(sound Sound) none: pass
func PauseSound(sound Sound) none: pass
func ResumeSound(sound Sound) none: pass
func IsSoundPlaying(sound Sound) bool: pass
func SetSoundVolume(sound Sound, volume float) none: pass
func SetSoundPitch(sound Sound, pitch float) none: pass
func SetSoundPan(sound Sound, pan float) none: pass
func WaveCopy(wave Wave) Wave: pass
func WaveCrop(wave any, initSample int, finalSample int) none: pass
func WaveFormat(wave any, sampleRate int, sampleSize int, channels int) none: pass
func LoadWaveSamples(wave Wave) pointer: pass
func UnloadWaveSamples(samples any) none: pass
func LoadMusicStream(fileName any) Music: pass
func LoadMusicStreamFromMemory(fileType any, data any, dataSize int) Music: pass
func IsMusicReady(music Music) bool: pass
func UnloadMusicStream(music Music) none: pass
func PlayMusicStream(music Music) none: pass
func IsMusicStreamPlaying(music Music) bool: pass
func UpdateMusicStream(music Music) none: pass
func StopMusicStream(music Music) none: pass
func PauseMusicStream(music Music) none: pass
func ResumeMusicStream(music Music) none: pass
func SeekMusicStream(music Music, position float) none: pass
func SetMusicVolume(music Music, volume float) none: pass
func SetMusicPitch(music Music, pitch float) none: pass
func SetMusicPan(music Music, pan float) none: pass
func GetMusicTimeLength(music Music) float: pass
func GetMusicTimePlayed(music Music) float: pass
func LoadAudioStream(sampleRate int, sampleSize int, channels int) AudioStream: pass
func IsAudioStreamReady(stream AudioStream) bool: pass
func UnloadAudioStream(stream AudioStream) none: pass
func UpdateAudioStream(stream AudioStream, data any, frameCount int) none: pass
func IsAudioStreamProcessed(stream AudioStream) bool: pass
func PlayAudioStream(stream AudioStream) none: pass
func PauseAudioStream(stream AudioStream) none: pass
func ResumeAudioStream(stream AudioStream) none: pass
func IsAudioStreamPlaying(stream AudioStream) bool: pass
func StopAudioStream(stream AudioStream) none: pass
func SetAudioStreamVolume(stream AudioStream, volume float) none: pass
func SetAudioStreamPitch(stream AudioStream, pitch float) none: pass
func SetAudioStreamPan(stream AudioStream, pan float) none: pass
func SetAudioStreamBufferSizeDefault(size int) none: pass
func SetAudioStreamCallback(stream AudioStream, callback any) none: pass
func AttachAudioStreamProcessor(stream AudioStream, processor any) none: pass
func DetachAudioStreamProcessor(stream AudioStream, processor any) none: pass
func AttachAudioMixedProcessor(processor any) none: pass
func DetachAudioMixedProcessor(processor any) none: pass

import os
my Root.lib = load()
func load():
    var ffi = os.newFFI()
    ffi.cbind(Vector2, [.float, .float])
    ffi.cbind(Vector3, [.float, .float, .float])
    ffi.cbind(Vector4, [.float, .float, .float, .float])
    ffi.cbind(Matrix, [.float, .float, .float, .float, .float, .float, .float, .float, .float, .float, .float, .float, .float, .float, .float, .float])
    ffi.cbind(Color, [.uchar, .uchar, .uchar, .uchar])
    ffi.cbind(Rectangle, [.float, .float, .float, .float])
    ffi.cbind(Image, [.voidPtr, .int, .int, .int, .int])
    ffi.cbind(Texture, [.uint, .int, .int, .int, .int])
    ffi.cbind(RenderTexture, [.uint, Texture, Texture])
    ffi.cbind(NPatchInfo, [Rectangle, .int, .int, .int, .int, .int])
    ffi.cbind(GlyphInfo, [.int, .int, .int, .int, Image])
    ffi.cbind(Font, [.int, .int, .int, Texture, .voidPtr, .voidPtr])
    ffi.cbind(Camera3D, [Vector3, Vector3, Vector3, .float, .int])
    ffi.cbind(Camera2D, [Vector2, Vector2, .float, .float])
    ffi.cbind(Mesh, [.int, .int, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr])
    ffi.cbind(Shader, [.uint, .voidPtr])
    ffi.cbind(MaterialMap, [Texture, Color, .float])
    ffi.cbind(Material, [Shader, .voidPtr, [os.CArray n: 4, elem: .float]])
    ffi.cbind(Transform, [Vector3, Vector4, Vector3])
    ffi.cbind(BoneInfo, [[os.CArray n: 32, elem: .char], .int])
    ffi.cbind(Model, [Matrix, .int, .int, .voidPtr, .voidPtr, .voidPtr, .int, .voidPtr, .voidPtr])
    ffi.cbind(ModelAnimation, [.int, .int, .voidPtr, .voidPtr])
    ffi.cbind(Ray, [Vector3, Vector3])
    ffi.cbind(RayCollision, [.bool, .float, Vector3, Vector3])
    ffi.cbind(BoundingBox, [Vector3, Vector3])
    ffi.cbind(Wave, [.uint, .uint, .uint, .uint, .voidPtr])
    ffi.cbind(AudioStream, [.voidPtr, .voidPtr, .uint, .uint, .uint])
    ffi.cbind(Sound, [AudioStream, .uint])
    ffi.cbind(Music, [AudioStream, .uint, .bool, .int, .voidPtr])
    ffi.cbind(VrDeviceInfo, [.int, .int, .float, .float, .float, .float, .float, .float, [os.CArray n: 4, elem: .float], [os.CArray n: 4, elem: .float]])
    ffi.cbind(VrStereoConfig, [[os.CArray n: 2, elem: Matrix], [os.CArray n: 2, elem: Matrix], [os.CArray n: 2, elem: .float], [os.CArray n: 2, elem: .float], [os.CArray n: 2, elem: .float], [os.CArray n: 2, elem: .float], [os.CArray n: 2, elem: .float], [os.CArray n: 2, elem: .float]])
    ffi.cbind(FilePathList, [.uint, .uint, .voidPtr])
    ffi.cfunc('InitWindow', [.int, .int, .voidPtr], .void)
    ffi.cfunc('InitFoo', [.int, .int, .voidPtr], .void)
    ffi.cfunc('WindowShouldClose', [], .bool)
    ffi.cfunc('CloseWindow', [], .void)
    ffi.cfunc('IsWindowReady', [], .bool)
    ffi.cfunc('IsWindowFullscreen', [], .bool)
    ffi.cfunc('IsWindowHidden', [], .bool)
    ffi.cfunc('IsWindowMinimized', [], .bool)
    ffi.cfunc('IsWindowMaximized', [], .bool)
    ffi.cfunc('IsWindowFocused', [], .bool)
    ffi.cfunc('IsWindowResized', [], .bool)
    ffi.cfunc('IsWindowState', [.uint], .bool)
    ffi.cfunc('SetWindowState', [.uint], .void)
    ffi.cfunc('ClearWindowState', [.uint], .void)
    ffi.cfunc('ToggleFullscreen', [], .void)
    ffi.cfunc('MaximizeWindow', [], .void)
    ffi.cfunc('MinimizeWindow', [], .void)
    ffi.cfunc('RestoreWindow', [], .void)
    ffi.cfunc('SetWindowIcon', [Image], .void)
    ffi.cfunc('SetWindowIcons', [.voidPtr, .int], .void)
    ffi.cfunc('SetWindowTitle', [.voidPtr], .void)
    ffi.cfunc('SetWindowPosition', [.int, .int], .void)
    ffi.cfunc('SetWindowMonitor', [.int], .void)
    ffi.cfunc('SetWindowMinSize', [.int, .int], .void)
    ffi.cfunc('SetWindowSize', [.int, .int], .void)
    ffi.cfunc('SetWindowOpacity', [.float], .void)
    ffi.cfunc('GetWindowHandle', [], .voidPtr)
    ffi.cfunc('GetScreenWidth', [], .int)
    ffi.cfunc('GetScreenHeight', [], .int)
    ffi.cfunc('GetRenderWidth', [], .int)
    ffi.cfunc('GetRenderHeight', [], .int)
    ffi.cfunc('GetMonitorCount', [], .int)
    ffi.cfunc('GetCurrentMonitor', [], .int)
    ffi.cfunc('GetMonitorPosition', [.int], Vector2)
    ffi.cfunc('GetMonitorWidth', [.int], .int)
    ffi.cfunc('GetMonitorHeight', [.int], .int)
    ffi.cfunc('GetMonitorPhysicalWidth', [.int], .int)
    ffi.cfunc('GetMonitorPhysicalHeight', [.int], .int)
    ffi.cfunc('GetMonitorRefreshRate', [.int], .int)
    ffi.cfunc('GetWindowPosition', [], Vector2)
    ffi.cfunc('GetWindowScaleDPI', [], Vector2)
    ffi.cfunc('GetMonitorName', [.int], .voidPtr)
    ffi.cfunc('SetClipboardText', [.voidPtr], .void)
    ffi.cfunc('GetClipboardText', [], .voidPtr)
    ffi.cfunc('EnableEventWaiting', [], .void)
    ffi.cfunc('DisableEventWaiting', [], .void)
    ffi.cfunc('SwapScreenBuffer', [], .void)
    ffi.cfunc('PollInputEvents', [], .void)
    ffi.cfunc('WaitTime', [.double], .void)
    ffi.cfunc('ShowCursor', [], .void)
    ffi.cfunc('HideCursor', [], .void)
    ffi.cfunc('IsCursorHidden', [], .bool)
    ffi.cfunc('EnableCursor', [], .void)
    ffi.cfunc('DisableCursor', [], .void)
    ffi.cfunc('IsCursorOnScreen', [], .bool)
    ffi.cfunc('ClearBackground', [Color], .void)
    ffi.cfunc('BeginDrawing', [], .void)
    ffi.cfunc('EndDrawing', [], .void)
    ffi.cfunc('BeginMode2D', [Camera2D], .void)
    ffi.cfunc('EndMode2D', [], .void)
    ffi.cfunc('BeginMode3D', [Camera3D], .void)
    ffi.cfunc('EndMode3D', [], .void)
    ffi.cfunc('BeginTextureMode', [RenderTexture], .void)
    ffi.cfunc('EndTextureMode', [], .void)
    ffi.cfunc('BeginShaderMode', [Shader], .void)
    ffi.cfunc('EndShaderMode', [], .void)
    ffi.cfunc('BeginBlendMode', [.int], .void)
    ffi.cfunc('EndBlendMode', [], .void)
    ffi.cfunc('BeginScissorMode', [.int, .int, .int, .int], .void)
    ffi.cfunc('EndScissorMode', [], .void)
    ffi.cfunc('BeginVrStereoMode', [VrStereoConfig], .void)
    ffi.cfunc('EndVrStereoMode', [], .void)
    ffi.cfunc('LoadVrStereoConfig', [VrDeviceInfo], VrStereoConfig)
    ffi.cfunc('UnloadVrStereoConfig', [VrStereoConfig], .void)
    ffi.cfunc('LoadShader', [.voidPtr, .voidPtr], Shader)
    ffi.cfunc('LoadShaderFromMemory', [.voidPtr, .voidPtr], Shader)
    ffi.cfunc('IsShaderReady', [Shader], .bool)
    ffi.cfunc('GetShaderLocation', [Shader, .voidPtr], .int)
    ffi.cfunc('GetShaderLocationAttrib', [Shader, .voidPtr], .int)
    ffi.cfunc('SetShaderValue', [Shader, .int, .voidPtr, .int], .void)
    ffi.cfunc('SetShaderValueV', [Shader, .int, .voidPtr, .int, .int], .void)
    ffi.cfunc('SetShaderValueMatrix', [Shader, .int, Matrix], .void)
    ffi.cfunc('SetShaderValueTexture', [Shader, .int, Texture], .void)
    ffi.cfunc('UnloadShader', [Shader], .void)
    ffi.cfunc('GetMouseRay', [Vector2, Camera3D], Ray)
    ffi.cfunc('GetCameraMatrix', [Camera3D], Matrix)
    ffi.cfunc('GetCameraMatrix2D', [Camera2D], Matrix)
    ffi.cfunc('GetWorldToScreen', [Vector3, Camera3D], Vector2)
    ffi.cfunc('GetScreenToWorld2D', [Vector2, Camera2D], Vector2)
    ffi.cfunc('GetWorldToScreenEx', [Vector3, Camera3D, .int, .int], Vector2)
    ffi.cfunc('GetWorldToScreen2D', [Vector2, Camera2D], Vector2)
    ffi.cfunc('SetTargetFPS', [.int], .void)
    ffi.cfunc('GetFPS', [], .int)
    ffi.cfunc('GetFrameTime', [], .float)
    ffi.cfunc('GetTime', [], .double)
    ffi.cfunc('GetRandomValue', [.int, .int], .int)
    ffi.cfunc('SetRandomSeed', [.uint], .void)
    ffi.cfunc('TakeScreenshot', [.voidPtr], .void)
    ffi.cfunc('SetConfigFlags', [.uint], .void)
    ffi.cfunc('TraceLog', [.int, .voidPtr], .void)
    ffi.cfunc('SetTraceLogLevel', [.int], .void)
    ffi.cfunc('MemAlloc', [.uint], .voidPtr)
    ffi.cfunc('MemRealloc', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('MemFree', [.voidPtr], .void)
    ffi.cfunc('OpenURL', [.voidPtr], .void)
    ffi.cfunc('SetTraceLogCallback', [.voidPtr], .void)
    ffi.cfunc('SetLoadFileDataCallback', [.voidPtr], .void)
    ffi.cfunc('SetSaveFileDataCallback', [.voidPtr], .void)
    ffi.cfunc('SetLoadFileTextCallback', [.voidPtr], .void)
    ffi.cfunc('SetSaveFileTextCallback', [.voidPtr], .void)
    ffi.cfunc('LoadFileData', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('UnloadFileData', [.voidPtr], .void)
    ffi.cfunc('SaveFileData', [.voidPtr, .voidPtr, .uint], .bool)
    ffi.cfunc('ExportDataAsCode', [.voidPtr, .uint, .voidPtr], .bool)
    ffi.cfunc('LoadFileText', [.voidPtr], .voidPtr)
    ffi.cfunc('UnloadFileText', [.voidPtr], .void)
    ffi.cfunc('SaveFileText', [.voidPtr, .voidPtr], .bool)
    ffi.cfunc('FileExists', [.voidPtr], .bool)
    ffi.cfunc('DirectoryExists', [.voidPtr], .bool)
    ffi.cfunc('IsFileExtension', [.voidPtr, .voidPtr], .bool)
    ffi.cfunc('GetFileLength', [.voidPtr], .int)
    ffi.cfunc('GetFileExtension', [.voidPtr], .voidPtr)
    ffi.cfunc('GetFileName', [.voidPtr], .voidPtr)
    ffi.cfunc('GetFileNameWithoutExt', [.voidPtr], .voidPtr)
    ffi.cfunc('GetDirectoryPath', [.voidPtr], .voidPtr)
    ffi.cfunc('GetPrevDirectoryPath', [.voidPtr], .voidPtr)
    ffi.cfunc('GetWorkingDirectory', [], .voidPtr)
    ffi.cfunc('GetApplicationDirectory', [], .voidPtr)
    ffi.cfunc('ChangeDirectory', [.voidPtr], .bool)
    ffi.cfunc('IsPathFile', [.voidPtr], .bool)
    ffi.cfunc('LoadDirectoryFiles', [.voidPtr], FilePathList)
    ffi.cfunc('LoadDirectoryFilesEx', [.voidPtr, .voidPtr, .bool], FilePathList)
    ffi.cfunc('UnloadDirectoryFiles', [FilePathList], .void)
    ffi.cfunc('IsFileDropped', [], .bool)
    ffi.cfunc('LoadDroppedFiles', [], FilePathList)
    ffi.cfunc('UnloadDroppedFiles', [FilePathList], .void)
    ffi.cfunc('GetFileModTime', [.voidPtr], .long)
    ffi.cfunc('CompressData', [.voidPtr, .int, .voidPtr], .voidPtr)
    ffi.cfunc('DecompressData', [.voidPtr, .int, .voidPtr], .voidPtr)
    ffi.cfunc('EncodeDataBase64', [.voidPtr, .int, .voidPtr], .voidPtr)
    ffi.cfunc('DecodeDataBase64', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('IsKeyPressed', [.int], .bool)
    ffi.cfunc('IsKeyDown', [.int], .bool)
    ffi.cfunc('IsKeyReleased', [.int], .bool)
    ffi.cfunc('IsKeyUp', [.int], .bool)
    ffi.cfunc('SetExitKey', [.int], .void)
    ffi.cfunc('GetKeyPressed', [], .int)
    ffi.cfunc('GetCharPressed', [], .int)
    ffi.cfunc('IsGamepadAvailable', [.int], .bool)
    ffi.cfunc('GetGamepadName', [.int], .voidPtr)
    ffi.cfunc('IsGamepadButtonPressed', [.int, .int], .bool)
    ffi.cfunc('IsGamepadButtonDown', [.int, .int], .bool)
    ffi.cfunc('IsGamepadButtonReleased', [.int, .int], .bool)
    ffi.cfunc('IsGamepadButtonUp', [.int, .int], .bool)
    ffi.cfunc('GetGamepadButtonPressed', [], .int)
    ffi.cfunc('GetGamepadAxisCount', [.int], .int)
    ffi.cfunc('GetGamepadAxisMovement', [.int, .int], .float)
    ffi.cfunc('SetGamepadMappings', [.voidPtr], .int)
    ffi.cfunc('IsMouseButtonPressed', [.int], .bool)
    ffi.cfunc('IsMouseButtonDown', [.int], .bool)
    ffi.cfunc('IsMouseButtonReleased', [.int], .bool)
    ffi.cfunc('IsMouseButtonUp', [.int], .bool)
    ffi.cfunc('GetMouseX', [], .int)
    ffi.cfunc('GetMouseY', [], .int)
    ffi.cfunc('GetMousePosition', [], Vector2)
    ffi.cfunc('GetMouseDelta', [], Vector2)
    ffi.cfunc('SetMousePosition', [.int, .int], .void)
    ffi.cfunc('SetMouseOffset', [.int, .int], .void)
    ffi.cfunc('SetMouseScale', [.float, .float], .void)
    ffi.cfunc('GetMouseWheelMove', [], .float)
    ffi.cfunc('GetMouseWheelMoveV', [], Vector2)
    ffi.cfunc('SetMouseCursor', [.int], .void)
    ffi.cfunc('GetTouchX', [], .int)
    ffi.cfunc('GetTouchY', [], .int)
    ffi.cfunc('GetTouchPosition', [.int], Vector2)
    ffi.cfunc('GetTouchPointId', [.int], .int)
    ffi.cfunc('GetTouchPointCount', [], .int)
    ffi.cfunc('SetGesturesEnabled', [.uint], .void)
    ffi.cfunc('IsGestureDetected', [.int], .bool)
    ffi.cfunc('GetGestureDetected', [], .int)
    ffi.cfunc('GetGestureHoldDuration', [], .float)
    ffi.cfunc('GetGestureDragVector', [], Vector2)
    ffi.cfunc('GetGestureDragAngle', [], .float)
    ffi.cfunc('GetGesturePinchVector', [], Vector2)
    ffi.cfunc('GetGesturePinchAngle', [], .float)
    ffi.cfunc('UpdateCamera', [.voidPtr, .int], .void)
    ffi.cfunc('UpdateCameraPro', [.voidPtr, Vector3, Vector3, .float], .void)
    ffi.cfunc('SetShapesTexture', [Texture, Rectangle], .void)
    ffi.cfunc('DrawPixel', [.int, .int, Color], .void)
    ffi.cfunc('DrawPixelV', [Vector2, Color], .void)
    ffi.cfunc('DrawLine', [.int, .int, .int, .int, Color], .void)
    ffi.cfunc('DrawLineV', [Vector2, Vector2, Color], .void)
    ffi.cfunc('DrawLineEx', [Vector2, Vector2, .float, Color], .void)
    ffi.cfunc('DrawLineBezier', [Vector2, Vector2, .float, Color], .void)
    ffi.cfunc('DrawLineBezierQuad', [Vector2, Vector2, Vector2, .float, Color], .void)
    ffi.cfunc('DrawLineBezierCubic', [Vector2, Vector2, Vector2, Vector2, .float, Color], .void)
    ffi.cfunc('DrawLineStrip', [.voidPtr, .int, Color], .void)
    ffi.cfunc('DrawCircle', [.int, .int, .float, Color], .void)
    ffi.cfunc('DrawCircleSector', [Vector2, .float, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawCircleSectorLines', [Vector2, .float, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawCircleGradient', [.int, .int, .float, Color, Color], .void)
    ffi.cfunc('DrawCircleV', [Vector2, .float, Color], .void)
    ffi.cfunc('DrawCircleLines', [.int, .int, .float, Color], .void)
    ffi.cfunc('DrawEllipse', [.int, .int, .float, .float, Color], .void)
    ffi.cfunc('DrawEllipseLines', [.int, .int, .float, .float, Color], .void)
    ffi.cfunc('DrawRing', [Vector2, .float, .float, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawRingLines', [Vector2, .float, .float, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawRectangle', [.int, .int, .int, .int, Color], .void)
    ffi.cfunc('DrawRectangleV', [Vector2, Vector2, Color], .void)
    ffi.cfunc('DrawRectangleRec', [Rectangle, Color], .void)
    ffi.cfunc('DrawRectanglePro', [Rectangle, Vector2, .float, Color], .void)
    ffi.cfunc('DrawRectangleGradientV', [.int, .int, .int, .int, Color, Color], .void)
    ffi.cfunc('DrawRectangleGradientH', [.int, .int, .int, .int, Color, Color], .void)
    ffi.cfunc('DrawRectangleGradientEx', [Rectangle, Color, Color, Color, Color], .void)
    ffi.cfunc('DrawRectangleLines', [.int, .int, .int, .int, Color], .void)
    ffi.cfunc('DrawRectangleLinesEx', [Rectangle, .float, Color], .void)
    ffi.cfunc('DrawRectangleRounded', [Rectangle, .float, .int, Color], .void)
    ffi.cfunc('DrawRectangleRoundedLines', [Rectangle, .float, .int, .float, Color], .void)
    ffi.cfunc('DrawTriangle', [Vector2, Vector2, Vector2, Color], .void)
    ffi.cfunc('DrawTriangleLines', [Vector2, Vector2, Vector2, Color], .void)
    ffi.cfunc('DrawTriangleFan', [.voidPtr, .int, Color], .void)
    ffi.cfunc('DrawTriangleStrip', [.voidPtr, .int, Color], .void)
    ffi.cfunc('DrawPoly', [Vector2, .int, .float, .float, Color], .void)
    ffi.cfunc('DrawPolyLines', [Vector2, .int, .float, .float, Color], .void)
    ffi.cfunc('DrawPolyLinesEx', [Vector2, .int, .float, .float, .float, Color], .void)
    ffi.cfunc('CheckCollisionRecs', [Rectangle, Rectangle], .bool)
    ffi.cfunc('CheckCollisionCircles', [Vector2, .float, Vector2, .float], .bool)
    ffi.cfunc('CheckCollisionCircleRec', [Vector2, .float, Rectangle], .bool)
    ffi.cfunc('CheckCollisionPointRec', [Vector2, Rectangle], .bool)
    ffi.cfunc('CheckCollisionPointCircle', [Vector2, Vector2, .float], .bool)
    ffi.cfunc('CheckCollisionPointTriangle', [Vector2, Vector2, Vector2, Vector2], .bool)
    ffi.cfunc('CheckCollisionPointPoly', [Vector2, .voidPtr, .int], .bool)
    ffi.cfunc('CheckCollisionLines', [Vector2, Vector2, Vector2, Vector2, .voidPtr], .bool)
    ffi.cfunc('CheckCollisionPointLine', [Vector2, Vector2, Vector2, .int], .bool)
    ffi.cfunc('GetCollisionRec', [Rectangle, Rectangle], Rectangle)
    ffi.cfunc('LoadImage', [.voidPtr], Image)
    ffi.cfunc('LoadImageRaw', [.voidPtr, .int, .int, .int, .int], Image)
    ffi.cfunc('LoadImageAnim', [.voidPtr, .voidPtr], Image)
    ffi.cfunc('LoadImageFromMemory', [.voidPtr, .voidPtr, .int], Image)
    ffi.cfunc('LoadImageFromTexture', [Texture], Image)
    ffi.cfunc('LoadImageFromScreen', [], Image)
    ffi.cfunc('IsImageReady', [Image], .bool)
    ffi.cfunc('UnloadImage', [Image], .void)
    ffi.cfunc('ExportImage', [Image, .voidPtr], .bool)
    ffi.cfunc('ExportImageAsCode', [Image, .voidPtr], .bool)
    ffi.cfunc('GenImageColor', [.int, .int, Color], Image)
    ffi.cfunc('GenImageGradientV', [.int, .int, Color, Color], Image)
    ffi.cfunc('GenImageGradientH', [.int, .int, Color, Color], Image)
    ffi.cfunc('GenImageGradientRadial', [.int, .int, .float, Color, Color], Image)
    ffi.cfunc('GenImageChecked', [.int, .int, .int, .int, Color, Color], Image)
    ffi.cfunc('GenImageWhiteNoise', [.int, .int, .float], Image)
    ffi.cfunc('GenImagePerlinNoise', [.int, .int, .int, .int, .float], Image)
    ffi.cfunc('GenImageCellular', [.int, .int, .int], Image)
    ffi.cfunc('GenImageText', [.int, .int, .voidPtr], Image)
    ffi.cfunc('ImageCopy', [Image], Image)
    ffi.cfunc('ImageFromImage', [Image, Rectangle], Image)
    ffi.cfunc('ImageText', [.voidPtr, .int, Color], Image)
    ffi.cfunc('ImageTextEx', [Font, .voidPtr, .float, .float, Color], Image)
    ffi.cfunc('ImageFormat', [.voidPtr, .int], .void)
    ffi.cfunc('ImageToPOT', [.voidPtr, Color], .void)
    ffi.cfunc('ImageCrop', [.voidPtr, Rectangle], .void)
    ffi.cfunc('ImageAlphaCrop', [.voidPtr, .float], .void)
    ffi.cfunc('ImageAlphaClear', [.voidPtr, Color, .float], .void)
    ffi.cfunc('ImageAlphaMask', [.voidPtr, Image], .void)
    ffi.cfunc('ImageAlphaPremultiply', [.voidPtr], .void)
    ffi.cfunc('ImageBlurGaussian', [.voidPtr, .int], .void)
    ffi.cfunc('ImageResize', [.voidPtr, .int, .int], .void)
    ffi.cfunc('ImageResizeNN', [.voidPtr, .int, .int], .void)
    ffi.cfunc('ImageResizeCanvas', [.voidPtr, .int, .int, .int, .int, Color], .void)
    ffi.cfunc('ImageMipmaps', [.voidPtr], .void)
    ffi.cfunc('ImageDither', [.voidPtr, .int, .int, .int, .int], .void)
    ffi.cfunc('ImageFlipVertical', [.voidPtr], .void)
    ffi.cfunc('ImageFlipHorizontal', [.voidPtr], .void)
    ffi.cfunc('ImageRotateCW', [.voidPtr], .void)
    ffi.cfunc('ImageRotateCCW', [.voidPtr], .void)
    ffi.cfunc('ImageColorTint', [.voidPtr, Color], .void)
    ffi.cfunc('ImageColorInvert', [.voidPtr], .void)
    ffi.cfunc('ImageColorGrayscale', [.voidPtr], .void)
    ffi.cfunc('ImageColorContrast', [.voidPtr, .float], .void)
    ffi.cfunc('ImageColorBrightness', [.voidPtr, .int], .void)
    ffi.cfunc('ImageColorReplace', [.voidPtr, Color, Color], .void)
    ffi.cfunc('LoadImageColors', [Image], .voidPtr)
    ffi.cfunc('LoadImagePalette', [Image, .int, .voidPtr], .voidPtr)
    ffi.cfunc('UnloadImageColors', [.voidPtr], .void)
    ffi.cfunc('UnloadImagePalette', [.voidPtr], .void)
    ffi.cfunc('GetImageAlphaBorder', [Image, .float], Rectangle)
    ffi.cfunc('GetImageColor', [Image, .int, .int], Color)
    ffi.cfunc('ImageClearBackground', [.voidPtr, Color], .void)
    ffi.cfunc('ImageDrawPixel', [.voidPtr, .int, .int, Color], .void)
    ffi.cfunc('ImageDrawPixelV', [.voidPtr, Vector2, Color], .void)
    ffi.cfunc('ImageDrawLine', [.voidPtr, .int, .int, .int, .int, Color], .void)
    ffi.cfunc('ImageDrawLineV', [.voidPtr, Vector2, Vector2, Color], .void)
    ffi.cfunc('ImageDrawCircle', [.voidPtr, .int, .int, .int, Color], .void)
    ffi.cfunc('ImageDrawCircleV', [.voidPtr, Vector2, .int, Color], .void)
    ffi.cfunc('ImageDrawCircleLines', [.voidPtr, .int, .int, .int, Color], .void)
    ffi.cfunc('ImageDrawCircleLinesV', [.voidPtr, Vector2, .int, Color], .void)
    ffi.cfunc('ImageDrawRectangle', [.voidPtr, .int, .int, .int, .int, Color], .void)
    ffi.cfunc('ImageDrawRectangleV', [.voidPtr, Vector2, Vector2, Color], .void)
    ffi.cfunc('ImageDrawRectangleRec', [.voidPtr, Rectangle, Color], .void)
    ffi.cfunc('ImageDrawRectangleLines', [.voidPtr, Rectangle, .int, Color], .void)
    ffi.cfunc('ImageDraw', [.voidPtr, Image, Rectangle, Rectangle, Color], .void)
    ffi.cfunc('ImageDrawText', [.voidPtr, .voidPtr, .int, .int, .int, Color], .void)
    ffi.cfunc('ImageDrawTextEx', [.voidPtr, Font, .voidPtr, Vector2, .float, .float, Color], .void)
    ffi.cfunc('LoadTexture', [.voidPtr], Texture)
    ffi.cfunc('LoadTextureFromImage', [Image], Texture)
    ffi.cfunc('LoadTextureCubemap', [Image, .int], Texture)
    ffi.cfunc('LoadRenderTexture', [.int, .int], RenderTexture)
    ffi.cfunc('IsTextureReady', [Texture], .bool)
    ffi.cfunc('UnloadTexture', [Texture], .void)
    ffi.cfunc('IsRenderTextureReady', [RenderTexture], .bool)
    ffi.cfunc('UnloadRenderTexture', [RenderTexture], .void)
    ffi.cfunc('UpdateTexture', [Texture, .voidPtr], .void)
    ffi.cfunc('UpdateTextureRec', [Texture, Rectangle, .voidPtr], .void)
    ffi.cfunc('GenTextureMipmaps', [.voidPtr], .void)
    ffi.cfunc('SetTextureFilter', [Texture, .int], .void)
    ffi.cfunc('SetTextureWrap', [Texture, .int], .void)
    ffi.cfunc('DrawTexture', [Texture, .int, .int, Color], .void)
    ffi.cfunc('DrawTextureV', [Texture, Vector2, Color], .void)
    ffi.cfunc('DrawTextureEx', [Texture, Vector2, .float, .float, Color], .void)
    ffi.cfunc('DrawTextureRec', [Texture, Rectangle, Vector2, Color], .void)
    ffi.cfunc('DrawTexturePro', [Texture, Rectangle, Rectangle, Vector2, .float, Color], .void)
    ffi.cfunc('DrawTextureNPatch', [Texture, NPatchInfo, Rectangle, Vector2, .float, Color], .void)
    ffi.cfunc('Fade', [Color, .float], Color)
    ffi.cfunc('ColorToInt', [Color], .int)
    ffi.cfunc('ColorNormalize', [Color], Vector4)
    ffi.cfunc('ColorFromNormalized', [Vector4], Color)
    ffi.cfunc('ColorToHSV', [Color], Vector3)
    ffi.cfunc('ColorFromHSV', [.float, .float, .float], Color)
    ffi.cfunc('ColorTint', [Color, Color], Color)
    ffi.cfunc('ColorBrightness', [Color, .float], Color)
    ffi.cfunc('ColorContrast', [Color, .float], Color)
    ffi.cfunc('ColorAlpha', [Color, .float], Color)
    ffi.cfunc('ColorAlphaBlend', [Color, Color, Color], Color)
    ffi.cfunc('GetColor', [.uint], Color)
    ffi.cfunc('GetPixelColor', [.voidPtr, .int], Color)
    ffi.cfunc('SetPixelColor', [.voidPtr, Color, .int], .void)
    ffi.cfunc('GetPixelDataSize', [.int, .int, .int], .int)
    ffi.cfunc('GetFontDefault', [], Font)
    ffi.cfunc('LoadFont', [.voidPtr], Font)
    ffi.cfunc('LoadFontEx', [.voidPtr, .int, .voidPtr, .int], Font)
    ffi.cfunc('LoadFontFromImage', [Image, Color, .int], Font)
    ffi.cfunc('LoadFontFromMemory', [.voidPtr, .voidPtr, .int, .int, .voidPtr, .int], Font)
    ffi.cfunc('IsFontReady', [Font], .bool)
    ffi.cfunc('LoadFontData', [.voidPtr, .int, .int, .voidPtr, .int, .int], .voidPtr)
    ffi.cfunc('GenImageFontAtlas', [.voidPtr, .voidPtr, .int, .int, .int, .int], Image)
    ffi.cfunc('UnloadFontData', [.voidPtr, .int], .void)
    ffi.cfunc('UnloadFont', [Font], .void)
    ffi.cfunc('ExportFontAsCode', [Font, .voidPtr], .bool)
    ffi.cfunc('DrawFPS', [.int, .int], .void)
    ffi.cfunc('DrawText', [.voidPtr, .int, .int, .int, Color], .void)
    ffi.cfunc('DrawTextEx', [Font, .voidPtr, Vector2, .float, .float, Color], .void)
    ffi.cfunc('DrawTextPro', [Font, .voidPtr, Vector2, Vector2, .float, .float, .float, Color], .void)
    ffi.cfunc('DrawTextCodepoint', [Font, .int, Vector2, .float, Color], .void)
    ffi.cfunc('DrawTextCodepoints', [Font, .voidPtr, .int, Vector2, .float, .float, Color], .void)
    ffi.cfunc('MeasureText', [.voidPtr, .int], .int)
    ffi.cfunc('MeasureTextEx', [Font, .voidPtr, .float, .float], Vector2)
    ffi.cfunc('GetGlyphIndex', [Font, .int], .int)
    ffi.cfunc('GetGlyphInfo', [Font, .int], GlyphInfo)
    ffi.cfunc('GetGlyphAtlasRec', [Font, .int], Rectangle)
    ffi.cfunc('LoadUTF8', [.voidPtr, .int], .voidPtr)
    ffi.cfunc('UnloadUTF8', [.voidPtr], .void)
    ffi.cfunc('LoadCodepoints', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('UnloadCodepoints', [.voidPtr], .void)
    ffi.cfunc('GetCodepointCount', [.voidPtr], .int)
    ffi.cfunc('GetCodepoint', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('GetCodepointNext', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('GetCodepointPrevious', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('CodepointToUTF8', [.int, .voidPtr], .voidPtr)
    ffi.cfunc('TextCopy', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('TextIsEqual', [.voidPtr, .voidPtr], .bool)
    ffi.cfunc('TextLength', [.voidPtr], .uint)
    ffi.cfunc('TextFormat', [.voidPtr], .voidPtr)
    ffi.cfunc('TextSubtext', [.voidPtr, .int, .int], .voidPtr)
    ffi.cfunc('TextReplace', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('TextInsert', [.voidPtr, .voidPtr, .int], .voidPtr)
    ffi.cfunc('TextJoin', [.voidPtr, .int, .voidPtr], .voidPtr)
    ffi.cfunc('TextSplit', [.voidPtr, .char, .voidPtr], .voidPtr)
    ffi.cfunc('TextAppend', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('TextFindIndex', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('TextToUpper', [.voidPtr], .voidPtr)
    ffi.cfunc('TextToLower', [.voidPtr], .voidPtr)
    ffi.cfunc('TextToPascal', [.voidPtr], .voidPtr)
    ffi.cfunc('TextToInteger', [.voidPtr], .int)
    ffi.cfunc('DrawLine3D', [Vector3, Vector3, Color], .void)
    ffi.cfunc('DrawPoint3D', [Vector3, Color], .void)
    ffi.cfunc('DrawCircle3D', [Vector3, .float, Vector3, .float, Color], .void)
    ffi.cfunc('DrawTriangle3D', [Vector3, Vector3, Vector3, Color], .void)
    ffi.cfunc('DrawTriangleStrip3D', [.voidPtr, .int, Color], .void)
    ffi.cfunc('DrawCube', [Vector3, .float, .float, .float, Color], .void)
    ffi.cfunc('DrawCubeV', [Vector3, Vector3, Color], .void)
    ffi.cfunc('DrawCubeWires', [Vector3, .float, .float, .float, Color], .void)
    ffi.cfunc('DrawCubeWiresV', [Vector3, Vector3, Color], .void)
    ffi.cfunc('DrawSphere', [Vector3, .float, Color], .void)
    ffi.cfunc('DrawSphereEx', [Vector3, .float, .int, .int, Color], .void)
    ffi.cfunc('DrawSphereWires', [Vector3, .float, .int, .int, Color], .void)
    ffi.cfunc('DrawCylinder', [Vector3, .float, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawCylinderEx', [Vector3, Vector3, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawCylinderWires', [Vector3, .float, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawCylinderWiresEx', [Vector3, Vector3, .float, .float, .int, Color], .void)
    ffi.cfunc('DrawCapsule', [Vector3, Vector3, .float, .int, .int, Color], .void)
    ffi.cfunc('DrawCapsuleWires', [Vector3, Vector3, .float, .int, .int, Color], .void)
    ffi.cfunc('DrawPlane', [Vector3, Vector2, Color], .void)
    ffi.cfunc('DrawRay', [Ray, Color], .void)
    ffi.cfunc('DrawGrid', [.int, .float], .void)
    ffi.cfunc('LoadModel', [.voidPtr], Model)
    ffi.cfunc('LoadModelFromMesh', [Mesh], Model)
    ffi.cfunc('IsModelReady', [Model], .bool)
    ffi.cfunc('UnloadModel', [Model], .void)
    ffi.cfunc('GetModelBoundingBox', [Model], BoundingBox)
    ffi.cfunc('DrawModel', [Model, Vector3, .float, Color], .void)
    ffi.cfunc('DrawModelEx', [Model, Vector3, Vector3, .float, Vector3, Color], .void)
    ffi.cfunc('DrawModelWires', [Model, Vector3, .float, Color], .void)
    ffi.cfunc('DrawModelWiresEx', [Model, Vector3, Vector3, .float, Vector3, Color], .void)
    ffi.cfunc('DrawBoundingBox', [BoundingBox, Color], .void)
    ffi.cfunc('DrawBillboard', [Camera3D, Texture, Vector3, .float, Color], .void)
    ffi.cfunc('DrawBillboardRec', [Camera3D, Texture, Rectangle, Vector3, Vector2, Color], .void)
    ffi.cfunc('DrawBillboardPro', [Camera3D, Texture, Rectangle, Vector3, Vector3, Vector2, Vector2, .float, Color], .void)
    ffi.cfunc('UploadMesh', [.voidPtr, .bool], .void)
    ffi.cfunc('UpdateMeshBuffer', [Mesh, .int, .voidPtr, .int, .int], .void)
    ffi.cfunc('UnloadMesh', [Mesh], .void)
    ffi.cfunc('DrawMesh', [Mesh, Material, Matrix], .void)
    ffi.cfunc('DrawMeshInstanced', [Mesh, Material, .voidPtr, .int], .void)
    ffi.cfunc('ExportMesh', [Mesh, .voidPtr], .bool)
    ffi.cfunc('GetMeshBoundingBox', [Mesh], BoundingBox)
    ffi.cfunc('GenMeshTangents', [.voidPtr], .void)
    ffi.cfunc('GenMeshPoly', [.int, .float], Mesh)
    ffi.cfunc('GenMeshPlane', [.float, .float, .int, .int], Mesh)
    ffi.cfunc('GenMeshCube', [.float, .float, .float], Mesh)
    ffi.cfunc('GenMeshSphere', [.float, .int, .int], Mesh)
    ffi.cfunc('GenMeshHemiSphere', [.float, .int, .int], Mesh)
    ffi.cfunc('GenMeshCylinder', [.float, .float, .int], Mesh)
    ffi.cfunc('GenMeshCone', [.float, .float, .int], Mesh)
    ffi.cfunc('GenMeshTorus', [.float, .float, .int, .int], Mesh)
    ffi.cfunc('GenMeshKnot', [.float, .float, .int, .int], Mesh)
    ffi.cfunc('GenMeshHeightmap', [Image, Vector3], Mesh)
    ffi.cfunc('GenMeshCubicmap', [Image, Vector3], Mesh)
    ffi.cfunc('LoadMaterials', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LoadMaterialDefault', [], Material)
    ffi.cfunc('IsMaterialReady', [Material], .bool)
    ffi.cfunc('UnloadMaterial', [Material], .void)
    ffi.cfunc('SetMaterialTexture', [.voidPtr, .int, Texture], .void)
    ffi.cfunc('SetModelMeshMaterial', [.voidPtr, .int, .int], .void)
    ffi.cfunc('LoadModelAnimations', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('UpdateModelAnimation', [Model, ModelAnimation, .int], .void)
    ffi.cfunc('UnloadModelAnimation', [ModelAnimation], .void)
    ffi.cfunc('UnloadModelAnimations', [.voidPtr, .uint], .void)
    ffi.cfunc('IsModelAnimationValid', [Model, ModelAnimation], .bool)
    ffi.cfunc('CheckCollisionSpheres', [Vector3, .float, Vector3, .float], .bool)
    ffi.cfunc('CheckCollisionBoxes', [BoundingBox, BoundingBox], .bool)
    ffi.cfunc('CheckCollisionBoxSphere', [BoundingBox, Vector3, .float], .bool)
    ffi.cfunc('GetRayCollisionSphere', [Ray, Vector3, .float], RayCollision)
    ffi.cfunc('GetRayCollisionBox', [Ray, BoundingBox], RayCollision)
    ffi.cfunc('GetRayCollisionMesh', [Ray, Mesh, Matrix], RayCollision)
    ffi.cfunc('GetRayCollisionTriangle', [Ray, Vector3, Vector3, Vector3], RayCollision)
    ffi.cfunc('GetRayCollisionQuad', [Ray, Vector3, Vector3, Vector3, Vector3], RayCollision)
    ffi.cfunc('InitAudioDevice', [], .void)
    ffi.cfunc('CloseAudioDevice', [], .void)
    ffi.cfunc('IsAudioDeviceReady', [], .bool)
    ffi.cfunc('SetMasterVolume', [.float], .void)
    ffi.cfunc('LoadWave', [.voidPtr], Wave)
    ffi.cfunc('LoadWaveFromMemory', [.voidPtr, .voidPtr, .int], Wave)
    ffi.cfunc('IsWaveReady', [Wave], .bool)
    ffi.cfunc('LoadSound', [.voidPtr], Sound)
    ffi.cfunc('LoadSoundFromWave', [Wave], Sound)
    ffi.cfunc('IsSoundReady', [Sound], .bool)
    ffi.cfunc('UpdateSound', [Sound, .voidPtr, .int], .void)
    ffi.cfunc('UnloadWave', [Wave], .void)
    ffi.cfunc('UnloadSound', [Sound], .void)
    ffi.cfunc('ExportWave', [Wave, .voidPtr], .bool)
    ffi.cfunc('ExportWaveAsCode', [Wave, .voidPtr], .bool)
    ffi.cfunc('PlaySound', [Sound], .void)
    ffi.cfunc('StopSound', [Sound], .void)
    ffi.cfunc('PauseSound', [Sound], .void)
    ffi.cfunc('ResumeSound', [Sound], .void)
    ffi.cfunc('IsSoundPlaying', [Sound], .bool)
    ffi.cfunc('SetSoundVolume', [Sound, .float], .void)
    ffi.cfunc('SetSoundPitch', [Sound, .float], .void)
    ffi.cfunc('SetSoundPan', [Sound, .float], .void)
    ffi.cfunc('WaveCopy', [Wave], Wave)
    ffi.cfunc('WaveCrop', [.voidPtr, .int, .int], .void)
    ffi.cfunc('WaveFormat', [.voidPtr, .int, .int, .int], .void)
    ffi.cfunc('LoadWaveSamples', [Wave], .voidPtr)
    ffi.cfunc('UnloadWaveSamples', [.voidPtr], .void)
    ffi.cfunc('LoadMusicStream', [.voidPtr], Music)
    ffi.cfunc('LoadMusicStreamFromMemory', [.voidPtr, .voidPtr, .int], Music)
    ffi.cfunc('IsMusicReady', [Music], .bool)
    ffi.cfunc('UnloadMusicStream', [Music], .void)
    ffi.cfunc('PlayMusicStream', [Music], .void)
    ffi.cfunc('IsMusicStreamPlaying', [Music], .bool)
    ffi.cfunc('UpdateMusicStream', [Music], .void)
    ffi.cfunc('StopMusicStream', [Music], .void)
    ffi.cfunc('PauseMusicStream', [Music], .void)
    ffi.cfunc('ResumeMusicStream', [Music], .void)
    ffi.cfunc('SeekMusicStream', [Music, .float], .void)
    ffi.cfunc('SetMusicVolume', [Music, .float], .void)
    ffi.cfunc('SetMusicPitch', [Music, .float], .void)
    ffi.cfunc('SetMusicPan', [Music, .float], .void)
    ffi.cfunc('GetMusicTimeLength', [Music], .float)
    ffi.cfunc('GetMusicTimePlayed', [Music], .float)
    ffi.cfunc('LoadAudioStream', [.uint, .uint, .uint], AudioStream)
    ffi.cfunc('IsAudioStreamReady', [AudioStream], .bool)
    ffi.cfunc('UnloadAudioStream', [AudioStream], .void)
    ffi.cfunc('UpdateAudioStream', [AudioStream, .voidPtr, .int], .void)
    ffi.cfunc('IsAudioStreamProcessed', [AudioStream], .bool)
    ffi.cfunc('PlayAudioStream', [AudioStream], .void)
    ffi.cfunc('PauseAudioStream', [AudioStream], .void)
    ffi.cfunc('ResumeAudioStream', [AudioStream], .void)
    ffi.cfunc('IsAudioStreamPlaying', [AudioStream], .bool)
    ffi.cfunc('StopAudioStream', [AudioStream], .void)
    ffi.cfunc('SetAudioStreamVolume', [AudioStream, .float], .void)
    ffi.cfunc('SetAudioStreamPitch', [AudioStream, .float], .void)
    ffi.cfunc('SetAudioStreamPan', [AudioStream, .float], .void)
    ffi.cfunc('SetAudioStreamBufferSizeDefault', [.int], .void)
    ffi.cfunc('SetAudioStreamCallback', [AudioStream, .voidPtr], .void)
    ffi.cfunc('AttachAudioStreamProcessor', [AudioStream, .voidPtr], .void)
    ffi.cfunc('DetachAudioStreamProcessor', [AudioStream, .voidPtr], .void)
    ffi.cfunc('AttachAudioMixedProcessor', [.voidPtr], .void)
    ffi.cfunc('DetachAudioMixedProcessor', [.voidPtr], .void)
    my lib = ffi.bindLib(libPath, [genMap: true])
--     InitWindow = lib.InitWindow
--     InitFoo = lib.InitFoo
    WindowShouldClose = lib.WindowShouldClose
    CloseWindow = lib.CloseWindow
    IsWindowReady = lib.IsWindowReady
    IsWindowFullscreen = lib.IsWindowFullscreen
    IsWindowHidden = lib.IsWindowHidden
    IsWindowMinimized = lib.IsWindowMinimized
    IsWindowMaximized = lib.IsWindowMaximized
    IsWindowFocused = lib.IsWindowFocused
    IsWindowResized = lib.IsWindowResized
    IsWindowState = lib.IsWindowState
    SetWindowState = lib.SetWindowState
    ClearWindowState = lib.ClearWindowState
    ToggleFullscreen = lib.ToggleFullscreen
    MaximizeWindow = lib.MaximizeWindow
    MinimizeWindow = lib.MinimizeWindow
    RestoreWindow = lib.RestoreWindow
    SetWindowIcon = lib.SetWindowIcon
    SetWindowIcons = lib.SetWindowIcons
    SetWindowTitle = lib.SetWindowTitle
    SetWindowPosition = lib.SetWindowPosition
    SetWindowMonitor = lib.SetWindowMonitor
    SetWindowMinSize = lib.SetWindowMinSize
    SetWindowSize = lib.SetWindowSize
    SetWindowOpacity = lib.SetWindowOpacity
    GetWindowHandle = lib.GetWindowHandle
    GetScreenWidth = lib.GetScreenWidth
    GetScreenHeight = lib.GetScreenHeight
    GetRenderWidth = lib.GetRenderWidth
    GetRenderHeight = lib.GetRenderHeight
    GetMonitorCount = lib.GetMonitorCount
    GetCurrentMonitor = lib.GetCurrentMonitor
    GetMonitorPosition = lib.GetMonitorPosition
    GetMonitorWidth = lib.GetMonitorWidth
    GetMonitorHeight = lib.GetMonitorHeight
    GetMonitorPhysicalWidth = lib.GetMonitorPhysicalWidth
    GetMonitorPhysicalHeight = lib.GetMonitorPhysicalHeight
    GetMonitorRefreshRate = lib.GetMonitorRefreshRate
    GetWindowPosition = lib.GetWindowPosition
    GetWindowScaleDPI = lib.GetWindowScaleDPI
    GetMonitorName = lib.GetMonitorName
    SetClipboardText = lib.SetClipboardText
    GetClipboardText = lib.GetClipboardText
    EnableEventWaiting = lib.EnableEventWaiting
    DisableEventWaiting = lib.DisableEventWaiting
    SwapScreenBuffer = lib.SwapScreenBuffer
    PollInputEvents = lib.PollInputEvents
    WaitTime = lib.WaitTime
    ShowCursor = lib.ShowCursor
    HideCursor = lib.HideCursor
    IsCursorHidden = lib.IsCursorHidden
    EnableCursor = lib.EnableCursor
    DisableCursor = lib.DisableCursor
    IsCursorOnScreen = lib.IsCursorOnScreen
    ClearBackground = lib.ClearBackground
    BeginDrawing = lib.BeginDrawing
    EndDrawing = lib.EndDrawing
    BeginMode2D = lib.BeginMode2D
    EndMode2D = lib.EndMode2D
    BeginMode3D = lib.BeginMode3D
    EndMode3D = lib.EndMode3D
    BeginTextureMode = lib.BeginTextureMode
    EndTextureMode = lib.EndTextureMode
    BeginShaderMode = lib.BeginShaderMode
    EndShaderMode = lib.EndShaderMode
    BeginBlendMode = lib.BeginBlendMode
    EndBlendMode = lib.EndBlendMode
    BeginScissorMode = lib.BeginScissorMode
    EndScissorMode = lib.EndScissorMode
    BeginVrStereoMode = lib.BeginVrStereoMode
    EndVrStereoMode = lib.EndVrStereoMode
    LoadVrStereoConfig = lib.LoadVrStereoConfig
    UnloadVrStereoConfig = lib.UnloadVrStereoConfig
    LoadShader = lib.LoadShader
    LoadShaderFromMemory = lib.LoadShaderFromMemory
    IsShaderReady = lib.IsShaderReady
    GetShaderLocation = lib.GetShaderLocation
    GetShaderLocationAttrib = lib.GetShaderLocationAttrib
    SetShaderValue = lib.SetShaderValue
    SetShaderValueV = lib.SetShaderValueV
    SetShaderValueMatrix = lib.SetShaderValueMatrix
    SetShaderValueTexture = lib.SetShaderValueTexture
    UnloadShader = lib.UnloadShader
    GetMouseRay = lib.GetMouseRay
    GetCameraMatrix = lib.GetCameraMatrix
    GetCameraMatrix2D = lib.GetCameraMatrix2D
    GetWorldToScreen = lib.GetWorldToScreen
    GetScreenToWorld2D = lib.GetScreenToWorld2D
    GetWorldToScreenEx = lib.GetWorldToScreenEx
    GetWorldToScreen2D = lib.GetWorldToScreen2D
    SetTargetFPS = lib.SetTargetFPS
    GetFPS = lib.GetFPS
    GetFrameTime = lib.GetFrameTime
    GetTime = lib.GetTime
    GetRandomValue = lib.GetRandomValue
    SetRandomSeed = lib.SetRandomSeed
    TakeScreenshot = lib.TakeScreenshot
    SetConfigFlags = lib.SetConfigFlags
    TraceLog = lib.TraceLog
    SetTraceLogLevel = lib.SetTraceLogLevel
    MemAlloc = lib.MemAlloc
    MemRealloc = lib.MemRealloc
    MemFree = lib.MemFree
    OpenURL = lib.OpenURL
    SetTraceLogCallback = lib.SetTraceLogCallback
    SetLoadFileDataCallback = lib.SetLoadFileDataCallback
    SetSaveFileDataCallback = lib.SetSaveFileDataCallback
    SetLoadFileTextCallback = lib.SetLoadFileTextCallback
    SetSaveFileTextCallback = lib.SetSaveFileTextCallback
    LoadFileData = lib.LoadFileData
    UnloadFileData = lib.UnloadFileData
    SaveFileData = lib.SaveFileData
    ExportDataAsCode = lib.ExportDataAsCode
    LoadFileText = lib.LoadFileText
    UnloadFileText = lib.UnloadFileText
    SaveFileText = lib.SaveFileText
    FileExists = lib.FileExists
    DirectoryExists = lib.DirectoryExists
    IsFileExtension = lib.IsFileExtension
    GetFileLength = lib.GetFileLength
    GetFileExtension = lib.GetFileExtension
    GetFileName = lib.GetFileName
    GetFileNameWithoutExt = lib.GetFileNameWithoutExt
    GetDirectoryPath = lib.GetDirectoryPath
    GetPrevDirectoryPath = lib.GetPrevDirectoryPath
    GetWorkingDirectory = lib.GetWorkingDirectory
    GetApplicationDirectory = lib.GetApplicationDirectory
    ChangeDirectory = lib.ChangeDirectory
    IsPathFile = lib.IsPathFile
    LoadDirectoryFiles = lib.LoadDirectoryFiles
    LoadDirectoryFilesEx = lib.LoadDirectoryFilesEx
    UnloadDirectoryFiles = lib.UnloadDirectoryFiles
    IsFileDropped = lib.IsFileDropped
    LoadDroppedFiles = lib.LoadDroppedFiles
    UnloadDroppedFiles = lib.UnloadDroppedFiles
    GetFileModTime = lib.GetFileModTime
    CompressData = lib.CompressData
    DecompressData = lib.DecompressData
    EncodeDataBase64 = lib.EncodeDataBase64
    DecodeDataBase64 = lib.DecodeDataBase64
    IsKeyPressed = lib.IsKeyPressed
    IsKeyDown = lib.IsKeyDown
    IsKeyReleased = lib.IsKeyReleased
    IsKeyUp = lib.IsKeyUp
    SetExitKey = lib.SetExitKey
    GetKeyPressed = lib.GetKeyPressed
    GetCharPressed = lib.GetCharPressed
    IsGamepadAvailable = lib.IsGamepadAvailable
    GetGamepadName = lib.GetGamepadName
    IsGamepadButtonPressed = lib.IsGamepadButtonPressed
    IsGamepadButtonDown = lib.IsGamepadButtonDown
    IsGamepadButtonReleased = lib.IsGamepadButtonReleased
    IsGamepadButtonUp = lib.IsGamepadButtonUp
    GetGamepadButtonPressed = lib.GetGamepadButtonPressed
    GetGamepadAxisCount = lib.GetGamepadAxisCount
    GetGamepadAxisMovement = lib.GetGamepadAxisMovement
    SetGamepadMappings = lib.SetGamepadMappings
    IsMouseButtonPressed = lib.IsMouseButtonPressed
    IsMouseButtonDown = lib.IsMouseButtonDown
    IsMouseButtonReleased = lib.IsMouseButtonReleased
    IsMouseButtonUp = lib.IsMouseButtonUp
    GetMouseX = lib.GetMouseX
    GetMouseY = lib.GetMouseY
    GetMousePosition = lib.GetMousePosition
    GetMouseDelta = lib.GetMouseDelta
    SetMousePosition = lib.SetMousePosition
    SetMouseOffset = lib.SetMouseOffset
    SetMouseScale = lib.SetMouseScale
    GetMouseWheelMove = lib.GetMouseWheelMove
    GetMouseWheelMoveV = lib.GetMouseWheelMoveV
    SetMouseCursor = lib.SetMouseCursor
    GetTouchX = lib.GetTouchX
    GetTouchY = lib.GetTouchY
    GetTouchPosition = lib.GetTouchPosition
    GetTouchPointId = lib.GetTouchPointId
    GetTouchPointCount = lib.GetTouchPointCount
    SetGesturesEnabled = lib.SetGesturesEnabled
    IsGestureDetected = lib.IsGestureDetected
    GetGestureDetected = lib.GetGestureDetected
    GetGestureHoldDuration = lib.GetGestureHoldDuration
    GetGestureDragVector = lib.GetGestureDragVector
    GetGestureDragAngle = lib.GetGestureDragAngle
    GetGesturePinchVector = lib.GetGesturePinchVector
    GetGesturePinchAngle = lib.GetGesturePinchAngle
    UpdateCamera = lib.UpdateCamera
    UpdateCameraPro = lib.UpdateCameraPro
    SetShapesTexture = lib.SetShapesTexture
    DrawPixel = lib.DrawPixel
    DrawPixelV = lib.DrawPixelV
    DrawLine = lib.DrawLine
    DrawLineV = lib.DrawLineV
    DrawLineEx = lib.DrawLineEx
    DrawLineBezier = lib.DrawLineBezier
    DrawLineBezierQuad = lib.DrawLineBezierQuad
    DrawLineBezierCubic = lib.DrawLineBezierCubic
    DrawLineStrip = lib.DrawLineStrip
    DrawCircle = lib.DrawCircle
    DrawCircleSector = lib.DrawCircleSector
    DrawCircleSectorLines = lib.DrawCircleSectorLines
    DrawCircleGradient = lib.DrawCircleGradient
    DrawCircleV = lib.DrawCircleV
    DrawCircleLines = lib.DrawCircleLines
    DrawEllipse = lib.DrawEllipse
    DrawEllipseLines = lib.DrawEllipseLines
    DrawRing = lib.DrawRing
    DrawRingLines = lib.DrawRingLines
    DrawRectangle = lib.DrawRectangle
    DrawRectangleV = lib.DrawRectangleV
    DrawRectangleRec = lib.DrawRectangleRec
    DrawRectanglePro = lib.DrawRectanglePro
    DrawRectangleGradientV = lib.DrawRectangleGradientV
    DrawRectangleGradientH = lib.DrawRectangleGradientH
    DrawRectangleGradientEx = lib.DrawRectangleGradientEx
    DrawRectangleLines = lib.DrawRectangleLines
    DrawRectangleLinesEx = lib.DrawRectangleLinesEx
    DrawRectangleRounded = lib.DrawRectangleRounded
    DrawRectangleRoundedLines = lib.DrawRectangleRoundedLines
    DrawTriangle = lib.DrawTriangle
    DrawTriangleLines = lib.DrawTriangleLines
    DrawTriangleFan = lib.DrawTriangleFan
    DrawTriangleStrip = lib.DrawTriangleStrip
    DrawPoly = lib.DrawPoly
    DrawPolyLines = lib.DrawPolyLines
    DrawPolyLinesEx = lib.DrawPolyLinesEx
    CheckCollisionRecs = lib.CheckCollisionRecs
    CheckCollisionCircles = lib.CheckCollisionCircles
    CheckCollisionCircleRec = lib.CheckCollisionCircleRec
    CheckCollisionPointRec = lib.CheckCollisionPointRec
    CheckCollisionPointCircle = lib.CheckCollisionPointCircle
    CheckCollisionPointTriangle = lib.CheckCollisionPointTriangle
    CheckCollisionPointPoly = lib.CheckCollisionPointPoly
    CheckCollisionLines = lib.CheckCollisionLines
    CheckCollisionPointLine = lib.CheckCollisionPointLine
    GetCollisionRec = lib.GetCollisionRec
    LoadImage = lib.LoadImage
    LoadImageRaw = lib.LoadImageRaw
    LoadImageAnim = lib.LoadImageAnim
    LoadImageFromMemory = lib.LoadImageFromMemory
    LoadImageFromTexture = lib.LoadImageFromTexture
    LoadImageFromScreen = lib.LoadImageFromScreen
    IsImageReady = lib.IsImageReady
    UnloadImage = lib.UnloadImage
    ExportImage = lib.ExportImage
    ExportImageAsCode = lib.ExportImageAsCode
    GenImageColor = lib.GenImageColor
    GenImageGradientV = lib.GenImageGradientV
    GenImageGradientH = lib.GenImageGradientH
    GenImageGradientRadial = lib.GenImageGradientRadial
    GenImageChecked = lib.GenImageChecked
    GenImageWhiteNoise = lib.GenImageWhiteNoise
    GenImagePerlinNoise = lib.GenImagePerlinNoise
    GenImageCellular = lib.GenImageCellular
    GenImageText = lib.GenImageText
    ImageCopy = lib.ImageCopy
    ImageFromImage = lib.ImageFromImage
    ImageText = lib.ImageText
    ImageTextEx = lib.ImageTextEx
    ImageFormat = lib.ImageFormat
    ImageToPOT = lib.ImageToPOT
    ImageCrop = lib.ImageCrop
    ImageAlphaCrop = lib.ImageAlphaCrop
    ImageAlphaClear = lib.ImageAlphaClear
    ImageAlphaMask = lib.ImageAlphaMask
    ImageAlphaPremultiply = lib.ImageAlphaPremultiply
    ImageBlurGaussian = lib.ImageBlurGaussian
    ImageResize = lib.ImageResize
    ImageResizeNN = lib.ImageResizeNN
    ImageResizeCanvas = lib.ImageResizeCanvas
    ImageMipmaps = lib.ImageMipmaps
    ImageDither = lib.ImageDither
    ImageFlipVertical = lib.ImageFlipVertical
    ImageFlipHorizontal = lib.ImageFlipHorizontal
    ImageRotateCW = lib.ImageRotateCW
    ImageRotateCCW = lib.ImageRotateCCW
    ImageColorTint = lib.ImageColorTint
    ImageColorInvert = lib.ImageColorInvert
    ImageColorGrayscale = lib.ImageColorGrayscale
    ImageColorContrast = lib.ImageColorContrast
    ImageColorBrightness = lib.ImageColorBrightness
    ImageColorReplace = lib.ImageColorReplace
    LoadImageColors = lib.LoadImageColors
    LoadImagePalette = lib.LoadImagePalette
    UnloadImageColors = lib.UnloadImageColors
    UnloadImagePalette = lib.UnloadImagePalette
    GetImageAlphaBorder = lib.GetImageAlphaBorder
    GetImageColor = lib.GetImageColor
    ImageClearBackground = lib.ImageClearBackground
    ImageDrawPixel = lib.ImageDrawPixel
    ImageDrawPixelV = lib.ImageDrawPixelV
    ImageDrawLine = lib.ImageDrawLine
    ImageDrawLineV = lib.ImageDrawLineV
    ImageDrawCircle = lib.ImageDrawCircle
    ImageDrawCircleV = lib.ImageDrawCircleV
    ImageDrawCircleLines = lib.ImageDrawCircleLines
    ImageDrawCircleLinesV = lib.ImageDrawCircleLinesV
    ImageDrawRectangle = lib.ImageDrawRectangle
    ImageDrawRectangleV = lib.ImageDrawRectangleV
    ImageDrawRectangleRec = lib.ImageDrawRectangleRec
    ImageDrawRectangleLines = lib.ImageDrawRectangleLines
    ImageDraw = lib.ImageDraw
    ImageDrawText = lib.ImageDrawText
    ImageDrawTextEx = lib.ImageDrawTextEx
--     LoadTexture = lib.LoadTexture
    LoadTextureFromImage = lib.LoadTextureFromImage
    LoadTextureCubemap = lib.LoadTextureCubemap
    LoadRenderTexture = lib.LoadRenderTexture
    IsTextureReady = lib.IsTextureReady
    UnloadTexture = lib.UnloadTexture
    IsRenderTextureReady = lib.IsRenderTextureReady
    UnloadRenderTexture = lib.UnloadRenderTexture
    UpdateTexture = lib.UpdateTexture
    UpdateTextureRec = lib.UpdateTextureRec
    GenTextureMipmaps = lib.GenTextureMipmaps
    SetTextureFilter = lib.SetTextureFilter
    SetTextureWrap = lib.SetTextureWrap
    DrawTexture = lib.DrawTexture
    DrawTextureV = lib.DrawTextureV
    DrawTextureEx = lib.DrawTextureEx
    DrawTextureRec = lib.DrawTextureRec
    DrawTexturePro = lib.DrawTexturePro
    DrawTextureNPatch = lib.DrawTextureNPatch
    Fade = lib.Fade
    ColorToInt = lib.ColorToInt
    ColorNormalize = lib.ColorNormalize
    ColorFromNormalized = lib.ColorFromNormalized
    ColorToHSV = lib.ColorToHSV
    ColorFromHSV = lib.ColorFromHSV
    ColorTint = lib.ColorTint
    ColorBrightness = lib.ColorBrightness
    ColorContrast = lib.ColorContrast
    ColorAlpha = lib.ColorAlpha
    ColorAlphaBlend = lib.ColorAlphaBlend
    GetColor = lib.GetColor
    GetPixelColor = lib.GetPixelColor
    SetPixelColor = lib.SetPixelColor
    GetPixelDataSize = lib.GetPixelDataSize
    GetFontDefault = lib.GetFontDefault
    LoadFont = lib.LoadFont
    LoadFontEx = lib.LoadFontEx
    LoadFontFromImage = lib.LoadFontFromImage
    LoadFontFromMemory = lib.LoadFontFromMemory
    IsFontReady = lib.IsFontReady
    LoadFontData = lib.LoadFontData
    GenImageFontAtlas = lib.GenImageFontAtlas
    UnloadFontData = lib.UnloadFontData
    UnloadFont = lib.UnloadFont
    ExportFontAsCode = lib.ExportFontAsCode
    DrawFPS = lib.DrawFPS
--     DrawText = lib.DrawText
    DrawTextEx = lib.DrawTextEx
    DrawTextPro = lib.DrawTextPro
    DrawTextCodepoint = lib.DrawTextCodepoint
    DrawTextCodepoints = lib.DrawTextCodepoints
--     MeasureText = lib.MeasureText
    MeasureTextEx = lib.MeasureTextEx
    GetGlyphIndex = lib.GetGlyphIndex
    GetGlyphInfo = lib.GetGlyphInfo
    GetGlyphAtlasRec = lib.GetGlyphAtlasRec
    LoadUTF8 = lib.LoadUTF8
    UnloadUTF8 = lib.UnloadUTF8
    LoadCodepoints = lib.LoadCodepoints
    UnloadCodepoints = lib.UnloadCodepoints
    GetCodepointCount = lib.GetCodepointCount
    GetCodepoint = lib.GetCodepoint
    GetCodepointNext = lib.GetCodepointNext
    GetCodepointPrevious = lib.GetCodepointPrevious
    CodepointToUTF8 = lib.CodepointToUTF8
    TextCopy = lib.TextCopy
    TextIsEqual = lib.TextIsEqual
    TextLength = lib.TextLength
    TextFormat = lib.TextFormat
    TextSubtext = lib.TextSubtext
    TextReplace = lib.TextReplace
    TextInsert = lib.TextInsert
    TextJoin = lib.TextJoin
    TextSplit = lib.TextSplit
    TextAppend = lib.TextAppend
    TextFindIndex = lib.TextFindIndex
    TextToUpper = lib.TextToUpper
    TextToLower = lib.TextToLower
    TextToPascal = lib.TextToPascal
    TextToInteger = lib.TextToInteger
    DrawLine3D = lib.DrawLine3D
    DrawPoint3D = lib.DrawPoint3D
    DrawCircle3D = lib.DrawCircle3D
    DrawTriangle3D = lib.DrawTriangle3D
    DrawTriangleStrip3D = lib.DrawTriangleStrip3D
    DrawCube = lib.DrawCube
    DrawCubeV = lib.DrawCubeV
    DrawCubeWires = lib.DrawCubeWires
    DrawCubeWiresV = lib.DrawCubeWiresV
    DrawSphere = lib.DrawSphere
    DrawSphereEx = lib.DrawSphereEx
    DrawSphereWires = lib.DrawSphereWires
    DrawCylinder = lib.DrawCylinder
    DrawCylinderEx = lib.DrawCylinderEx
    DrawCylinderWires = lib.DrawCylinderWires
    DrawCylinderWiresEx = lib.DrawCylinderWiresEx
    DrawCapsule = lib.DrawCapsule
    DrawCapsuleWires = lib.DrawCapsuleWires
    DrawPlane = lib.DrawPlane
    DrawRay = lib.DrawRay
    DrawGrid = lib.DrawGrid
    LoadModel = lib.LoadModel
    LoadModelFromMesh = lib.LoadModelFromMesh
    IsModelReady = lib.IsModelReady
    UnloadModel = lib.UnloadModel
    GetModelBoundingBox = lib.GetModelBoundingBox
    DrawModel = lib.DrawModel
    DrawModelEx = lib.DrawModelEx
    DrawModelWires = lib.DrawModelWires
    DrawModelWiresEx = lib.DrawModelWiresEx
    DrawBoundingBox = lib.DrawBoundingBox
    DrawBillboard = lib.DrawBillboard
    DrawBillboardRec = lib.DrawBillboardRec
    DrawBillboardPro = lib.DrawBillboardPro
    UploadMesh = lib.UploadMesh
    UpdateMeshBuffer = lib.UpdateMeshBuffer
    UnloadMesh = lib.UnloadMesh
    DrawMesh = lib.DrawMesh
    DrawMeshInstanced = lib.DrawMeshInstanced
    ExportMesh = lib.ExportMesh
    GetMeshBoundingBox = lib.GetMeshBoundingBox
    GenMeshTangents = lib.GenMeshTangents
    GenMeshPoly = lib.GenMeshPoly
    GenMeshPlane = lib.GenMeshPlane
    GenMeshCube = lib.GenMeshCube
    GenMeshSphere = lib.GenMeshSphere
    GenMeshHemiSphere = lib.GenMeshHemiSphere
    GenMeshCylinder = lib.GenMeshCylinder
    GenMeshCone = lib.GenMeshCone
    GenMeshTorus = lib.GenMeshTorus
    GenMeshKnot = lib.GenMeshKnot
    GenMeshHeightmap = lib.GenMeshHeightmap
    GenMeshCubicmap = lib.GenMeshCubicmap
    LoadMaterials = lib.LoadMaterials
    LoadMaterialDefault = lib.LoadMaterialDefault
    IsMaterialReady = lib.IsMaterialReady
    UnloadMaterial = lib.UnloadMaterial
    SetMaterialTexture = lib.SetMaterialTexture
    SetModelMeshMaterial = lib.SetModelMeshMaterial
    LoadModelAnimations = lib.LoadModelAnimations
    UpdateModelAnimation = lib.UpdateModelAnimation
    UnloadModelAnimation = lib.UnloadModelAnimation
    UnloadModelAnimations = lib.UnloadModelAnimations
    IsModelAnimationValid = lib.IsModelAnimationValid
    CheckCollisionSpheres = lib.CheckCollisionSpheres
    CheckCollisionBoxes = lib.CheckCollisionBoxes
    CheckCollisionBoxSphere = lib.CheckCollisionBoxSphere
    GetRayCollisionSphere = lib.GetRayCollisionSphere
    GetRayCollisionBox = lib.GetRayCollisionBox
    GetRayCollisionMesh = lib.GetRayCollisionMesh
    GetRayCollisionTriangle = lib.GetRayCollisionTriangle
    GetRayCollisionQuad = lib.GetRayCollisionQuad
    InitAudioDevice = lib.InitAudioDevice
    CloseAudioDevice = lib.CloseAudioDevice
    IsAudioDeviceReady = lib.IsAudioDeviceReady
    SetMasterVolume = lib.SetMasterVolume
    LoadWave = lib.LoadWave
    LoadWaveFromMemory = lib.LoadWaveFromMemory
    IsWaveReady = lib.IsWaveReady
    LoadSound = lib.LoadSound
    LoadSoundFromWave = lib.LoadSoundFromWave
    IsSoundReady = lib.IsSoundReady
    UpdateSound = lib.UpdateSound
    UnloadWave = lib.UnloadWave
    UnloadSound = lib.UnloadSound
    ExportWave = lib.ExportWave
    ExportWaveAsCode = lib.ExportWaveAsCode
    PlaySound = lib.PlaySound
    StopSound = lib.StopSound
    PauseSound = lib.PauseSound
    ResumeSound = lib.ResumeSound
    IsSoundPlaying = lib.IsSoundPlaying
    SetSoundVolume = lib.SetSoundVolume
    SetSoundPitch = lib.SetSoundPitch
    SetSoundPan = lib.SetSoundPan
    WaveCopy = lib.WaveCopy
    WaveCrop = lib.WaveCrop
    WaveFormat = lib.WaveFormat
    LoadWaveSamples = lib.LoadWaveSamples
    UnloadWaveSamples = lib.UnloadWaveSamples
    LoadMusicStream = lib.LoadMusicStream
    LoadMusicStreamFromMemory = lib.LoadMusicStreamFromMemory
    IsMusicReady = lib.IsMusicReady
    UnloadMusicStream = lib.UnloadMusicStream
    PlayMusicStream = lib.PlayMusicStream
    IsMusicStreamPlaying = lib.IsMusicStreamPlaying
    UpdateMusicStream = lib.UpdateMusicStream
    StopMusicStream = lib.StopMusicStream
    PauseMusicStream = lib.PauseMusicStream
    ResumeMusicStream = lib.ResumeMusicStream
    SeekMusicStream = lib.SeekMusicStream
    SetMusicVolume = lib.SetMusicVolume
    SetMusicPitch = lib.SetMusicPitch
    SetMusicPan = lib.SetMusicPan
    GetMusicTimeLength = lib.GetMusicTimeLength
    GetMusicTimePlayed = lib.GetMusicTimePlayed
    LoadAudioStream = lib.LoadAudioStream
    IsAudioStreamReady = lib.IsAudioStreamReady
    UnloadAudioStream = lib.UnloadAudioStream
    UpdateAudioStream = lib.UpdateAudioStream
    IsAudioStreamProcessed = lib.IsAudioStreamProcessed
    PlayAudioStream = lib.PlayAudioStream
    PauseAudioStream = lib.PauseAudioStream
    ResumeAudioStream = lib.ResumeAudioStream
    IsAudioStreamPlaying = lib.IsAudioStreamPlaying
    StopAudioStream = lib.StopAudioStream
    SetAudioStreamVolume = lib.SetAudioStreamVolume
    SetAudioStreamPitch = lib.SetAudioStreamPitch
    SetAudioStreamPan = lib.SetAudioStreamPan
    SetAudioStreamBufferSizeDefault = lib.SetAudioStreamBufferSizeDefault
    SetAudioStreamCallback = lib.SetAudioStreamCallback
    AttachAudioStreamProcessor = lib.AttachAudioStreamProcessor
    DetachAudioStreamProcessor = lib.DetachAudioStreamProcessor
    AttachAudioMixedProcessor = lib.AttachAudioMixedProcessor
    DetachAudioMixedProcessor = lib.DetachAudioMixedProcessor
    return lib

-- Macros
var Root.GCC_HAVE_DWARF2_CFI_ASM int = 1
var Root.RAYLIB_VERSION_MAJOR int = 4
var Root.RAYLIB_VERSION_MINOR int = 5
var Root.RAYLIB_VERSION_PATCH int = 0
var Root.RAYLIB_VERSION string = "4.5"
var Root.PI float = 3.1415927410125732
var Root.DEG2RAD float = 0.01745329238474369
var Root.RAD2DEG float = 57.2957763671875
var Root.LIGHTGRAY Color = [Color r: 200, g: 200, b: 200, a: 255]
var Root.GRAY Color = [Color r: 130, g: 130, b: 130, a: 255]
var Root.DARKGRAY Color = [Color r: 80, g: 80, b: 80, a: 255]
var Root.YELLOW Color = [Color r: 253, g: 249, b: 0, a: 255]
var Root.GOLD Color = [Color r: 255, g: 203, b: 0, a: 255]
var Root.ORANGE Color = [Color r: 255, g: 161, b: 0, a: 255]
var Root.PINK Color = [Color r: 255, g: 109, b: 194, a: 255]
var Root.RED Color = [Color r: 230, g: 41, b: 55, a: 255]
var Root.MAROON Color = [Color r: 190, g: 33, b: 55, a: 255]
var Root.GREEN Color = [Color r: 0, g: 228, b: 48, a: 255]
var Root.LIME Color = [Color r: 0, g: 158, b: 47, a: 255]
var Root.DARKGREEN Color = [Color r: 0, g: 117, b: 44, a: 255]
var Root.SKYBLUE Color = [Color r: 102, g: 191, b: 255, a: 255]
var Root.BLUE Color = [Color r: 0, g: 121, b: 241, a: 255]
var Root.DARKBLUE Color = [Color r: 0, g: 82, b: 172, a: 255]
var Root.PURPLE Color = [Color r: 200, g: 122, b: 255, a: 255]
var Root.VIOLET Color = [Color r: 135, g: 60, b: 190, a: 255]
var Root.DARKPURPLE Color = [Color r: 112, g: 31, b: 126, a: 255]
var Root.BEIGE Color = [Color r: 211, g: 176, b: 131, a: 255]
var Root.BROWN Color = [Color r: 127, g: 106, b: 79, a: 255]
var Root.DARKBROWN Color = [Color r: 76, g: 63, b: 47, a: 255]
var Root.WHITE Color = [Color r: 255, g: 255, b: 255, a: 255]
var Root.BLACK Color = [Color r: 0, g: 0, b: 0, a: 255]
var Root.BLANK Color = [Color r: 0, g: 0, b: 0, a: 0]
var Root.MAGENTA Color = [Color r: 255, g: 0, b: 255, a: 255]
var Root.RAYWHITE Color = [Color r: 245, g: 245, b: 245, a: 255]
-- var Root.true int = 1
-- var Root.false int = 0
var Root.FooBlack Color = [Color r: 0, g: 0, b: 0, a: 255]
var Root.MOUSE_LEFT_BUTTON int = 0
var Root.MOUSE_RIGHT_BUTTON int = 1
var Root.MOUSE_MIDDLE_BUTTON int = 2
var Root.MATERIAL_MAP_DIFFUSE int = 0
var Root.MATERIAL_MAP_SPECULAR int = 1
var Root.SHADER_LOC_MAP_DIFFUSE int = 15
var Root.SHADER_LOC_MAP_SPECULAR int = 16
-- 