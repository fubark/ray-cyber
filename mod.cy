use math

-- ./cbindgen.cy -o mod.cy raylib.h -I/opt/homebrew/Cellar/llvm/18.1.8/lib/clang/18/include

var .libUrl = switch os.system:
    case 'linux' => 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.so.5.0.0'
    case 'windows' => 'https://raw.githubusercontent.com/fubark/ray-cyber/master/raylib.5.0.0.dll'
    case 'macos' => 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.5.0.0.dylib'
    else => throw error.Unsupported

var .libPath = os.cacheUrl(libUrl)

func InitFoo(width int, height int, title *void): pass

func InitWindow(width int, height int, title String):
    var cstr = os.cstr(title)
    lib.InitWindow(width, height, cstr)
    os.free(cstr)

func DrawText(text String, x int, y int, size int, color Color):
    var cstr = os.cstr(text)
    lib.DrawText(cstr, x, y, size, color)
    os.free(cstr)

func MeasureText(text String, size int) int:
    var cstr = os.cstr(text)
    var res = lib.MeasureText(cstr, size)
    os.free(cstr)
    return res as int

func LoadTexture(fileName String) Texture2D:
    var cstr = os.cstr(fileName)
    var res = lib.LoadTexture(cstr)
    os.free(cstr)
    return res as Texture2D

func Vector2.sub(self, o Vector2) Vector2:
    return Vector2{
        x = self.x - o.x,
        y = self.y - o.y,
    }

func Vector2.add(self, o Vector2) Vector2:
    return Vector2{
        x = self.x + o.x,
        y = self.y + o.y,
    }

func Vector2.scale(self, scale float) Vector2:
    return Vector2{
        x = self.x * scale,
        y = self.y * scale,
    }

func Vector2.normalize(self) Vector2:
    var res = Vector2{x=0, y=0}
    var len = self.len()
    if len > 0.0:
        var ilen = 1.0/len
        res.x = self.x*ilen
        res.y = self.y*ilen
    return res

func Vector2.len(self) float:
    return math.sqrt(self.x*self.x + self.y*self.y)

-- CBINDGEN MARKER
-- Code below is generated by cbindgen.cy
-- typedef __gnuc_va_list

-- typedef va_list

type Vector2_S:
    x float
    y float

type Vector2 -> Vector2_S

type Vector3_S:
    x float
    y float
    z float

type Vector3 -> Vector3_S

type Vector4_S:
    x float
    y float
    z float
    w float

type Vector4 -> Vector4_S

type Quaternion -> Vector4

type Matrix_S:
    m0 float
    m4 float
    m8 float
    m12 float
    m1 float
    m5 float
    m9 float
    m13 float
    m2 float
    m6 float
    m10 float
    m14 float
    m3 float
    m7 float
    m11 float
    m15 float

type Matrix -> Matrix_S

type Color_S:
    r int
    g int
    b int
    a int

type Color -> Color_S

type Rectangle_S:
    x float
    y float
    width float
    height float

type Rectangle -> Rectangle_S

type Image_S:
    data *void -- void *
    width int
    height int
    mipmaps int
    format int

type Image -> Image_S

type Texture_S:
    id int
    width int
    height int
    mipmaps int
    format int

type Texture -> Texture_S

type Texture2D -> Texture

type TextureCubemap -> Texture

type RenderTexture_S:
    id int
    texture Texture
    depth Texture

type RenderTexture -> RenderTexture_S

type RenderTexture2D -> RenderTexture

type NPatchInfo_S:
    source Rectangle
    left int
    top int
    right int
    bottom int
    layout int

type NPatchInfo -> NPatchInfo_S

type GlyphInfo_S:
    value int
    offsetX int
    offsetY int
    advanceX int
    image Image

type GlyphInfo -> GlyphInfo_S

type Font_S:
    baseSize int
    glyphCount int
    glyphPadding int
    texture Texture2D
    recs *void -- Rectangle *
    glyphs *void -- GlyphInfo *

type Font -> Font_S

type Camera3D_S:
    position Vector3
    target Vector3
    up Vector3
    fovy float
    projection int

type Camera3D -> Camera3D_S

type Camera -> Camera3D

type Camera2D_S:
    offset Vector2
    target Vector2
    rotation float
    zoom float

type Camera2D -> Camera2D_S

type Mesh_S:
    vertexCount int
    triangleCount int
    vertices *void -- float *
    texcoords *void -- float *
    texcoords2 *void -- float *
    normals *void -- float *
    tangents *void -- float *
    colors *void -- unsigned char *
    indices *void -- unsigned short *
    animVertices *void -- float *
    animNormals *void -- float *
    boneIds *void -- unsigned char *
    boneWeights *void -- float *
    vaoId int
    vboId *void -- unsigned int *

type Mesh -> Mesh_S

type Shader_S:
    id int
    locs *void -- int *

type Shader -> Shader_S

type MaterialMap_S:
    texture Texture2D
    color Color
    value float

type MaterialMap -> MaterialMap_S

type Material_S:
    shader Shader
    maps *void -- MaterialMap *
    params List[dyn] -- float[4]

type Material -> Material_S

type Transform_S:
    translation Vector3
    rotation Quaternion
    scale Vector3

type Transform -> Transform_S

type BoneInfo_S:
    name List[dyn] -- char[32]
    parent int

type BoneInfo -> BoneInfo_S

type Model_S:
    transform Matrix
    meshCount int
    materialCount int
    meshes *void -- Mesh *
    materials *void -- Material *
    meshMaterial *void -- int *
    boneCount int
    bones *void -- BoneInfo *
    bindPose *void -- Transform *

type Model -> Model_S

type ModelAnimation_S:
    boneCount int
    frameCount int
    bones *void -- BoneInfo *
    framePoses *void -- Transform **
    name List[dyn] -- char[32]

type ModelAnimation -> ModelAnimation_S

type Ray_S:
    position Vector3
    direction Vector3

type Ray -> Ray_S

type RayCollision_S:
    hit bool
    distance float
    point Vector3
    normal Vector3

type RayCollision -> RayCollision_S

type BoundingBox_S:
    min Vector3
    max Vector3

type BoundingBox -> BoundingBox_S

type Wave_S:
    frameCount int
    sampleRate int
    sampleSize int
    channels int
    data *void -- void *

type Wave -> Wave_S

type rAudioBuffer_S #int64_t
type rAudioBuffer -> rAudioBuffer_S

type rAudioProcessor_S #int64_t
type rAudioProcessor -> rAudioProcessor_S

type AudioStream_S:
    buffer *void -- rAudioBuffer *
    processor *void -- rAudioProcessor *
    sampleRate int
    sampleSize int
    channels int

type AudioStream -> AudioStream_S

type Sound_S:
    stream AudioStream
    frameCount int

type Sound -> Sound_S

type Music_S:
    stream AudioStream
    frameCount int
    looping bool
    ctxType int
    ctxData *void -- void *

type Music -> Music_S

type VrDeviceInfo_S:
    hResolution int
    vResolution int
    hScreenSize float
    vScreenSize float
    vScreenCenter float
    eyeToScreenDistance float
    lensSeparationDistance float
    interpupillaryDistance float
    lensDistortionValues List[dyn] -- float[4]
    chromaAbCorrection List[dyn] -- float[4]

type VrDeviceInfo -> VrDeviceInfo_S

type VrStereoConfig_S:
    projection List[dyn] -- Matrix[2]
    viewOffset List[dyn] -- Matrix[2]
    leftLensCenter List[dyn] -- float[2]
    rightLensCenter List[dyn] -- float[2]
    leftScreenCenter List[dyn] -- float[2]
    rightScreenCenter List[dyn] -- float[2]
    scale List[dyn] -- float[2]
    scaleIn List[dyn] -- float[2]

type VrStereoConfig -> VrStereoConfig_S

type FilePathList_S:
    capacity int
    count int
    paths *void -- char **

type FilePathList -> FilePathList_S

type AutomationEvent_S:
    frame int
    type int
    params List[dyn] -- int[4]

type AutomationEvent -> AutomationEvent_S

type AutomationEventList_S:
    capacity int
    count int
    events *void -- AutomationEvent *

type AutomationEventList -> AutomationEventList_S

type ConfigFlags -> int
var .FLAG_VSYNC_HINT int = 64
var .FLAG_FULLSCREEN_MODE int = 2
var .FLAG_WINDOW_RESIZABLE int = 4
var .FLAG_WINDOW_UNDECORATED int = 8
var .FLAG_WINDOW_HIDDEN int = 128
var .FLAG_WINDOW_MINIMIZED int = 512
var .FLAG_WINDOW_MAXIMIZED int = 1024
var .FLAG_WINDOW_UNFOCUSED int = 2048
var .FLAG_WINDOW_TOPMOST int = 4096
var .FLAG_WINDOW_ALWAYS_RUN int = 256
var .FLAG_WINDOW_TRANSPARENT int = 16
var .FLAG_WINDOW_HIGHDPI int = 8192
var .FLAG_WINDOW_MOUSE_PASSTHROUGH int = 16384
var .FLAG_BORDERLESS_WINDOWED_MODE int = 32768
var .FLAG_MSAA_4X_HINT int = 32
var .FLAG_INTERLACED_HINT int = 65536

type TraceLogLevel -> int
var .LOG_ALL int = 0
var .LOG_TRACE int = 1
var .LOG_DEBUG int = 2
var .LOG_INFO int = 3
var .LOG_WARNING int = 4
var .LOG_ERROR int = 5
var .LOG_FATAL int = 6
var .LOG_NONE int = 7

type KeyboardKey -> int
var .KEY_NULL int = 0
var .KEY_APOSTROPHE int = 39
var .KEY_COMMA int = 44
var .KEY_MINUS int = 45
var .KEY_PERIOD int = 46
var .KEY_SLASH int = 47
var .KEY_ZERO int = 48
var .KEY_ONE int = 49
var .KEY_TWO int = 50
var .KEY_THREE int = 51
var .KEY_FOUR int = 52
var .KEY_FIVE int = 53
var .KEY_SIX int = 54
var .KEY_SEVEN int = 55
var .KEY_EIGHT int = 56
var .KEY_NINE int = 57
var .KEY_SEMICOLON int = 59
var .KEY_EQUAL int = 61
var .KEY_A int = 65
var .KEY_B int = 66
var .KEY_C int = 67
var .KEY_D int = 68
var .KEY_E int = 69
var .KEY_F int = 70
var .KEY_G int = 71
var .KEY_H int = 72
var .KEY_I int = 73
var .KEY_J int = 74
var .KEY_K int = 75
var .KEY_L int = 76
var .KEY_M int = 77
var .KEY_N int = 78
var .KEY_O int = 79
var .KEY_P int = 80
var .KEY_Q int = 81
var .KEY_R int = 82
var .KEY_S int = 83
var .KEY_T int = 84
var .KEY_U int = 85
var .KEY_V int = 86
var .KEY_W int = 87
var .KEY_X int = 88
var .KEY_Y int = 89
var .KEY_Z int = 90
var .KEY_LEFT_BRACKET int = 91
var .KEY_BACKSLASH int = 92
var .KEY_RIGHT_BRACKET int = 93
var .KEY_GRAVE int = 96
var .KEY_SPACE int = 32
var .KEY_ESCAPE int = 256
var .KEY_ENTER int = 257
var .KEY_TAB int = 258
var .KEY_BACKSPACE int = 259
var .KEY_INSERT int = 260
var .KEY_DELETE int = 261
var .KEY_RIGHT int = 262
var .KEY_LEFT int = 263
var .KEY_DOWN int = 264
var .KEY_UP int = 265
var .KEY_PAGE_UP int = 266
var .KEY_PAGE_DOWN int = 267
var .KEY_HOME int = 268
var .KEY_END int = 269
var .KEY_CAPS_LOCK int = 280
var .KEY_SCROLL_LOCK int = 281
var .KEY_NUM_LOCK int = 282
var .KEY_PRINT_SCREEN int = 283
var .KEY_PAUSE int = 284
var .KEY_F1 int = 290
var .KEY_F2 int = 291
var .KEY_F3 int = 292
var .KEY_F4 int = 293
var .KEY_F5 int = 294
var .KEY_F6 int = 295
var .KEY_F7 int = 296
var .KEY_F8 int = 297
var .KEY_F9 int = 298
var .KEY_F10 int = 299
var .KEY_F11 int = 300
var .KEY_F12 int = 301
var .KEY_LEFT_SHIFT int = 340
var .KEY_LEFT_CONTROL int = 341
var .KEY_LEFT_ALT int = 342
var .KEY_LEFT_SUPER int = 343
var .KEY_RIGHT_SHIFT int = 344
var .KEY_RIGHT_CONTROL int = 345
var .KEY_RIGHT_ALT int = 346
var .KEY_RIGHT_SUPER int = 347
var .KEY_KB_MENU int = 348
var .KEY_KP_0 int = 320
var .KEY_KP_1 int = 321
var .KEY_KP_2 int = 322
var .KEY_KP_3 int = 323
var .KEY_KP_4 int = 324
var .KEY_KP_5 int = 325
var .KEY_KP_6 int = 326
var .KEY_KP_7 int = 327
var .KEY_KP_8 int = 328
var .KEY_KP_9 int = 329
var .KEY_KP_DECIMAL int = 330
var .KEY_KP_DIVIDE int = 331
var .KEY_KP_MULTIPLY int = 332
var .KEY_KP_SUBTRACT int = 333
var .KEY_KP_ADD int = 334
var .KEY_KP_ENTER int = 335
var .KEY_KP_EQUAL int = 336
var .KEY_BACK int = 4
var .KEY_MENU int = 82
var .KEY_VOLUME_UP int = 24
var .KEY_VOLUME_DOWN int = 25

type MouseButton -> int
var .MOUSE_BUTTON_LEFT int = 0
var .MOUSE_BUTTON_RIGHT int = 1
var .MOUSE_BUTTON_MIDDLE int = 2
var .MOUSE_BUTTON_SIDE int = 3
var .MOUSE_BUTTON_EXTRA int = 4
var .MOUSE_BUTTON_FORWARD int = 5
var .MOUSE_BUTTON_BACK int = 6

type MouseCursor -> int
var .MOUSE_CURSOR_DEFAULT int = 0
var .MOUSE_CURSOR_ARROW int = 1
var .MOUSE_CURSOR_IBEAM int = 2
var .MOUSE_CURSOR_CROSSHAIR int = 3
var .MOUSE_CURSOR_POINTING_HAND int = 4
var .MOUSE_CURSOR_RESIZE_EW int = 5
var .MOUSE_CURSOR_RESIZE_NS int = 6
var .MOUSE_CURSOR_RESIZE_NWSE int = 7
var .MOUSE_CURSOR_RESIZE_NESW int = 8
var .MOUSE_CURSOR_RESIZE_ALL int = 9
var .MOUSE_CURSOR_NOT_ALLOWED int = 10

type GamepadButton -> int
var .GAMEPAD_BUTTON_UNKNOWN int = 0
var .GAMEPAD_BUTTON_LEFT_FACE_UP int = 1
var .GAMEPAD_BUTTON_LEFT_FACE_RIGHT int = 2
var .GAMEPAD_BUTTON_LEFT_FACE_DOWN int = 3
var .GAMEPAD_BUTTON_LEFT_FACE_LEFT int = 4
var .GAMEPAD_BUTTON_RIGHT_FACE_UP int = 5
var .GAMEPAD_BUTTON_RIGHT_FACE_RIGHT int = 6
var .GAMEPAD_BUTTON_RIGHT_FACE_DOWN int = 7
var .GAMEPAD_BUTTON_RIGHT_FACE_LEFT int = 8
var .GAMEPAD_BUTTON_LEFT_TRIGGER_1 int = 9
var .GAMEPAD_BUTTON_LEFT_TRIGGER_2 int = 10
var .GAMEPAD_BUTTON_RIGHT_TRIGGER_1 int = 11
var .GAMEPAD_BUTTON_RIGHT_TRIGGER_2 int = 12
var .GAMEPAD_BUTTON_MIDDLE_LEFT int = 13
var .GAMEPAD_BUTTON_MIDDLE int = 14
var .GAMEPAD_BUTTON_MIDDLE_RIGHT int = 15
var .GAMEPAD_BUTTON_LEFT_THUMB int = 16
var .GAMEPAD_BUTTON_RIGHT_THUMB int = 17

type GamepadAxis -> int
var .GAMEPAD_AXIS_LEFT_X int = 0
var .GAMEPAD_AXIS_LEFT_Y int = 1
var .GAMEPAD_AXIS_RIGHT_X int = 2
var .GAMEPAD_AXIS_RIGHT_Y int = 3
var .GAMEPAD_AXIS_LEFT_TRIGGER int = 4
var .GAMEPAD_AXIS_RIGHT_TRIGGER int = 5

type MaterialMapIndex -> int
var .MATERIAL_MAP_ALBEDO int = 0
var .MATERIAL_MAP_METALNESS int = 1
var .MATERIAL_MAP_NORMAL int = 2
var .MATERIAL_MAP_ROUGHNESS int = 3
var .MATERIAL_MAP_OCCLUSION int = 4
var .MATERIAL_MAP_EMISSION int = 5
var .MATERIAL_MAP_HEIGHT int = 6
var .MATERIAL_MAP_CUBEMAP int = 7
var .MATERIAL_MAP_IRRADIANCE int = 8
var .MATERIAL_MAP_PREFILTER int = 9
var .MATERIAL_MAP_BRDF int = 10

type ShaderLocationIndex -> int
var .SHADER_LOC_VERTEX_POSITION int = 0
var .SHADER_LOC_VERTEX_TEXCOORD01 int = 1
var .SHADER_LOC_VERTEX_TEXCOORD02 int = 2
var .SHADER_LOC_VERTEX_NORMAL int = 3
var .SHADER_LOC_VERTEX_TANGENT int = 4
var .SHADER_LOC_VERTEX_COLOR int = 5
var .SHADER_LOC_MATRIX_MVP int = 6
var .SHADER_LOC_MATRIX_VIEW int = 7
var .SHADER_LOC_MATRIX_PROJECTION int = 8
var .SHADER_LOC_MATRIX_MODEL int = 9
var .SHADER_LOC_MATRIX_NORMAL int = 10
var .SHADER_LOC_VECTOR_VIEW int = 11
var .SHADER_LOC_COLOR_DIFFUSE int = 12
var .SHADER_LOC_COLOR_SPECULAR int = 13
var .SHADER_LOC_COLOR_AMBIENT int = 14
var .SHADER_LOC_MAP_ALBEDO int = 15
var .SHADER_LOC_MAP_METALNESS int = 16
var .SHADER_LOC_MAP_NORMAL int = 17
var .SHADER_LOC_MAP_ROUGHNESS int = 18
var .SHADER_LOC_MAP_OCCLUSION int = 19
var .SHADER_LOC_MAP_EMISSION int = 20
var .SHADER_LOC_MAP_HEIGHT int = 21
var .SHADER_LOC_MAP_CUBEMAP int = 22
var .SHADER_LOC_MAP_IRRADIANCE int = 23
var .SHADER_LOC_MAP_PREFILTER int = 24
var .SHADER_LOC_MAP_BRDF int = 25

type ShaderUniformDataType -> int
var .SHADER_UNIFORM_FLOAT int = 0
var .SHADER_UNIFORM_VEC2 int = 1
var .SHADER_UNIFORM_VEC3 int = 2
var .SHADER_UNIFORM_VEC4 int = 3
var .SHADER_UNIFORM_INT int = 4
var .SHADER_UNIFORM_IVEC2 int = 5
var .SHADER_UNIFORM_IVEC3 int = 6
var .SHADER_UNIFORM_IVEC4 int = 7
var .SHADER_UNIFORM_SAMPLER2D int = 8

type ShaderAttributeDataType -> int
var .SHADER_ATTRIB_FLOAT int = 0
var .SHADER_ATTRIB_VEC2 int = 1
var .SHADER_ATTRIB_VEC3 int = 2
var .SHADER_ATTRIB_VEC4 int = 3

type PixelFormat -> int
var .PIXELFORMAT_UNCOMPRESSED_GRAYSCALE int = 1
var .PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA int = 2
var .PIXELFORMAT_UNCOMPRESSED_R5G6B5 int = 3
var .PIXELFORMAT_UNCOMPRESSED_R8G8B8 int = 4
var .PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 int = 5
var .PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 int = 6
var .PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 int = 7
var .PIXELFORMAT_UNCOMPRESSED_R32 int = 8
var .PIXELFORMAT_UNCOMPRESSED_R32G32B32 int = 9
var .PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 int = 10
var .PIXELFORMAT_UNCOMPRESSED_R16 int = 11
var .PIXELFORMAT_UNCOMPRESSED_R16G16B16 int = 12
var .PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 int = 13
var .PIXELFORMAT_COMPRESSED_DXT1_RGB int = 14
var .PIXELFORMAT_COMPRESSED_DXT1_RGBA int = 15
var .PIXELFORMAT_COMPRESSED_DXT3_RGBA int = 16
var .PIXELFORMAT_COMPRESSED_DXT5_RGBA int = 17
var .PIXELFORMAT_COMPRESSED_ETC1_RGB int = 18
var .PIXELFORMAT_COMPRESSED_ETC2_RGB int = 19
var .PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA int = 20
var .PIXELFORMAT_COMPRESSED_PVRT_RGB int = 21
var .PIXELFORMAT_COMPRESSED_PVRT_RGBA int = 22
var .PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA int = 23
var .PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA int = 24

type TextureFilter -> int
var .TEXTURE_FILTER_POINT int = 0
var .TEXTURE_FILTER_BILINEAR int = 1
var .TEXTURE_FILTER_TRILINEAR int = 2
var .TEXTURE_FILTER_ANISOTROPIC_4X int = 3
var .TEXTURE_FILTER_ANISOTROPIC_8X int = 4
var .TEXTURE_FILTER_ANISOTROPIC_16X int = 5

type TextureWrap -> int
var .TEXTURE_WRAP_REPEAT int = 0
var .TEXTURE_WRAP_CLAMP int = 1
var .TEXTURE_WRAP_MIRROR_REPEAT int = 2
var .TEXTURE_WRAP_MIRROR_CLAMP int = 3

type CubemapLayout -> int
var .CUBEMAP_LAYOUT_AUTO_DETECT int = 0
var .CUBEMAP_LAYOUT_LINE_VERTICAL int = 1
var .CUBEMAP_LAYOUT_LINE_HORIZONTAL int = 2
var .CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR int = 3
var .CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE int = 4
var .CUBEMAP_LAYOUT_PANORAMA int = 5

type FontType -> int
var .FONT_DEFAULT int = 0
var .FONT_BITMAP int = 1
var .FONT_SDF int = 2

type BlendMode -> int
var .BLEND_ALPHA int = 0
var .BLEND_ADDITIVE int = 1
var .BLEND_MULTIPLIED int = 2
var .BLEND_ADD_COLORS int = 3
var .BLEND_SUBTRACT_COLORS int = 4
var .BLEND_ALPHA_PREMULTIPLY int = 5
var .BLEND_CUSTOM int = 6
var .BLEND_CUSTOM_SEPARATE int = 7

type Gesture -> int
var .GESTURE_NONE int = 0
var .GESTURE_TAP int = 1
var .GESTURE_DOUBLETAP int = 2
var .GESTURE_HOLD int = 4
var .GESTURE_DRAG int = 8
var .GESTURE_SWIPE_RIGHT int = 16
var .GESTURE_SWIPE_LEFT int = 32
var .GESTURE_SWIPE_UP int = 64
var .GESTURE_SWIPE_DOWN int = 128
var .GESTURE_PINCH_IN int = 256
var .GESTURE_PINCH_OUT int = 512

type CameraMode -> int
var .CAMERA_CUSTOM int = 0
var .CAMERA_FREE int = 1
var .CAMERA_ORBITAL int = 2
var .CAMERA_FIRST_PERSON int = 3
var .CAMERA_THIRD_PERSON int = 4

type CameraProjection -> int
var .CAMERA_PERSPECTIVE int = 0
var .CAMERA_ORTHOGRAPHIC int = 1

type NPatchLayout -> int
var .NPATCH_NINE_PATCH int = 0
var .NPATCH_THREE_PATCH_VERTICAL int = 1
var .NPATCH_THREE_PATCH_HORIZONTAL int = 2

type TraceLogCallback -> *void

type LoadFileDataCallback -> *void

type SaveFileDataCallback -> *void

type LoadFileTextCallback -> *void

type SaveFileTextCallback -> *void

--func InitWindow(width int, height int, title *void) void
func CloseWindow() void:
    return lib.CloseWindow()
func WindowShouldClose() bool:
    return lib.WindowShouldClose()
func IsWindowReady() bool:
    return lib.IsWindowReady()
func IsWindowFullscreen() bool:
    return lib.IsWindowFullscreen()
func IsWindowHidden() bool:
    return lib.IsWindowHidden()
func IsWindowMinimized() bool:
    return lib.IsWindowMinimized()
func IsWindowMaximized() bool:
    return lib.IsWindowMaximized()
func IsWindowFocused() bool:
    return lib.IsWindowFocused()
func IsWindowResized() bool:
    return lib.IsWindowResized()
func IsWindowState(flag int) bool:
    return lib.IsWindowState(flag)
func SetWindowState(flags int) void:
    return lib.SetWindowState(flags)
func ClearWindowState(flags int) void:
    return lib.ClearWindowState(flags)
func ToggleFullscreen() void:
    return lib.ToggleFullscreen()
func ToggleBorderlessWindowed() void:
    return lib.ToggleBorderlessWindowed()
func MaximizeWindow() void:
    return lib.MaximizeWindow()
func MinimizeWindow() void:
    return lib.MinimizeWindow()
func RestoreWindow() void:
    return lib.RestoreWindow()
func SetWindowIcon(image Image) void:
    return lib.SetWindowIcon(image)
func SetWindowIcons(images *void, count int) void:
    return lib.SetWindowIcons(images, count)
func SetWindowTitle(title *void) void:
    return lib.SetWindowTitle(title)
func SetWindowPosition(x int, y int) void:
    return lib.SetWindowPosition(x, y)
func SetWindowMonitor(monitor int) void:
    return lib.SetWindowMonitor(monitor)
func SetWindowMinSize(width int, height int) void:
    return lib.SetWindowMinSize(width, height)
func SetWindowMaxSize(width int, height int) void:
    return lib.SetWindowMaxSize(width, height)
func SetWindowSize(width int, height int) void:
    return lib.SetWindowSize(width, height)
func SetWindowOpacity(opacity float) void:
    return lib.SetWindowOpacity(opacity)
func SetWindowFocused() void:
    return lib.SetWindowFocused()
func GetWindowHandle() *void:
    return lib.GetWindowHandle()
func GetScreenWidth() int:
    return lib.GetScreenWidth()
func GetScreenHeight() int:
    return lib.GetScreenHeight()
func GetRenderWidth() int:
    return lib.GetRenderWidth()
func GetRenderHeight() int:
    return lib.GetRenderHeight()
func GetMonitorCount() int:
    return lib.GetMonitorCount()
func GetCurrentMonitor() int:
    return lib.GetCurrentMonitor()
func GetMonitorPosition(monitor int) Vector2:
    return lib.GetMonitorPosition(monitor)
func GetMonitorWidth(monitor int) int:
    return lib.GetMonitorWidth(monitor)
func GetMonitorHeight(monitor int) int:
    return lib.GetMonitorHeight(monitor)
func GetMonitorPhysicalWidth(monitor int) int:
    return lib.GetMonitorPhysicalWidth(monitor)
func GetMonitorPhysicalHeight(monitor int) int:
    return lib.GetMonitorPhysicalHeight(monitor)
func GetMonitorRefreshRate(monitor int) int:
    return lib.GetMonitorRefreshRate(monitor)
func GetWindowPosition() Vector2:
    return lib.GetWindowPosition()
func GetWindowScaleDPI() Vector2:
    return lib.GetWindowScaleDPI()
func GetMonitorName(monitor int) *void:
    return lib.GetMonitorName(monitor)
func SetClipboardText(text *void) void:
    return lib.SetClipboardText(text)
func GetClipboardText() *void:
    return lib.GetClipboardText()
func EnableEventWaiting() void:
    return lib.EnableEventWaiting()
func DisableEventWaiting() void:
    return lib.DisableEventWaiting()
func ShowCursor() void:
    return lib.ShowCursor()
func HideCursor() void:
    return lib.HideCursor()
func IsCursorHidden() bool:
    return lib.IsCursorHidden()
func EnableCursor() void:
    return lib.EnableCursor()
func DisableCursor() void:
    return lib.DisableCursor()
func IsCursorOnScreen() bool:
    return lib.IsCursorOnScreen()
func ClearBackground(color Color) void:
    return lib.ClearBackground(color)
func BeginDrawing() void:
    return lib.BeginDrawing()
func EndDrawing() void:
    return lib.EndDrawing()
func BeginMode2D(camera Camera2D) void:
    return lib.BeginMode2D(camera)
func EndMode2D() void:
    return lib.EndMode2D()
func BeginMode3D(camera Camera3D) void:
    return lib.BeginMode3D(camera)
func EndMode3D() void:
    return lib.EndMode3D()
func BeginTextureMode(target RenderTexture2D) void:
    return lib.BeginTextureMode(target)
func EndTextureMode() void:
    return lib.EndTextureMode()
func BeginShaderMode(shader Shader) void:
    return lib.BeginShaderMode(shader)
func EndShaderMode() void:
    return lib.EndShaderMode()
func BeginBlendMode(mode int) void:
    return lib.BeginBlendMode(mode)
func EndBlendMode() void:
    return lib.EndBlendMode()
func BeginScissorMode(x int, y int, width int, height int) void:
    return lib.BeginScissorMode(x, y, width, height)
func EndScissorMode() void:
    return lib.EndScissorMode()
func BeginVrStereoMode(config VrStereoConfig) void:
    return lib.BeginVrStereoMode(config)
func EndVrStereoMode() void:
    return lib.EndVrStereoMode()
func LoadVrStereoConfig(device VrDeviceInfo) VrStereoConfig:
    return lib.LoadVrStereoConfig(device)
func UnloadVrStereoConfig(config VrStereoConfig) void:
    return lib.UnloadVrStereoConfig(config)
func LoadShader(vsFileName *void, fsFileName *void) Shader:
    return lib.LoadShader(vsFileName, fsFileName)
func LoadShaderFromMemory(vsCode *void, fsCode *void) Shader:
    return lib.LoadShaderFromMemory(vsCode, fsCode)
func IsShaderReady(shader Shader) bool:
    return lib.IsShaderReady(shader)
func GetShaderLocation(shader Shader, uniformName *void) int:
    return lib.GetShaderLocation(shader, uniformName)
func GetShaderLocationAttrib(shader Shader, attribName *void) int:
    return lib.GetShaderLocationAttrib(shader, attribName)
func SetShaderValue(shader Shader, locIndex int, value *void, uniformType int) void:
    return lib.SetShaderValue(shader, locIndex, value, uniformType)
func SetShaderValueV(shader Shader, locIndex int, value *void, uniformType int, count int) void:
    return lib.SetShaderValueV(shader, locIndex, value, uniformType, count)
func SetShaderValueMatrix(shader Shader, locIndex int, mat Matrix) void:
    return lib.SetShaderValueMatrix(shader, locIndex, mat)
func SetShaderValueTexture(shader Shader, locIndex int, texture Texture2D) void:
    return lib.SetShaderValueTexture(shader, locIndex, texture)
func UnloadShader(shader Shader) void:
    return lib.UnloadShader(shader)
func GetMouseRay(mousePosition Vector2, camera Camera) Ray:
    return lib.GetMouseRay(mousePosition, camera)
func GetCameraMatrix(camera Camera) Matrix:
    return lib.GetCameraMatrix(camera)
func GetCameraMatrix2D(camera Camera2D) Matrix:
    return lib.GetCameraMatrix2D(camera)
func GetWorldToScreen(position Vector3, camera Camera) Vector2:
    return lib.GetWorldToScreen(position, camera)
func GetScreenToWorld2D(position Vector2, camera Camera2D) Vector2:
    return lib.GetScreenToWorld2D(position, camera)
func GetWorldToScreenEx(position Vector3, camera Camera, width int, height int) Vector2:
    return lib.GetWorldToScreenEx(position, camera, width, height)
func GetWorldToScreen2D(position Vector2, camera Camera2D) Vector2:
    return lib.GetWorldToScreen2D(position, camera)
func SetTargetFPS(fps int) void:
    return lib.SetTargetFPS(fps)
func GetFrameTime() float:
    return lib.GetFrameTime()
func GetTime() float:
    return lib.GetTime()
func GetFPS() int:
    return lib.GetFPS()
func SwapScreenBuffer() void:
    return lib.SwapScreenBuffer()
func PollInputEvents() void:
    return lib.PollInputEvents()
func WaitTime(seconds float) void:
    return lib.WaitTime(seconds)
func SetRandomSeed(seed int) void:
    return lib.SetRandomSeed(seed)
func GetRandomValue(min int, max int) int:
    return lib.GetRandomValue(min, max)
func LoadRandomSequence(count int, min int, max int) *void:
    return lib.LoadRandomSequence(count, min, max)
func UnloadRandomSequence(sequence *void) void:
    return lib.UnloadRandomSequence(sequence)
func TakeScreenshot(fileName *void) void:
    return lib.TakeScreenshot(fileName)
func SetConfigFlags(flags int) void:
    return lib.SetConfigFlags(flags)
func OpenURL(url *void) void:
    return lib.OpenURL(url)
func TraceLog(logLevel int, text *void) void:
    return lib.TraceLog(logLevel, text)
func SetTraceLogLevel(logLevel int) void:
    return lib.SetTraceLogLevel(logLevel)
func MemAlloc(size int) *void:
    return lib.MemAlloc(size)
func MemRealloc(ptr *void, size int) *void:
    return lib.MemRealloc(ptr, size)
func MemFree(ptr *void) void:
    return lib.MemFree(ptr)
func SetTraceLogCallback(callback *void) void:
    return lib.SetTraceLogCallback(callback)
func SetLoadFileDataCallback(callback *void) void:
    return lib.SetLoadFileDataCallback(callback)
func SetSaveFileDataCallback(callback *void) void:
    return lib.SetSaveFileDataCallback(callback)
func SetLoadFileTextCallback(callback *void) void:
    return lib.SetLoadFileTextCallback(callback)
func SetSaveFileTextCallback(callback *void) void:
    return lib.SetSaveFileTextCallback(callback)
func LoadFileData(fileName *void, dataSize *void) *void:
    return lib.LoadFileData(fileName, dataSize)
func UnloadFileData(data *void) void:
    return lib.UnloadFileData(data)
func SaveFileData(fileName *void, data *void, dataSize int) bool:
    return lib.SaveFileData(fileName, data, dataSize)
func ExportDataAsCode(data *void, dataSize int, fileName *void) bool:
    return lib.ExportDataAsCode(data, dataSize, fileName)
func LoadFileText(fileName *void) *void:
    return lib.LoadFileText(fileName)
func UnloadFileText(text *void) void:
    return lib.UnloadFileText(text)
func SaveFileText(fileName *void, text *void) bool:
    return lib.SaveFileText(fileName, text)
func FileExists(fileName *void) bool:
    return lib.FileExists(fileName)
func DirectoryExists(dirPath *void) bool:
    return lib.DirectoryExists(dirPath)
func IsFileExtension(fileName *void, ext *void) bool:
    return lib.IsFileExtension(fileName, ext)
func GetFileLength(fileName *void) int:
    return lib.GetFileLength(fileName)
func GetFileExtension(fileName *void) *void:
    return lib.GetFileExtension(fileName)
func GetFileName(filePath *void) *void:
    return lib.GetFileName(filePath)
func GetFileNameWithoutExt(filePath *void) *void:
    return lib.GetFileNameWithoutExt(filePath)
func GetDirectoryPath(filePath *void) *void:
    return lib.GetDirectoryPath(filePath)
func GetPrevDirectoryPath(dirPath *void) *void:
    return lib.GetPrevDirectoryPath(dirPath)
func GetWorkingDirectory() *void:
    return lib.GetWorkingDirectory()
func GetApplicationDirectory() *void:
    return lib.GetApplicationDirectory()
func ChangeDirectory(dir *void) bool:
    return lib.ChangeDirectory(dir)
func IsPathFile(path *void) bool:
    return lib.IsPathFile(path)
func LoadDirectoryFiles(dirPath *void) FilePathList:
    return lib.LoadDirectoryFiles(dirPath)
func LoadDirectoryFilesEx(basePath *void, filter *void, scanSubdirs bool) FilePathList:
    return lib.LoadDirectoryFilesEx(basePath, filter, scanSubdirs)
func UnloadDirectoryFiles(files FilePathList) void:
    return lib.UnloadDirectoryFiles(files)
func IsFileDropped() bool:
    return lib.IsFileDropped()
func LoadDroppedFiles() FilePathList:
    return lib.LoadDroppedFiles()
func UnloadDroppedFiles(files FilePathList) void:
    return lib.UnloadDroppedFiles(files)
func GetFileModTime(fileName *void) int:
    return lib.GetFileModTime(fileName)
func CompressData(data *void, dataSize int, compDataSize *void) *void:
    return lib.CompressData(data, dataSize, compDataSize)
func DecompressData(compData *void, compDataSize int, dataSize *void) *void:
    return lib.DecompressData(compData, compDataSize, dataSize)
func EncodeDataBase64(data *void, dataSize int, outputSize *void) *void:
    return lib.EncodeDataBase64(data, dataSize, outputSize)
func DecodeDataBase64(data *void, outputSize *void) *void:
    return lib.DecodeDataBase64(data, outputSize)
func LoadAutomationEventList(fileName *void) AutomationEventList:
    return lib.LoadAutomationEventList(fileName)
func UnloadAutomationEventList(list *void) void:
    return lib.UnloadAutomationEventList(list)
func ExportAutomationEventList(list AutomationEventList, fileName *void) bool:
    return lib.ExportAutomationEventList(list, fileName)
func SetAutomationEventList(list *void) void:
    return lib.SetAutomationEventList(list)
func SetAutomationEventBaseFrame(frame int) void:
    return lib.SetAutomationEventBaseFrame(frame)
func StartAutomationEventRecording() void:
    return lib.StartAutomationEventRecording()
func StopAutomationEventRecording() void:
    return lib.StopAutomationEventRecording()
func PlayAutomationEvent(event AutomationEvent) void:
    return lib.PlayAutomationEvent(event)
func IsKeyPressed(key int) bool:
    return lib.IsKeyPressed(key)
func IsKeyPressedRepeat(key int) bool:
    return lib.IsKeyPressedRepeat(key)
func IsKeyDown(key int) bool:
    return lib.IsKeyDown(key)
func IsKeyReleased(key int) bool:
    return lib.IsKeyReleased(key)
func IsKeyUp(key int) bool:
    return lib.IsKeyUp(key)
func GetKeyPressed() int:
    return lib.GetKeyPressed()
func GetCharPressed() int:
    return lib.GetCharPressed()
func SetExitKey(key int) void:
    return lib.SetExitKey(key)
func IsGamepadAvailable(gamepad int) bool:
    return lib.IsGamepadAvailable(gamepad)
func GetGamepadName(gamepad int) *void:
    return lib.GetGamepadName(gamepad)
func IsGamepadButtonPressed(gamepad int, button int) bool:
    return lib.IsGamepadButtonPressed(gamepad, button)
func IsGamepadButtonDown(gamepad int, button int) bool:
    return lib.IsGamepadButtonDown(gamepad, button)
func IsGamepadButtonReleased(gamepad int, button int) bool:
    return lib.IsGamepadButtonReleased(gamepad, button)
func IsGamepadButtonUp(gamepad int, button int) bool:
    return lib.IsGamepadButtonUp(gamepad, button)
func GetGamepadButtonPressed() int:
    return lib.GetGamepadButtonPressed()
func GetGamepadAxisCount(gamepad int) int:
    return lib.GetGamepadAxisCount(gamepad)
func GetGamepadAxisMovement(gamepad int, axis int) float:
    return lib.GetGamepadAxisMovement(gamepad, axis)
func SetGamepadMappings(mappings *void) int:
    return lib.SetGamepadMappings(mappings)
func IsMouseButtonPressed(button int) bool:
    return lib.IsMouseButtonPressed(button)
func IsMouseButtonDown(button int) bool:
    return lib.IsMouseButtonDown(button)
func IsMouseButtonReleased(button int) bool:
    return lib.IsMouseButtonReleased(button)
func IsMouseButtonUp(button int) bool:
    return lib.IsMouseButtonUp(button)
func GetMouseX() int:
    return lib.GetMouseX()
func GetMouseY() int:
    return lib.GetMouseY()
func GetMousePosition() Vector2:
    return lib.GetMousePosition()
func GetMouseDelta() Vector2:
    return lib.GetMouseDelta()
func SetMousePosition(x int, y int) void:
    return lib.SetMousePosition(x, y)
func SetMouseOffset(offsetX int, offsetY int) void:
    return lib.SetMouseOffset(offsetX, offsetY)
func SetMouseScale(scaleX float, scaleY float) void:
    return lib.SetMouseScale(scaleX, scaleY)
func GetMouseWheelMove() float:
    return lib.GetMouseWheelMove()
func GetMouseWheelMoveV() Vector2:
    return lib.GetMouseWheelMoveV()
func SetMouseCursor(cursor int) void:
    return lib.SetMouseCursor(cursor)
func GetTouchX() int:
    return lib.GetTouchX()
func GetTouchY() int:
    return lib.GetTouchY()
func GetTouchPosition(index int) Vector2:
    return lib.GetTouchPosition(index)
func GetTouchPointId(index int) int:
    return lib.GetTouchPointId(index)
func GetTouchPointCount() int:
    return lib.GetTouchPointCount()
func SetGesturesEnabled(flags int) void:
    return lib.SetGesturesEnabled(flags)
func IsGestureDetected(gesture int) bool:
    return lib.IsGestureDetected(gesture)
func GetGestureDetected() int:
    return lib.GetGestureDetected()
func GetGestureHoldDuration() float:
    return lib.GetGestureHoldDuration()
func GetGestureDragVector() Vector2:
    return lib.GetGestureDragVector()
func GetGestureDragAngle() float:
    return lib.GetGestureDragAngle()
func GetGesturePinchVector() Vector2:
    return lib.GetGesturePinchVector()
func GetGesturePinchAngle() float:
    return lib.GetGesturePinchAngle()
func UpdateCamera(camera *void, mode int) void:
    return lib.UpdateCamera(camera, mode)
func UpdateCameraPro(camera *void, movement Vector3, rotation Vector3, zoom float) void:
    return lib.UpdateCameraPro(camera, movement, rotation, zoom)
func SetShapesTexture(texture Texture2D, source Rectangle) void:
    return lib.SetShapesTexture(texture, source)
func DrawPixel(posX int, posY int, color Color) void:
    return lib.DrawPixel(posX, posY, color)
func DrawPixelV(position Vector2, color Color) void:
    return lib.DrawPixelV(position, color)
func DrawLine(startPosX int, startPosY int, endPosX int, endPosY int, color Color) void:
    return lib.DrawLine(startPosX, startPosY, endPosX, endPosY, color)
func DrawLineV(startPos Vector2, endPos Vector2, color Color) void:
    return lib.DrawLineV(startPos, endPos, color)
func DrawLineEx(startPos Vector2, endPos Vector2, thick float, color Color) void:
    return lib.DrawLineEx(startPos, endPos, thick, color)
func DrawLineStrip(points *void, pointCount int, color Color) void:
    return lib.DrawLineStrip(points, pointCount, color)
func DrawLineBezier(startPos Vector2, endPos Vector2, thick float, color Color) void:
    return lib.DrawLineBezier(startPos, endPos, thick, color)
func DrawCircle(centerX int, centerY int, radius float, color Color) void:
    return lib.DrawCircle(centerX, centerY, radius, color)
func DrawCircleSector(center Vector2, radius float, startAngle float, endAngle float, segments int, color Color) void:
    return lib.DrawCircleSector(center, radius, startAngle, endAngle, segments, color)
func DrawCircleSectorLines(center Vector2, radius float, startAngle float, endAngle float, segments int, color Color) void:
    return lib.DrawCircleSectorLines(center, radius, startAngle, endAngle, segments, color)
func DrawCircleGradient(centerX int, centerY int, radius float, color1 Color, color2 Color) void:
    return lib.DrawCircleGradient(centerX, centerY, radius, color1, color2)
func DrawCircleV(center Vector2, radius float, color Color) void:
    return lib.DrawCircleV(center, radius, color)
func DrawCircleLines(centerX int, centerY int, radius float, color Color) void:
    return lib.DrawCircleLines(centerX, centerY, radius, color)
func DrawCircleLinesV(center Vector2, radius float, color Color) void:
    return lib.DrawCircleLinesV(center, radius, color)
func DrawEllipse(centerX int, centerY int, radiusH float, radiusV float, color Color) void:
    return lib.DrawEllipse(centerX, centerY, radiusH, radiusV, color)
func DrawEllipseLines(centerX int, centerY int, radiusH float, radiusV float, color Color) void:
    return lib.DrawEllipseLines(centerX, centerY, radiusH, radiusV, color)
func DrawRing(center Vector2, innerRadius float, outerRadius float, startAngle float, endAngle float, segments int, color Color) void:
    return lib.DrawRing(center, innerRadius, outerRadius, startAngle, endAngle, segments, color)
func DrawRingLines(center Vector2, innerRadius float, outerRadius float, startAngle float, endAngle float, segments int, color Color) void:
    return lib.DrawRingLines(center, innerRadius, outerRadius, startAngle, endAngle, segments, color)
func DrawRectangle(posX int, posY int, width int, height int, color Color) void:
    return lib.DrawRectangle(posX, posY, width, height, color)
func DrawRectangleV(position Vector2, size Vector2, color Color) void:
    return lib.DrawRectangleV(position, size, color)
func DrawRectangleRec(rec Rectangle, color Color) void:
    return lib.DrawRectangleRec(rec, color)
func DrawRectanglePro(rec Rectangle, origin Vector2, rotation float, color Color) void:
    return lib.DrawRectanglePro(rec, origin, rotation, color)
func DrawRectangleGradientV(posX int, posY int, width int, height int, color1 Color, color2 Color) void:
    return lib.DrawRectangleGradientV(posX, posY, width, height, color1, color2)
func DrawRectangleGradientH(posX int, posY int, width int, height int, color1 Color, color2 Color) void:
    return lib.DrawRectangleGradientH(posX, posY, width, height, color1, color2)
func DrawRectangleGradientEx(rec Rectangle, col1 Color, col2 Color, col3 Color, col4 Color) void:
    return lib.DrawRectangleGradientEx(rec, col1, col2, col3, col4)
func DrawRectangleLines(posX int, posY int, width int, height int, color Color) void:
    return lib.DrawRectangleLines(posX, posY, width, height, color)
func DrawRectangleLinesEx(rec Rectangle, lineThick float, color Color) void:
    return lib.DrawRectangleLinesEx(rec, lineThick, color)
func DrawRectangleRounded(rec Rectangle, roundness float, segments int, color Color) void:
    return lib.DrawRectangleRounded(rec, roundness, segments, color)
func DrawRectangleRoundedLines(rec Rectangle, roundness float, segments int, lineThick float, color Color) void:
    return lib.DrawRectangleRoundedLines(rec, roundness, segments, lineThick, color)
func DrawTriangle(v1 Vector2, v2 Vector2, v3 Vector2, color Color) void:
    return lib.DrawTriangle(v1, v2, v3, color)
func DrawTriangleLines(v1 Vector2, v2 Vector2, v3 Vector2, color Color) void:
    return lib.DrawTriangleLines(v1, v2, v3, color)
func DrawTriangleFan(points *void, pointCount int, color Color) void:
    return lib.DrawTriangleFan(points, pointCount, color)
func DrawTriangleStrip(points *void, pointCount int, color Color) void:
    return lib.DrawTriangleStrip(points, pointCount, color)
func DrawPoly(center Vector2, sides int, radius float, rotation float, color Color) void:
    return lib.DrawPoly(center, sides, radius, rotation, color)
func DrawPolyLines(center Vector2, sides int, radius float, rotation float, color Color) void:
    return lib.DrawPolyLines(center, sides, radius, rotation, color)
func DrawPolyLinesEx(center Vector2, sides int, radius float, rotation float, lineThick float, color Color) void:
    return lib.DrawPolyLinesEx(center, sides, radius, rotation, lineThick, color)
func DrawSplineLinear(points *void, pointCount int, thick float, color Color) void:
    return lib.DrawSplineLinear(points, pointCount, thick, color)
func DrawSplineBasis(points *void, pointCount int, thick float, color Color) void:
    return lib.DrawSplineBasis(points, pointCount, thick, color)
func DrawSplineCatmullRom(points *void, pointCount int, thick float, color Color) void:
    return lib.DrawSplineCatmullRom(points, pointCount, thick, color)
func DrawSplineBezierQuadratic(points *void, pointCount int, thick float, color Color) void:
    return lib.DrawSplineBezierQuadratic(points, pointCount, thick, color)
func DrawSplineBezierCubic(points *void, pointCount int, thick float, color Color) void:
    return lib.DrawSplineBezierCubic(points, pointCount, thick, color)
func DrawSplineSegmentLinear(p1 Vector2, p2 Vector2, thick float, color Color) void:
    return lib.DrawSplineSegmentLinear(p1, p2, thick, color)
func DrawSplineSegmentBasis(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, thick float, color Color) void:
    return lib.DrawSplineSegmentBasis(p1, p2, p3, p4, thick, color)
func DrawSplineSegmentCatmullRom(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, thick float, color Color) void:
    return lib.DrawSplineSegmentCatmullRom(p1, p2, p3, p4, thick, color)
func DrawSplineSegmentBezierQuadratic(p1 Vector2, c2 Vector2, p3 Vector2, thick float, color Color) void:
    return lib.DrawSplineSegmentBezierQuadratic(p1, c2, p3, thick, color)
func DrawSplineSegmentBezierCubic(p1 Vector2, c2 Vector2, c3 Vector2, p4 Vector2, thick float, color Color) void:
    return lib.DrawSplineSegmentBezierCubic(p1, c2, c3, p4, thick, color)
func GetSplinePointLinear(startPos Vector2, endPos Vector2, t float) Vector2:
    return lib.GetSplinePointLinear(startPos, endPos, t)
func GetSplinePointBasis(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, t float) Vector2:
    return lib.GetSplinePointBasis(p1, p2, p3, p4, t)
func GetSplinePointCatmullRom(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, t float) Vector2:
    return lib.GetSplinePointCatmullRom(p1, p2, p3, p4, t)
func GetSplinePointBezierQuad(p1 Vector2, c2 Vector2, p3 Vector2, t float) Vector2:
    return lib.GetSplinePointBezierQuad(p1, c2, p3, t)
func GetSplinePointBezierCubic(p1 Vector2, c2 Vector2, c3 Vector2, p4 Vector2, t float) Vector2:
    return lib.GetSplinePointBezierCubic(p1, c2, c3, p4, t)
func CheckCollisionRecs(rec1 Rectangle, rec2 Rectangle) bool:
    return lib.CheckCollisionRecs(rec1, rec2)
func CheckCollisionCircles(center1 Vector2, radius1 float, center2 Vector2, radius2 float) bool:
    return lib.CheckCollisionCircles(center1, radius1, center2, radius2)
func CheckCollisionCircleRec(center Vector2, radius float, rec Rectangle) bool:
    return lib.CheckCollisionCircleRec(center, radius, rec)
func CheckCollisionPointRec(point Vector2, rec Rectangle) bool:
    return lib.CheckCollisionPointRec(point, rec)
func CheckCollisionPointCircle(point Vector2, center Vector2, radius float) bool:
    return lib.CheckCollisionPointCircle(point, center, radius)
func CheckCollisionPointTriangle(point Vector2, p1 Vector2, p2 Vector2, p3 Vector2) bool:
    return lib.CheckCollisionPointTriangle(point, p1, p2, p3)
func CheckCollisionPointPoly(point Vector2, points *void, pointCount int) bool:
    return lib.CheckCollisionPointPoly(point, points, pointCount)
func CheckCollisionLines(startPos1 Vector2, endPos1 Vector2, startPos2 Vector2, endPos2 Vector2, collisionPoint *void) bool:
    return lib.CheckCollisionLines(startPos1, endPos1, startPos2, endPos2, collisionPoint)
func CheckCollisionPointLine(point Vector2, p1 Vector2, p2 Vector2, threshold int) bool:
    return lib.CheckCollisionPointLine(point, p1, p2, threshold)
func GetCollisionRec(rec1 Rectangle, rec2 Rectangle) Rectangle:
    return lib.GetCollisionRec(rec1, rec2)
func LoadImage(fileName *void) Image:
    return lib.LoadImage(fileName)
func LoadImageRaw(fileName *void, width int, height int, format int, headerSize int) Image:
    return lib.LoadImageRaw(fileName, width, height, format, headerSize)
func LoadImageSvg(fileNameOrString *void, width int, height int) Image:
    return lib.LoadImageSvg(fileNameOrString, width, height)
func LoadImageAnim(fileName *void, frames *void) Image:
    return lib.LoadImageAnim(fileName, frames)
func LoadImageFromMemory(fileType *void, fileData *void, dataSize int) Image:
    return lib.LoadImageFromMemory(fileType, fileData, dataSize)
func LoadImageFromTexture(texture Texture2D) Image:
    return lib.LoadImageFromTexture(texture)
func LoadImageFromScreen() Image:
    return lib.LoadImageFromScreen()
func IsImageReady(image Image) bool:
    return lib.IsImageReady(image)
func UnloadImage(image Image) void:
    return lib.UnloadImage(image)
func ExportImage(image Image, fileName *void) bool:
    return lib.ExportImage(image, fileName)
func ExportImageToMemory(image Image, fileType *void, fileSize *void) *void:
    return lib.ExportImageToMemory(image, fileType, fileSize)
func ExportImageAsCode(image Image, fileName *void) bool:
    return lib.ExportImageAsCode(image, fileName)
func GenImageColor(width int, height int, color Color) Image:
    return lib.GenImageColor(width, height, color)
func GenImageGradientLinear(width int, height int, direction int, start Color, end Color) Image:
    return lib.GenImageGradientLinear(width, height, direction, start, end)
func GenImageGradientRadial(width int, height int, density float, inner Color, outer Color) Image:
    return lib.GenImageGradientRadial(width, height, density, inner, outer)
func GenImageGradientSquare(width int, height int, density float, inner Color, outer Color) Image:
    return lib.GenImageGradientSquare(width, height, density, inner, outer)
func GenImageChecked(width int, height int, checksX int, checksY int, col1 Color, col2 Color) Image:
    return lib.GenImageChecked(width, height, checksX, checksY, col1, col2)
func GenImageWhiteNoise(width int, height int, factor float) Image:
    return lib.GenImageWhiteNoise(width, height, factor)
func GenImagePerlinNoise(width int, height int, offsetX int, offsetY int, scale float) Image:
    return lib.GenImagePerlinNoise(width, height, offsetX, offsetY, scale)
func GenImageCellular(width int, height int, tileSize int) Image:
    return lib.GenImageCellular(width, height, tileSize)
func GenImageText(width int, height int, text *void) Image:
    return lib.GenImageText(width, height, text)
func ImageCopy(image Image) Image:
    return lib.ImageCopy(image)
func ImageFromImage(image Image, rec Rectangle) Image:
    return lib.ImageFromImage(image, rec)
func ImageText(text *void, fontSize int, color Color) Image:
    return lib.ImageText(text, fontSize, color)
func ImageTextEx(font Font, text *void, fontSize float, spacing float, tint Color) Image:
    return lib.ImageTextEx(font, text, fontSize, spacing, tint)
func ImageFormat(image *void, newFormat int) void:
    return lib.ImageFormat(image, newFormat)
func ImageToPOT(image *void, fill Color) void:
    return lib.ImageToPOT(image, fill)
func ImageCrop(image *void, crop Rectangle) void:
    return lib.ImageCrop(image, crop)
func ImageAlphaCrop(image *void, threshold float) void:
    return lib.ImageAlphaCrop(image, threshold)
func ImageAlphaClear(image *void, color Color, threshold float) void:
    return lib.ImageAlphaClear(image, color, threshold)
func ImageAlphaMask(image *void, alphaMask Image) void:
    return lib.ImageAlphaMask(image, alphaMask)
func ImageAlphaPremultiply(image *void) void:
    return lib.ImageAlphaPremultiply(image)
func ImageBlurGaussian(image *void, blurSize int) void:
    return lib.ImageBlurGaussian(image, blurSize)
func ImageResize(image *void, newWidth int, newHeight int) void:
    return lib.ImageResize(image, newWidth, newHeight)
func ImageResizeNN(image *void, newWidth int, newHeight int) void:
    return lib.ImageResizeNN(image, newWidth, newHeight)
func ImageResizeCanvas(image *void, newWidth int, newHeight int, offsetX int, offsetY int, fill Color) void:
    return lib.ImageResizeCanvas(image, newWidth, newHeight, offsetX, offsetY, fill)
func ImageMipmaps(image *void) void:
    return lib.ImageMipmaps(image)
func ImageDither(image *void, rBpp int, gBpp int, bBpp int, aBpp int) void:
    return lib.ImageDither(image, rBpp, gBpp, bBpp, aBpp)
func ImageFlipVertical(image *void) void:
    return lib.ImageFlipVertical(image)
func ImageFlipHorizontal(image *void) void:
    return lib.ImageFlipHorizontal(image)
func ImageRotate(image *void, degrees int) void:
    return lib.ImageRotate(image, degrees)
func ImageRotateCW(image *void) void:
    return lib.ImageRotateCW(image)
func ImageRotateCCW(image *void) void:
    return lib.ImageRotateCCW(image)
func ImageColorTint(image *void, color Color) void:
    return lib.ImageColorTint(image, color)
func ImageColorInvert(image *void) void:
    return lib.ImageColorInvert(image)
func ImageColorGrayscale(image *void) void:
    return lib.ImageColorGrayscale(image)
func ImageColorContrast(image *void, contrast float) void:
    return lib.ImageColorContrast(image, contrast)
func ImageColorBrightness(image *void, brightness int) void:
    return lib.ImageColorBrightness(image, brightness)
func ImageColorReplace(image *void, color Color, replace Color) void:
    return lib.ImageColorReplace(image, color, replace)
func LoadImageColors(image Image) *void:
    return lib.LoadImageColors(image)
func LoadImagePalette(image Image, maxPaletteSize int, colorCount *void) *void:
    return lib.LoadImagePalette(image, maxPaletteSize, colorCount)
func UnloadImageColors(colors *void) void:
    return lib.UnloadImageColors(colors)
func UnloadImagePalette(colors *void) void:
    return lib.UnloadImagePalette(colors)
func GetImageAlphaBorder(image Image, threshold float) Rectangle:
    return lib.GetImageAlphaBorder(image, threshold)
func GetImageColor(image Image, x int, y int) Color:
    return lib.GetImageColor(image, x, y)
func ImageClearBackground(dst *void, color Color) void:
    return lib.ImageClearBackground(dst, color)
func ImageDrawPixel(dst *void, posX int, posY int, color Color) void:
    return lib.ImageDrawPixel(dst, posX, posY, color)
func ImageDrawPixelV(dst *void, position Vector2, color Color) void:
    return lib.ImageDrawPixelV(dst, position, color)
func ImageDrawLine(dst *void, startPosX int, startPosY int, endPosX int, endPosY int, color Color) void:
    return lib.ImageDrawLine(dst, startPosX, startPosY, endPosX, endPosY, color)
func ImageDrawLineV(dst *void, start Vector2, end Vector2, color Color) void:
    return lib.ImageDrawLineV(dst, start, end, color)
func ImageDrawCircle(dst *void, centerX int, centerY int, radius int, color Color) void:
    return lib.ImageDrawCircle(dst, centerX, centerY, radius, color)
func ImageDrawCircleV(dst *void, center Vector2, radius int, color Color) void:
    return lib.ImageDrawCircleV(dst, center, radius, color)
func ImageDrawCircleLines(dst *void, centerX int, centerY int, radius int, color Color) void:
    return lib.ImageDrawCircleLines(dst, centerX, centerY, radius, color)
func ImageDrawCircleLinesV(dst *void, center Vector2, radius int, color Color) void:
    return lib.ImageDrawCircleLinesV(dst, center, radius, color)
func ImageDrawRectangle(dst *void, posX int, posY int, width int, height int, color Color) void:
    return lib.ImageDrawRectangle(dst, posX, posY, width, height, color)
func ImageDrawRectangleV(dst *void, position Vector2, size Vector2, color Color) void:
    return lib.ImageDrawRectangleV(dst, position, size, color)
func ImageDrawRectangleRec(dst *void, rec Rectangle, color Color) void:
    return lib.ImageDrawRectangleRec(dst, rec, color)
func ImageDrawRectangleLines(dst *void, rec Rectangle, thick int, color Color) void:
    return lib.ImageDrawRectangleLines(dst, rec, thick, color)
func ImageDraw(dst *void, src Image, srcRec Rectangle, dstRec Rectangle, tint Color) void:
    return lib.ImageDraw(dst, src, srcRec, dstRec, tint)
func ImageDrawText(dst *void, text *void, posX int, posY int, fontSize int, color Color) void:
    return lib.ImageDrawText(dst, text, posX, posY, fontSize, color)
func ImageDrawTextEx(dst *void, font Font, text *void, position Vector2, fontSize float, spacing float, tint Color) void:
    return lib.ImageDrawTextEx(dst, font, text, position, fontSize, spacing, tint)
--func LoadTexture(fileName *void) Texture2D
func LoadTextureFromImage(image Image) Texture2D:
    return lib.LoadTextureFromImage(image)
func LoadTextureCubemap(image Image, layout int) TextureCubemap:
    return lib.LoadTextureCubemap(image, layout)
func LoadRenderTexture(width int, height int) RenderTexture2D:
    return lib.LoadRenderTexture(width, height)
func IsTextureReady(texture Texture2D) bool:
    return lib.IsTextureReady(texture)
func UnloadTexture(texture Texture2D) void:
    return lib.UnloadTexture(texture)
func IsRenderTextureReady(target RenderTexture2D) bool:
    return lib.IsRenderTextureReady(target)
func UnloadRenderTexture(target RenderTexture2D) void:
    return lib.UnloadRenderTexture(target)
func UpdateTexture(texture Texture2D, pixels *void) void:
    return lib.UpdateTexture(texture, pixels)
func UpdateTextureRec(texture Texture2D, rec Rectangle, pixels *void) void:
    return lib.UpdateTextureRec(texture, rec, pixels)
func GenTextureMipmaps(texture *void) void:
    return lib.GenTextureMipmaps(texture)
func SetTextureFilter(texture Texture2D, filter int) void:
    return lib.SetTextureFilter(texture, filter)
func SetTextureWrap(texture Texture2D, wrap int) void:
    return lib.SetTextureWrap(texture, wrap)
func DrawTexture(texture Texture2D, posX int, posY int, tint Color) void:
    return lib.DrawTexture(texture, posX, posY, tint)
func DrawTextureV(texture Texture2D, position Vector2, tint Color) void:
    return lib.DrawTextureV(texture, position, tint)
func DrawTextureEx(texture Texture2D, position Vector2, rotation float, scale float, tint Color) void:
    return lib.DrawTextureEx(texture, position, rotation, scale, tint)
func DrawTextureRec(texture Texture2D, source Rectangle, position Vector2, tint Color) void:
    return lib.DrawTextureRec(texture, source, position, tint)
func DrawTexturePro(texture Texture2D, source Rectangle, dest Rectangle, origin Vector2, rotation float, tint Color) void:
    return lib.DrawTexturePro(texture, source, dest, origin, rotation, tint)
func DrawTextureNPatch(texture Texture2D, nPatchInfo NPatchInfo, dest Rectangle, origin Vector2, rotation float, tint Color) void:
    return lib.DrawTextureNPatch(texture, nPatchInfo, dest, origin, rotation, tint)
func Fade(color Color, alpha float) Color:
    return lib.Fade(color, alpha)
func ColorToInt(color Color) int:
    return lib.ColorToInt(color)
func ColorNormalize(color Color) Vector4:
    return lib.ColorNormalize(color)
func ColorFromNormalized(normalized Vector4) Color:
    return lib.ColorFromNormalized(normalized)
func ColorToHSV(color Color) Vector3:
    return lib.ColorToHSV(color)
func ColorFromHSV(hue float, saturation float, value float) Color:
    return lib.ColorFromHSV(hue, saturation, value)
func ColorTint(color Color, tint Color) Color:
    return lib.ColorTint(color, tint)
func ColorBrightness(color Color, factor float) Color:
    return lib.ColorBrightness(color, factor)
func ColorContrast(color Color, contrast float) Color:
    return lib.ColorContrast(color, contrast)
func ColorAlpha(color Color, alpha float) Color:
    return lib.ColorAlpha(color, alpha)
func ColorAlphaBlend(dst Color, src Color, tint Color) Color:
    return lib.ColorAlphaBlend(dst, src, tint)
func GetColor(hexValue int) Color:
    return lib.GetColor(hexValue)
func GetPixelColor(srcPtr *void, format int) Color:
    return lib.GetPixelColor(srcPtr, format)
func SetPixelColor(dstPtr *void, color Color, format int) void:
    return lib.SetPixelColor(dstPtr, color, format)
func GetPixelDataSize(width int, height int, format int) int:
    return lib.GetPixelDataSize(width, height, format)
func GetFontDefault() Font:
    return lib.GetFontDefault()
func LoadFont(fileName *void) Font:
    return lib.LoadFont(fileName)
func LoadFontEx(fileName *void, fontSize int, codepoints *void, codepointCount int) Font:
    return lib.LoadFontEx(fileName, fontSize, codepoints, codepointCount)
func LoadFontFromImage(image Image, key Color, firstChar int) Font:
    return lib.LoadFontFromImage(image, key, firstChar)
func LoadFontFromMemory(fileType *void, fileData *void, dataSize int, fontSize int, codepoints *void, codepointCount int) Font:
    return lib.LoadFontFromMemory(fileType, fileData, dataSize, fontSize, codepoints, codepointCount)
func IsFontReady(font Font) bool:
    return lib.IsFontReady(font)
func LoadFontData(fileData *void, dataSize int, fontSize int, codepoints *void, codepointCount int, param5 int) *void:
    return lib.LoadFontData(fileData, dataSize, fontSize, codepoints, codepointCount, param5)
func GenImageFontAtlas(glyphs *void, glyphRecs *void, glyphCount int, fontSize int, padding int, packMethod int) Image:
    return lib.GenImageFontAtlas(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod)
func UnloadFontData(glyphs *void, glyphCount int) void:
    return lib.UnloadFontData(glyphs, glyphCount)
func UnloadFont(font Font) void:
    return lib.UnloadFont(font)
func ExportFontAsCode(font Font, fileName *void) bool:
    return lib.ExportFontAsCode(font, fileName)
func DrawFPS(posX int, posY int) void:
    return lib.DrawFPS(posX, posY)
--func DrawText(text *void, posX int, posY int, fontSize int, color Color) void
func DrawTextEx(font Font, text *void, position Vector2, fontSize float, spacing float, tint Color) void:
    return lib.DrawTextEx(font, text, position, fontSize, spacing, tint)
func DrawTextPro(font Font, text *void, position Vector2, origin Vector2, rotation float, fontSize float, spacing float, tint Color) void:
    return lib.DrawTextPro(font, text, position, origin, rotation, fontSize, spacing, tint)
func DrawTextCodepoint(font Font, codepoint int, position Vector2, fontSize float, tint Color) void:
    return lib.DrawTextCodepoint(font, codepoint, position, fontSize, tint)
func DrawTextCodepoints(font Font, codepoints *void, codepointCount int, position Vector2, fontSize float, spacing float, tint Color) void:
    return lib.DrawTextCodepoints(font, codepoints, codepointCount, position, fontSize, spacing, tint)
func SetTextLineSpacing(spacing int) void:
    return lib.SetTextLineSpacing(spacing)
--func MeasureText(text *void, fontSize int) int
func MeasureTextEx(font Font, text *void, fontSize float, spacing float) Vector2:
    return lib.MeasureTextEx(font, text, fontSize, spacing)
func GetGlyphIndex(font Font, codepoint int) int:
    return lib.GetGlyphIndex(font, codepoint)
func GetGlyphInfo(font Font, codepoint int) GlyphInfo:
    return lib.GetGlyphInfo(font, codepoint)
func GetGlyphAtlasRec(font Font, codepoint int) Rectangle:
    return lib.GetGlyphAtlasRec(font, codepoint)
func LoadUTF8(codepoints *void, length int) *void:
    return lib.LoadUTF8(codepoints, length)
func UnloadUTF8(text *void) void:
    return lib.UnloadUTF8(text)
func LoadCodepoints(text *void, count *void) *void:
    return lib.LoadCodepoints(text, count)
func UnloadCodepoints(codepoints *void) void:
    return lib.UnloadCodepoints(codepoints)
func GetCodepointCount(text *void) int:
    return lib.GetCodepointCount(text)
func GetCodepoint(text *void, codepointSize *void) int:
    return lib.GetCodepoint(text, codepointSize)
func GetCodepointNext(text *void, codepointSize *void) int:
    return lib.GetCodepointNext(text, codepointSize)
func GetCodepointPrevious(text *void, codepointSize *void) int:
    return lib.GetCodepointPrevious(text, codepointSize)
func CodepointToUTF8(codepoint int, utf8Size *void) *void:
    return lib.CodepointToUTF8(codepoint, utf8Size)
func TextCopy(dst *void, src *void) int:
    return lib.TextCopy(dst, src)
func TextIsEqual(text1 *void, text2 *void) bool:
    return lib.TextIsEqual(text1, text2)
func TextLength(text *void) int:
    return lib.TextLength(text)
func TextFormat(text *void) *void:
    return lib.TextFormat(text)
func TextSubtext(text *void, position int, length int) *void:
    return lib.TextSubtext(text, position, length)
func TextReplace(text *void, replace *void, by *void) *void:
    return lib.TextReplace(text, replace, by)
func TextInsert(text *void, insert *void, position int) *void:
    return lib.TextInsert(text, insert, position)
func TextJoin(textList *void, count int, delimiter *void) *void:
    return lib.TextJoin(textList, count, delimiter)
func TextSplit(text *void, delimiter int, count *void) *void:
    return lib.TextSplit(text, delimiter, count)
func TextAppend(text *void, append *void, position *void) void:
    return lib.TextAppend(text, append, position)
func TextFindIndex(text *void, find *void) int:
    return lib.TextFindIndex(text, find)
func TextToUpper(text *void) *void:
    return lib.TextToUpper(text)
func TextToLower(text *void) *void:
    return lib.TextToLower(text)
func TextToPascal(text *void) *void:
    return lib.TextToPascal(text)
func TextToInteger(text *void) int:
    return lib.TextToInteger(text)
func DrawLine3D(startPos Vector3, endPos Vector3, color Color) void:
    return lib.DrawLine3D(startPos, endPos, color)
func DrawPoint3D(position Vector3, color Color) void:
    return lib.DrawPoint3D(position, color)
func DrawCircle3D(center Vector3, radius float, rotationAxis Vector3, rotationAngle float, color Color) void:
    return lib.DrawCircle3D(center, radius, rotationAxis, rotationAngle, color)
func DrawTriangle3D(v1 Vector3, v2 Vector3, v3 Vector3, color Color) void:
    return lib.DrawTriangle3D(v1, v2, v3, color)
func DrawTriangleStrip3D(points *void, pointCount int, color Color) void:
    return lib.DrawTriangleStrip3D(points, pointCount, color)
func DrawCube(position Vector3, width float, height float, length float, color Color) void:
    return lib.DrawCube(position, width, height, length, color)
func DrawCubeV(position Vector3, size Vector3, color Color) void:
    return lib.DrawCubeV(position, size, color)
func DrawCubeWires(position Vector3, width float, height float, length float, color Color) void:
    return lib.DrawCubeWires(position, width, height, length, color)
func DrawCubeWiresV(position Vector3, size Vector3, color Color) void:
    return lib.DrawCubeWiresV(position, size, color)
func DrawSphere(centerPos Vector3, radius float, color Color) void:
    return lib.DrawSphere(centerPos, radius, color)
func DrawSphereEx(centerPos Vector3, radius float, rings int, slices int, color Color) void:
    return lib.DrawSphereEx(centerPos, radius, rings, slices, color)
func DrawSphereWires(centerPos Vector3, radius float, rings int, slices int, color Color) void:
    return lib.DrawSphereWires(centerPos, radius, rings, slices, color)
func DrawCylinder(position Vector3, radiusTop float, radiusBottom float, height float, slices int, color Color) void:
    return lib.DrawCylinder(position, radiusTop, radiusBottom, height, slices, color)
func DrawCylinderEx(startPos Vector3, endPos Vector3, startRadius float, endRadius float, sides int, color Color) void:
    return lib.DrawCylinderEx(startPos, endPos, startRadius, endRadius, sides, color)
func DrawCylinderWires(position Vector3, radiusTop float, radiusBottom float, height float, slices int, color Color) void:
    return lib.DrawCylinderWires(position, radiusTop, radiusBottom, height, slices, color)
func DrawCylinderWiresEx(startPos Vector3, endPos Vector3, startRadius float, endRadius float, sides int, color Color) void:
    return lib.DrawCylinderWiresEx(startPos, endPos, startRadius, endRadius, sides, color)
func DrawCapsule(startPos Vector3, endPos Vector3, radius float, slices int, rings int, color Color) void:
    return lib.DrawCapsule(startPos, endPos, radius, slices, rings, color)
func DrawCapsuleWires(startPos Vector3, endPos Vector3, radius float, slices int, rings int, color Color) void:
    return lib.DrawCapsuleWires(startPos, endPos, radius, slices, rings, color)
func DrawPlane(centerPos Vector3, size Vector2, color Color) void:
    return lib.DrawPlane(centerPos, size, color)
func DrawRay(ray Ray, color Color) void:
    return lib.DrawRay(ray, color)
func DrawGrid(slices int, spacing float) void:
    return lib.DrawGrid(slices, spacing)
func LoadModel(fileName *void) Model:
    return lib.LoadModel(fileName)
func LoadModelFromMesh(mesh Mesh) Model:
    return lib.LoadModelFromMesh(mesh)
func IsModelReady(model Model) bool:
    return lib.IsModelReady(model)
func UnloadModel(model Model) void:
    return lib.UnloadModel(model)
func GetModelBoundingBox(model Model) BoundingBox:
    return lib.GetModelBoundingBox(model)
func DrawModel(model Model, position Vector3, scale float, tint Color) void:
    return lib.DrawModel(model, position, scale, tint)
func DrawModelEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float, scale Vector3, tint Color) void:
    return lib.DrawModelEx(model, position, rotationAxis, rotationAngle, scale, tint)
func DrawModelWires(model Model, position Vector3, scale float, tint Color) void:
    return lib.DrawModelWires(model, position, scale, tint)
func DrawModelWiresEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float, scale Vector3, tint Color) void:
    return lib.DrawModelWiresEx(model, position, rotationAxis, rotationAngle, scale, tint)
func DrawBoundingBox(box BoundingBox, color Color) void:
    return lib.DrawBoundingBox(box, color)
func DrawBillboard(camera Camera, texture Texture2D, position Vector3, size float, tint Color) void:
    return lib.DrawBillboard(camera, texture, position, size, tint)
func DrawBillboardRec(camera Camera, texture Texture2D, source Rectangle, position Vector3, size Vector2, tint Color) void:
    return lib.DrawBillboardRec(camera, texture, source, position, size, tint)
func DrawBillboardPro(camera Camera, texture Texture2D, source Rectangle, position Vector3, up Vector3, size Vector2, origin Vector2, rotation float, tint Color) void:
    return lib.DrawBillboardPro(camera, texture, source, position, up, size, origin, rotation, tint)
func UploadMesh(mesh *void, dynamic bool) void:
    return lib.UploadMesh(mesh, dynamic)
func UpdateMeshBuffer(mesh Mesh, index int, data *void, dataSize int, offset int) void:
    return lib.UpdateMeshBuffer(mesh, index, data, dataSize, offset)
func UnloadMesh(mesh Mesh) void:
    return lib.UnloadMesh(mesh)
func DrawMesh(mesh Mesh, material Material, transform Matrix) void:
    return lib.DrawMesh(mesh, material, transform)
func DrawMeshInstanced(mesh Mesh, material Material, transforms *void, instances int) void:
    return lib.DrawMeshInstanced(mesh, material, transforms, instances)
func ExportMesh(mesh Mesh, fileName *void) bool:
    return lib.ExportMesh(mesh, fileName)
func GetMeshBoundingBox(mesh Mesh) BoundingBox:
    return lib.GetMeshBoundingBox(mesh)
func GenMeshTangents(mesh *void) void:
    return lib.GenMeshTangents(mesh)
func GenMeshPoly(sides int, radius float) Mesh:
    return lib.GenMeshPoly(sides, radius)
func GenMeshPlane(width float, length float, resX int, resZ int) Mesh:
    return lib.GenMeshPlane(width, length, resX, resZ)
func GenMeshCube(width float, height float, length float) Mesh:
    return lib.GenMeshCube(width, height, length)
func GenMeshSphere(radius float, rings int, slices int) Mesh:
    return lib.GenMeshSphere(radius, rings, slices)
func GenMeshHemiSphere(radius float, rings int, slices int) Mesh:
    return lib.GenMeshHemiSphere(radius, rings, slices)
func GenMeshCylinder(radius float, height float, slices int) Mesh:
    return lib.GenMeshCylinder(radius, height, slices)
func GenMeshCone(radius float, height float, slices int) Mesh:
    return lib.GenMeshCone(radius, height, slices)
func GenMeshTorus(radius float, size float, radSeg int, sides int) Mesh:
    return lib.GenMeshTorus(radius, size, radSeg, sides)
func GenMeshKnot(radius float, size float, radSeg int, sides int) Mesh:
    return lib.GenMeshKnot(radius, size, radSeg, sides)
func GenMeshHeightmap(heightmap Image, size Vector3) Mesh:
    return lib.GenMeshHeightmap(heightmap, size)
func GenMeshCubicmap(cubicmap Image, cubeSize Vector3) Mesh:
    return lib.GenMeshCubicmap(cubicmap, cubeSize)
func LoadMaterials(fileName *void, materialCount *void) *void:
    return lib.LoadMaterials(fileName, materialCount)
func LoadMaterialDefault() Material:
    return lib.LoadMaterialDefault()
func IsMaterialReady(material Material) bool:
    return lib.IsMaterialReady(material)
func UnloadMaterial(material Material) void:
    return lib.UnloadMaterial(material)
func SetMaterialTexture(material *void, mapType int, texture Texture2D) void:
    return lib.SetMaterialTexture(material, mapType, texture)
func SetModelMeshMaterial(model *void, meshId int, materialId int) void:
    return lib.SetModelMeshMaterial(model, meshId, materialId)
func LoadModelAnimations(fileName *void, animCount *void) *void:
    return lib.LoadModelAnimations(fileName, animCount)
func UpdateModelAnimation(model Model, anim ModelAnimation, frame int) void:
    return lib.UpdateModelAnimation(model, anim, frame)
func UnloadModelAnimation(anim ModelAnimation) void:
    return lib.UnloadModelAnimation(anim)
func UnloadModelAnimations(animations *void, animCount int) void:
    return lib.UnloadModelAnimations(animations, animCount)
func IsModelAnimationValid(model Model, anim ModelAnimation) bool:
    return lib.IsModelAnimationValid(model, anim)
func CheckCollisionSpheres(center1 Vector3, radius1 float, center2 Vector3, radius2 float) bool:
    return lib.CheckCollisionSpheres(center1, radius1, center2, radius2)
func CheckCollisionBoxes(box1 BoundingBox, box2 BoundingBox) bool:
    return lib.CheckCollisionBoxes(box1, box2)
func CheckCollisionBoxSphere(box BoundingBox, center Vector3, radius float) bool:
    return lib.CheckCollisionBoxSphere(box, center, radius)
func GetRayCollisionSphere(ray Ray, center Vector3, radius float) RayCollision:
    return lib.GetRayCollisionSphere(ray, center, radius)
func GetRayCollisionBox(ray Ray, box BoundingBox) RayCollision:
    return lib.GetRayCollisionBox(ray, box)
func GetRayCollisionMesh(ray Ray, mesh Mesh, transform Matrix) RayCollision:
    return lib.GetRayCollisionMesh(ray, mesh, transform)
func GetRayCollisionTriangle(ray Ray, p1 Vector3, p2 Vector3, p3 Vector3) RayCollision:
    return lib.GetRayCollisionTriangle(ray, p1, p2, p3)
func GetRayCollisionQuad(ray Ray, p1 Vector3, p2 Vector3, p3 Vector3, p4 Vector3) RayCollision:
    return lib.GetRayCollisionQuad(ray, p1, p2, p3, p4)
type AudioCallback -> *void

func InitAudioDevice() void:
    return lib.InitAudioDevice()
func CloseAudioDevice() void:
    return lib.CloseAudioDevice()
func IsAudioDeviceReady() bool:
    return lib.IsAudioDeviceReady()
func SetMasterVolume(volume float) void:
    return lib.SetMasterVolume(volume)
func GetMasterVolume() float:
    return lib.GetMasterVolume()
func LoadWave(fileName *void) Wave:
    return lib.LoadWave(fileName)
func LoadWaveFromMemory(fileType *void, fileData *void, dataSize int) Wave:
    return lib.LoadWaveFromMemory(fileType, fileData, dataSize)
func IsWaveReady(wave Wave) bool:
    return lib.IsWaveReady(wave)
func LoadSound(fileName *void) Sound:
    return lib.LoadSound(fileName)
func LoadSoundFromWave(wave Wave) Sound:
    return lib.LoadSoundFromWave(wave)
func LoadSoundAlias(source Sound) Sound:
    return lib.LoadSoundAlias(source)
func IsSoundReady(sound Sound) bool:
    return lib.IsSoundReady(sound)
func UpdateSound(sound Sound, data *void, sampleCount int) void:
    return lib.UpdateSound(sound, data, sampleCount)
func UnloadWave(wave Wave) void:
    return lib.UnloadWave(wave)
func UnloadSound(sound Sound) void:
    return lib.UnloadSound(sound)
func UnloadSoundAlias(alias Sound) void:
    return lib.UnloadSoundAlias(alias)
func ExportWave(wave Wave, fileName *void) bool:
    return lib.ExportWave(wave, fileName)
func ExportWaveAsCode(wave Wave, fileName *void) bool:
    return lib.ExportWaveAsCode(wave, fileName)
func PlaySound(sound Sound) void:
    return lib.PlaySound(sound)
func StopSound(sound Sound) void:
    return lib.StopSound(sound)
func PauseSound(sound Sound) void:
    return lib.PauseSound(sound)
func ResumeSound(sound Sound) void:
    return lib.ResumeSound(sound)
func IsSoundPlaying(sound Sound) bool:
    return lib.IsSoundPlaying(sound)
func SetSoundVolume(sound Sound, volume float) void:
    return lib.SetSoundVolume(sound, volume)
func SetSoundPitch(sound Sound, pitch float) void:
    return lib.SetSoundPitch(sound, pitch)
func SetSoundPan(sound Sound, pan float) void:
    return lib.SetSoundPan(sound, pan)
func WaveCopy(wave Wave) Wave:
    return lib.WaveCopy(wave)
func WaveCrop(wave *void, initSample int, finalSample int) void:
    return lib.WaveCrop(wave, initSample, finalSample)
func WaveFormat(wave *void, sampleRate int, sampleSize int, channels int) void:
    return lib.WaveFormat(wave, sampleRate, sampleSize, channels)
func LoadWaveSamples(wave Wave) *void:
    return lib.LoadWaveSamples(wave)
func UnloadWaveSamples(samples *void) void:
    return lib.UnloadWaveSamples(samples)
func LoadMusicStream(fileName *void) Music:
    return lib.LoadMusicStream(fileName)
func LoadMusicStreamFromMemory(fileType *void, data *void, dataSize int) Music:
    return lib.LoadMusicStreamFromMemory(fileType, data, dataSize)
func IsMusicReady(music Music) bool:
    return lib.IsMusicReady(music)
func UnloadMusicStream(music Music) void:
    return lib.UnloadMusicStream(music)
func PlayMusicStream(music Music) void:
    return lib.PlayMusicStream(music)
func IsMusicStreamPlaying(music Music) bool:
    return lib.IsMusicStreamPlaying(music)
func UpdateMusicStream(music Music) void:
    return lib.UpdateMusicStream(music)
func StopMusicStream(music Music) void:
    return lib.StopMusicStream(music)
func PauseMusicStream(music Music) void:
    return lib.PauseMusicStream(music)
func ResumeMusicStream(music Music) void:
    return lib.ResumeMusicStream(music)
func SeekMusicStream(music Music, position float) void:
    return lib.SeekMusicStream(music, position)
func SetMusicVolume(music Music, volume float) void:
    return lib.SetMusicVolume(music, volume)
func SetMusicPitch(music Music, pitch float) void:
    return lib.SetMusicPitch(music, pitch)
func SetMusicPan(music Music, pan float) void:
    return lib.SetMusicPan(music, pan)
func GetMusicTimeLength(music Music) float:
    return lib.GetMusicTimeLength(music)
func GetMusicTimePlayed(music Music) float:
    return lib.GetMusicTimePlayed(music)
func LoadAudioStream(sampleRate int, sampleSize int, channels int) AudioStream:
    return lib.LoadAudioStream(sampleRate, sampleSize, channels)
func IsAudioStreamReady(stream AudioStream) bool:
    return lib.IsAudioStreamReady(stream)
func UnloadAudioStream(stream AudioStream) void:
    return lib.UnloadAudioStream(stream)
func UpdateAudioStream(stream AudioStream, data *void, frameCount int) void:
    return lib.UpdateAudioStream(stream, data, frameCount)
func IsAudioStreamProcessed(stream AudioStream) bool:
    return lib.IsAudioStreamProcessed(stream)
func PlayAudioStream(stream AudioStream) void:
    return lib.PlayAudioStream(stream)
func PauseAudioStream(stream AudioStream) void:
    return lib.PauseAudioStream(stream)
func ResumeAudioStream(stream AudioStream) void:
    return lib.ResumeAudioStream(stream)
func IsAudioStreamPlaying(stream AudioStream) bool:
    return lib.IsAudioStreamPlaying(stream)
func StopAudioStream(stream AudioStream) void:
    return lib.StopAudioStream(stream)
func SetAudioStreamVolume(stream AudioStream, volume float) void:
    return lib.SetAudioStreamVolume(stream, volume)
func SetAudioStreamPitch(stream AudioStream, pitch float) void:
    return lib.SetAudioStreamPitch(stream, pitch)
func SetAudioStreamPan(stream AudioStream, pan float) void:
    return lib.SetAudioStreamPan(stream, pan)
func SetAudioStreamBufferSizeDefault(size int) void:
    return lib.SetAudioStreamBufferSizeDefault(size)
func SetAudioStreamCallback(stream AudioStream, callback *void) void:
    return lib.SetAudioStreamCallback(stream, callback)
func AttachAudioStreamProcessor(stream AudioStream, processor *void) void:
    return lib.AttachAudioStreamProcessor(stream, processor)
func DetachAudioStreamProcessor(stream AudioStream, processor *void) void:
    return lib.DetachAudioStreamProcessor(stream, processor)
func AttachAudioMixedProcessor(processor *void) void:
    return lib.AttachAudioMixedProcessor(processor)
func DetachAudioMixedProcessor(processor *void) void:
    return lib.DetachAudioMixedProcessor(processor)

use os
let .ffi = false
let .lib = load()
func load() dyn:
    ffi = os.newFFI()
    ffi.cbind(Vector2_S, {symbol.float, symbol.float})
    ffi.cbind(Vector3_S, {symbol.float, symbol.float, symbol.float})
    ffi.cbind(Vector4_S, {symbol.float, symbol.float, symbol.float, symbol.float})
    ffi.cbind(Matrix_S, {symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float})
    ffi.cbind(Color_S, {symbol.uchar, symbol.uchar, symbol.uchar, symbol.uchar})
    ffi.cbind(Rectangle_S, {symbol.float, symbol.float, symbol.float, symbol.float})
    ffi.cbind(Image_S, {symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int})
    ffi.cbind(Texture_S, {symbol.uint, symbol.int, symbol.int, symbol.int, symbol.int})
    ffi.cbind(RenderTexture_S, {symbol.uint, Texture, Texture})
    ffi.cbind(NPatchInfo_S, {Rectangle, symbol.int, symbol.int, symbol.int, symbol.int, symbol.int})
    ffi.cbind(GlyphInfo_S, {symbol.int, symbol.int, symbol.int, symbol.int, Image})
    ffi.cbind(Font_S, {symbol.int, symbol.int, symbol.int, Texture2D, symbol.voidPtr, symbol.voidPtr})
    ffi.cbind(Camera3D_S, {Vector3, Vector3, Vector3, symbol.float, symbol.int})
    ffi.cbind(Camera2D_S, {Vector2, Vector2, symbol.float, symbol.float})
    ffi.cbind(Mesh_S, {symbol.int, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr})
    ffi.cbind(Shader_S, {symbol.uint, symbol.voidPtr})
    ffi.cbind(MaterialMap_S, {Texture2D, Color, symbol.float})
    ffi.cbind(Material_S, {Shader, symbol.voidPtr, os.CArray{n=4, elem=symbol.float}})
    ffi.cbind(Transform_S, {Vector3, Quaternion, Vector3})
    ffi.cbind(BoneInfo_S, {os.CArray{n=32, elem=symbol.char}, symbol.int})
    ffi.cbind(Model_S, {Matrix, symbol.int, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.voidPtr})
    ffi.cbind(ModelAnimation_S, {symbol.int, symbol.int, symbol.voidPtr, symbol.voidPtr, os.CArray{n=32, elem=symbol.char}})
    ffi.cbind(Ray_S, {Vector3, Vector3})
    ffi.cbind(RayCollision_S, {symbol.bool, symbol.float, Vector3, Vector3})
    ffi.cbind(BoundingBox_S, {Vector3, Vector3})
    ffi.cbind(Wave_S, {symbol.uint, symbol.uint, symbol.uint, symbol.uint, symbol.voidPtr})
    ffi.cbind(rAudioBuffer_S, {_})
    ffi.cbind(rAudioProcessor_S, {_})
    ffi.cbind(AudioStream_S, {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.uint, symbol.uint})
    ffi.cbind(Sound_S, {AudioStream, symbol.uint})
    ffi.cbind(Music_S, {AudioStream, symbol.uint, symbol.bool, symbol.int, symbol.voidPtr})
    ffi.cbind(VrDeviceInfo_S, {symbol.int, symbol.int, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, symbol.float, os.CArray{n=4, elem=symbol.float}, os.CArray{n=4, elem=symbol.float}})
    ffi.cbind(VrStereoConfig_S, {os.CArray{n=2, elem=Matrix}, os.CArray{n=2, elem=Matrix}, os.CArray{n=2, elem=symbol.float}, os.CArray{n=2, elem=symbol.float}, os.CArray{n=2, elem=symbol.float}, os.CArray{n=2, elem=symbol.float}, os.CArray{n=2, elem=symbol.float}, os.CArray{n=2, elem=symbol.float}})
    ffi.cbind(FilePathList_S, {symbol.uint, symbol.uint, symbol.voidPtr})
    ffi.cbind(AutomationEvent_S, {symbol.uint, symbol.uint, os.CArray{n=4, elem=symbol.int}})
    ffi.cbind(AutomationEventList_S, {symbol.uint, symbol.uint, symbol.voidPtr})
    ffi.cfunc('InitWindow', {symbol.int, symbol.int, symbol.voidPtr}, symbol.void)
    ffi.cfunc('CloseWindow', {_}, symbol.void)
    ffi.cfunc('WindowShouldClose', {_}, symbol.bool)
    ffi.cfunc('IsWindowReady', {_}, symbol.bool)
    ffi.cfunc('IsWindowFullscreen', {_}, symbol.bool)
    ffi.cfunc('IsWindowHidden', {_}, symbol.bool)
    ffi.cfunc('IsWindowMinimized', {_}, symbol.bool)
    ffi.cfunc('IsWindowMaximized', {_}, symbol.bool)
    ffi.cfunc('IsWindowFocused', {_}, symbol.bool)
    ffi.cfunc('IsWindowResized', {_}, symbol.bool)
    ffi.cfunc('IsWindowState', {symbol.uint}, symbol.bool)
    ffi.cfunc('SetWindowState', {symbol.uint}, symbol.void)
    ffi.cfunc('ClearWindowState', {symbol.uint}, symbol.void)
    ffi.cfunc('ToggleFullscreen', {_}, symbol.void)
    ffi.cfunc('ToggleBorderlessWindowed', {_}, symbol.void)
    ffi.cfunc('MaximizeWindow', {_}, symbol.void)
    ffi.cfunc('MinimizeWindow', {_}, symbol.void)
    ffi.cfunc('RestoreWindow', {_}, symbol.void)
    ffi.cfunc('SetWindowIcon', {Image}, symbol.void)
    ffi.cfunc('SetWindowIcons', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('SetWindowTitle', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetWindowPosition', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetWindowMonitor', {symbol.int}, symbol.void)
    ffi.cfunc('SetWindowMinSize', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetWindowMaxSize', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetWindowSize', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetWindowOpacity', {symbol.float}, symbol.void)
    ffi.cfunc('SetWindowFocused', {_}, symbol.void)
    ffi.cfunc('GetWindowHandle', {_}, symbol.voidPtr)
    ffi.cfunc('GetScreenWidth', {_}, symbol.int)
    ffi.cfunc('GetScreenHeight', {_}, symbol.int)
    ffi.cfunc('GetRenderWidth', {_}, symbol.int)
    ffi.cfunc('GetRenderHeight', {_}, symbol.int)
    ffi.cfunc('GetMonitorCount', {_}, symbol.int)
    ffi.cfunc('GetCurrentMonitor', {_}, symbol.int)
    ffi.cfunc('GetMonitorPosition', {symbol.int}, Vector2)
    ffi.cfunc('GetMonitorWidth', {symbol.int}, symbol.int)
    ffi.cfunc('GetMonitorHeight', {symbol.int}, symbol.int)
    ffi.cfunc('GetMonitorPhysicalWidth', {symbol.int}, symbol.int)
    ffi.cfunc('GetMonitorPhysicalHeight', {symbol.int}, symbol.int)
    ffi.cfunc('GetMonitorRefreshRate', {symbol.int}, symbol.int)
    ffi.cfunc('GetWindowPosition', {_}, Vector2)
    ffi.cfunc('GetWindowScaleDPI', {_}, Vector2)
    ffi.cfunc('GetMonitorName', {symbol.int}, symbol.voidPtr)
    ffi.cfunc('SetClipboardText', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('GetClipboardText', {_}, symbol.voidPtr)
    ffi.cfunc('EnableEventWaiting', {_}, symbol.void)
    ffi.cfunc('DisableEventWaiting', {_}, symbol.void)
    ffi.cfunc('ShowCursor', {_}, symbol.void)
    ffi.cfunc('HideCursor', {_}, symbol.void)
    ffi.cfunc('IsCursorHidden', {_}, symbol.bool)
    ffi.cfunc('EnableCursor', {_}, symbol.void)
    ffi.cfunc('DisableCursor', {_}, symbol.void)
    ffi.cfunc('IsCursorOnScreen', {_}, symbol.bool)
    ffi.cfunc('ClearBackground', {Color}, symbol.void)
    ffi.cfunc('BeginDrawing', {_}, symbol.void)
    ffi.cfunc('EndDrawing', {_}, symbol.void)
    ffi.cfunc('BeginMode2D', {Camera2D}, symbol.void)
    ffi.cfunc('EndMode2D', {_}, symbol.void)
    ffi.cfunc('BeginMode3D', {Camera3D}, symbol.void)
    ffi.cfunc('EndMode3D', {_}, symbol.void)
    ffi.cfunc('BeginTextureMode', {RenderTexture2D}, symbol.void)
    ffi.cfunc('EndTextureMode', {_}, symbol.void)
    ffi.cfunc('BeginShaderMode', {Shader}, symbol.void)
    ffi.cfunc('EndShaderMode', {_}, symbol.void)
    ffi.cfunc('BeginBlendMode', {symbol.int}, symbol.void)
    ffi.cfunc('EndBlendMode', {_}, symbol.void)
    ffi.cfunc('BeginScissorMode', {symbol.int, symbol.int, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('EndScissorMode', {_}, symbol.void)
    ffi.cfunc('BeginVrStereoMode', {VrStereoConfig}, symbol.void)
    ffi.cfunc('EndVrStereoMode', {_}, symbol.void)
    ffi.cfunc('LoadVrStereoConfig', {VrDeviceInfo}, VrStereoConfig)
    ffi.cfunc('UnloadVrStereoConfig', {VrStereoConfig}, symbol.void)
    ffi.cfunc('LoadShader', {symbol.voidPtr, symbol.voidPtr}, Shader)
    ffi.cfunc('LoadShaderFromMemory', {symbol.voidPtr, symbol.voidPtr}, Shader)
    ffi.cfunc('IsShaderReady', {Shader}, symbol.bool)
    ffi.cfunc('GetShaderLocation', {Shader, symbol.voidPtr}, symbol.int)
    ffi.cfunc('GetShaderLocationAttrib', {Shader, symbol.voidPtr}, symbol.int)
    ffi.cfunc('SetShaderValue', {Shader, symbol.int, symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('SetShaderValueV', {Shader, symbol.int, symbol.voidPtr, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetShaderValueMatrix', {Shader, symbol.int, Matrix}, symbol.void)
    ffi.cfunc('SetShaderValueTexture', {Shader, symbol.int, Texture2D}, symbol.void)
    ffi.cfunc('UnloadShader', {Shader}, symbol.void)
    ffi.cfunc('GetMouseRay', {Vector2, Camera}, Ray)
    ffi.cfunc('GetCameraMatrix', {Camera}, Matrix)
    ffi.cfunc('GetCameraMatrix2D', {Camera2D}, Matrix)
    ffi.cfunc('GetWorldToScreen', {Vector3, Camera}, Vector2)
    ffi.cfunc('GetScreenToWorld2D', {Vector2, Camera2D}, Vector2)
    ffi.cfunc('GetWorldToScreenEx', {Vector3, Camera, symbol.int, symbol.int}, Vector2)
    ffi.cfunc('GetWorldToScreen2D', {Vector2, Camera2D}, Vector2)
    ffi.cfunc('SetTargetFPS', {symbol.int}, symbol.void)
    ffi.cfunc('GetFrameTime', {_}, symbol.float)
    ffi.cfunc('GetTime', {_}, symbol.double)
    ffi.cfunc('GetFPS', {_}, symbol.int)
    ffi.cfunc('SwapScreenBuffer', {_}, symbol.void)
    ffi.cfunc('PollInputEvents', {_}, symbol.void)
    ffi.cfunc('WaitTime', {symbol.double}, symbol.void)
    ffi.cfunc('SetRandomSeed', {symbol.uint}, symbol.void)
    ffi.cfunc('GetRandomValue', {symbol.int, symbol.int}, symbol.int)
    ffi.cfunc('LoadRandomSequence', {symbol.uint, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('UnloadRandomSequence', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('TakeScreenshot', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetConfigFlags', {symbol.uint}, symbol.void)
    ffi.cfunc('OpenURL', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('TraceLog', {symbol.int, symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetTraceLogLevel', {symbol.int}, symbol.void)
    ffi.cfunc('MemAlloc', {symbol.uint}, symbol.voidPtr)
    ffi.cfunc('MemRealloc', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('MemFree', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetTraceLogCallback', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetLoadFileDataCallback', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetSaveFileDataCallback', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetLoadFileTextCallback', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetSaveFileTextCallback', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LoadFileData', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('UnloadFileData', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SaveFileData', {symbol.voidPtr, symbol.voidPtr, symbol.int}, symbol.bool)
    ffi.cfunc('ExportDataAsCode', {symbol.voidPtr, symbol.int, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('LoadFileText', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('UnloadFileText', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SaveFileText', {symbol.voidPtr, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('FileExists', {symbol.voidPtr}, symbol.bool)
    ffi.cfunc('DirectoryExists', {symbol.voidPtr}, symbol.bool)
    ffi.cfunc('IsFileExtension', {symbol.voidPtr, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('GetFileLength', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('GetFileExtension', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('GetFileName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('GetFileNameWithoutExt', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('GetDirectoryPath', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('GetPrevDirectoryPath', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('GetWorkingDirectory', {_}, symbol.voidPtr)
    ffi.cfunc('GetApplicationDirectory', {_}, symbol.voidPtr)
    ffi.cfunc('ChangeDirectory', {symbol.voidPtr}, symbol.bool)
    ffi.cfunc('IsPathFile', {symbol.voidPtr}, symbol.bool)
    ffi.cfunc('LoadDirectoryFiles', {symbol.voidPtr}, FilePathList)
    ffi.cfunc('LoadDirectoryFilesEx', {symbol.voidPtr, symbol.voidPtr, symbol.bool}, FilePathList)
    ffi.cfunc('UnloadDirectoryFiles', {FilePathList}, symbol.void)
    ffi.cfunc('IsFileDropped', {_}, symbol.bool)
    ffi.cfunc('LoadDroppedFiles', {_}, FilePathList)
    ffi.cfunc('UnloadDroppedFiles', {FilePathList}, symbol.void)
    ffi.cfunc('GetFileModTime', {symbol.voidPtr}, symbol.long)
    ffi.cfunc('CompressData', {symbol.voidPtr, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('DecompressData', {symbol.voidPtr, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('EncodeDataBase64', {symbol.voidPtr, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('DecodeDataBase64', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LoadAutomationEventList', {symbol.voidPtr}, AutomationEventList)
    ffi.cfunc('UnloadAutomationEventList', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ExportAutomationEventList', {AutomationEventList, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('SetAutomationEventList', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetAutomationEventBaseFrame', {symbol.int}, symbol.void)
    ffi.cfunc('StartAutomationEventRecording', {_}, symbol.void)
    ffi.cfunc('StopAutomationEventRecording', {_}, symbol.void)
    ffi.cfunc('PlayAutomationEvent', {AutomationEvent}, symbol.void)
    ffi.cfunc('IsKeyPressed', {symbol.int}, symbol.bool)
    ffi.cfunc('IsKeyPressedRepeat', {symbol.int}, symbol.bool)
    ffi.cfunc('IsKeyDown', {symbol.int}, symbol.bool)
    ffi.cfunc('IsKeyReleased', {symbol.int}, symbol.bool)
    ffi.cfunc('IsKeyUp', {symbol.int}, symbol.bool)
    ffi.cfunc('GetKeyPressed', {_}, symbol.int)
    ffi.cfunc('GetCharPressed', {_}, symbol.int)
    ffi.cfunc('SetExitKey', {symbol.int}, symbol.void)
    ffi.cfunc('IsGamepadAvailable', {symbol.int}, symbol.bool)
    ffi.cfunc('GetGamepadName', {symbol.int}, symbol.voidPtr)
    ffi.cfunc('IsGamepadButtonPressed', {symbol.int, symbol.int}, symbol.bool)
    ffi.cfunc('IsGamepadButtonDown', {symbol.int, symbol.int}, symbol.bool)
    ffi.cfunc('IsGamepadButtonReleased', {symbol.int, symbol.int}, symbol.bool)
    ffi.cfunc('IsGamepadButtonUp', {symbol.int, symbol.int}, symbol.bool)
    ffi.cfunc('GetGamepadButtonPressed', {_}, symbol.int)
    ffi.cfunc('GetGamepadAxisCount', {symbol.int}, symbol.int)
    ffi.cfunc('GetGamepadAxisMovement', {symbol.int, symbol.int}, symbol.float)
    ffi.cfunc('SetGamepadMappings', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('IsMouseButtonPressed', {symbol.int}, symbol.bool)
    ffi.cfunc('IsMouseButtonDown', {symbol.int}, symbol.bool)
    ffi.cfunc('IsMouseButtonReleased', {symbol.int}, symbol.bool)
    ffi.cfunc('IsMouseButtonUp', {symbol.int}, symbol.bool)
    ffi.cfunc('GetMouseX', {_}, symbol.int)
    ffi.cfunc('GetMouseY', {_}, symbol.int)
    ffi.cfunc('GetMousePosition', {_}, Vector2)
    ffi.cfunc('GetMouseDelta', {_}, Vector2)
    ffi.cfunc('SetMousePosition', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetMouseOffset', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('SetMouseScale', {symbol.float, symbol.float}, symbol.void)
    ffi.cfunc('GetMouseWheelMove', {_}, symbol.float)
    ffi.cfunc('GetMouseWheelMoveV', {_}, Vector2)
    ffi.cfunc('SetMouseCursor', {symbol.int}, symbol.void)
    ffi.cfunc('GetTouchX', {_}, symbol.int)
    ffi.cfunc('GetTouchY', {_}, symbol.int)
    ffi.cfunc('GetTouchPosition', {symbol.int}, Vector2)
    ffi.cfunc('GetTouchPointId', {symbol.int}, symbol.int)
    ffi.cfunc('GetTouchPointCount', {_}, symbol.int)
    ffi.cfunc('SetGesturesEnabled', {symbol.uint}, symbol.void)
    ffi.cfunc('IsGestureDetected', {symbol.uint}, symbol.bool)
    ffi.cfunc('GetGestureDetected', {_}, symbol.int)
    ffi.cfunc('GetGestureHoldDuration', {_}, symbol.float)
    ffi.cfunc('GetGestureDragVector', {_}, Vector2)
    ffi.cfunc('GetGestureDragAngle', {_}, symbol.float)
    ffi.cfunc('GetGesturePinchVector', {_}, Vector2)
    ffi.cfunc('GetGesturePinchAngle', {_}, symbol.float)
    ffi.cfunc('UpdateCamera', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('UpdateCameraPro', {symbol.voidPtr, Vector3, Vector3, symbol.float}, symbol.void)
    ffi.cfunc('SetShapesTexture', {Texture2D, Rectangle}, symbol.void)
    ffi.cfunc('DrawPixel', {symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawPixelV', {Vector2, Color}, symbol.void)
    ffi.cfunc('DrawLine', {symbol.int, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawLineV', {Vector2, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawLineEx', {Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawLineStrip', {symbol.voidPtr, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawLineBezier', {Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawCircle', {symbol.int, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawCircleSector', {Vector2, symbol.float, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCircleSectorLines', {Vector2, symbol.float, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCircleGradient', {symbol.int, symbol.int, symbol.float, Color, Color}, symbol.void)
    ffi.cfunc('DrawCircleV', {Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawCircleLines', {symbol.int, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawCircleLinesV', {Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawEllipse', {symbol.int, symbol.int, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawEllipseLines', {symbol.int, symbol.int, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawRing', {Vector2, symbol.float, symbol.float, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawRingLines', {Vector2, symbol.float, symbol.float, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawRectangle', {symbol.int, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawRectangleV', {Vector2, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawRectangleRec', {Rectangle, Color}, symbol.void)
    ffi.cfunc('DrawRectanglePro', {Rectangle, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawRectangleGradientV', {symbol.int, symbol.int, symbol.int, symbol.int, Color, Color}, symbol.void)
    ffi.cfunc('DrawRectangleGradientH', {symbol.int, symbol.int, symbol.int, symbol.int, Color, Color}, symbol.void)
    ffi.cfunc('DrawRectangleGradientEx', {Rectangle, Color, Color, Color, Color}, symbol.void)
    ffi.cfunc('DrawRectangleLines', {symbol.int, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawRectangleLinesEx', {Rectangle, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawRectangleRounded', {Rectangle, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawRectangleRoundedLines', {Rectangle, symbol.float, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTriangle', {Vector2, Vector2, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawTriangleLines', {Vector2, Vector2, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawTriangleFan', {symbol.voidPtr, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawTriangleStrip', {symbol.voidPtr, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawPoly', {Vector2, symbol.int, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawPolyLines', {Vector2, symbol.int, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawPolyLinesEx', {Vector2, symbol.int, symbol.float, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineLinear', {symbol.voidPtr, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineBasis', {symbol.voidPtr, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineCatmullRom', {symbol.voidPtr, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineBezierQuadratic', {symbol.voidPtr, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineBezierCubic', {symbol.voidPtr, symbol.int, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineSegmentLinear', {Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineSegmentBasis', {Vector2, Vector2, Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineSegmentCatmullRom', {Vector2, Vector2, Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineSegmentBezierQuadratic', {Vector2, Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSplineSegmentBezierCubic', {Vector2, Vector2, Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('GetSplinePointLinear', {Vector2, Vector2, symbol.float}, Vector2)
    ffi.cfunc('GetSplinePointBasis', {Vector2, Vector2, Vector2, Vector2, symbol.float}, Vector2)
    ffi.cfunc('GetSplinePointCatmullRom', {Vector2, Vector2, Vector2, Vector2, symbol.float}, Vector2)
    ffi.cfunc('GetSplinePointBezierQuad', {Vector2, Vector2, Vector2, symbol.float}, Vector2)
    ffi.cfunc('GetSplinePointBezierCubic', {Vector2, Vector2, Vector2, Vector2, symbol.float}, Vector2)
    ffi.cfunc('CheckCollisionRecs', {Rectangle, Rectangle}, symbol.bool)
    ffi.cfunc('CheckCollisionCircles', {Vector2, symbol.float, Vector2, symbol.float}, symbol.bool)
    ffi.cfunc('CheckCollisionCircleRec', {Vector2, symbol.float, Rectangle}, symbol.bool)
    ffi.cfunc('CheckCollisionPointRec', {Vector2, Rectangle}, symbol.bool)
    ffi.cfunc('CheckCollisionPointCircle', {Vector2, Vector2, symbol.float}, symbol.bool)
    ffi.cfunc('CheckCollisionPointTriangle', {Vector2, Vector2, Vector2, Vector2}, symbol.bool)
    ffi.cfunc('CheckCollisionPointPoly', {Vector2, symbol.voidPtr, symbol.int}, symbol.bool)
    ffi.cfunc('CheckCollisionLines', {Vector2, Vector2, Vector2, Vector2, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('CheckCollisionPointLine', {Vector2, Vector2, Vector2, symbol.int}, symbol.bool)
    ffi.cfunc('GetCollisionRec', {Rectangle, Rectangle}, Rectangle)
    ffi.cfunc('LoadImage', {symbol.voidPtr}, Image)
    ffi.cfunc('LoadImageRaw', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int}, Image)
    ffi.cfunc('LoadImageSvg', {symbol.voidPtr, symbol.int, symbol.int}, Image)
    ffi.cfunc('LoadImageAnim', {symbol.voidPtr, symbol.voidPtr}, Image)
    ffi.cfunc('LoadImageFromMemory', {symbol.voidPtr, symbol.voidPtr, symbol.int}, Image)
    ffi.cfunc('LoadImageFromTexture', {Texture2D}, Image)
    ffi.cfunc('LoadImageFromScreen', {_}, Image)
    ffi.cfunc('IsImageReady', {Image}, symbol.bool)
    ffi.cfunc('UnloadImage', {Image}, symbol.void)
    ffi.cfunc('ExportImage', {Image, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('ExportImageToMemory', {Image, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('ExportImageAsCode', {Image, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('GenImageColor', {symbol.int, symbol.int, Color}, Image)
    ffi.cfunc('GenImageGradientLinear', {symbol.int, symbol.int, symbol.int, Color, Color}, Image)
    ffi.cfunc('GenImageGradientRadial', {symbol.int, symbol.int, symbol.float, Color, Color}, Image)
    ffi.cfunc('GenImageGradientSquare', {symbol.int, symbol.int, symbol.float, Color, Color}, Image)
    ffi.cfunc('GenImageChecked', {symbol.int, symbol.int, symbol.int, symbol.int, Color, Color}, Image)
    ffi.cfunc('GenImageWhiteNoise', {symbol.int, symbol.int, symbol.float}, Image)
    ffi.cfunc('GenImagePerlinNoise', {symbol.int, symbol.int, symbol.int, symbol.int, symbol.float}, Image)
    ffi.cfunc('GenImageCellular', {symbol.int, symbol.int, symbol.int}, Image)
    ffi.cfunc('GenImageText', {symbol.int, symbol.int, symbol.voidPtr}, Image)
    ffi.cfunc('ImageCopy', {Image}, Image)
    ffi.cfunc('ImageFromImage', {Image, Rectangle}, Image)
    ffi.cfunc('ImageText', {symbol.voidPtr, symbol.int, Color}, Image)
    ffi.cfunc('ImageTextEx', {Font, symbol.voidPtr, symbol.float, symbol.float, Color}, Image)
    ffi.cfunc('ImageFormat', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('ImageToPOT', {symbol.voidPtr, Color}, symbol.void)
    ffi.cfunc('ImageCrop', {symbol.voidPtr, Rectangle}, symbol.void)
    ffi.cfunc('ImageAlphaCrop', {symbol.voidPtr, symbol.float}, symbol.void)
    ffi.cfunc('ImageAlphaClear', {symbol.voidPtr, Color, symbol.float}, symbol.void)
    ffi.cfunc('ImageAlphaMask', {symbol.voidPtr, Image}, symbol.void)
    ffi.cfunc('ImageAlphaPremultiply', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageBlurGaussian', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('ImageResize', {symbol.voidPtr, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('ImageResizeNN', {symbol.voidPtr, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('ImageResizeCanvas', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageMipmaps', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageDither', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('ImageFlipVertical', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageFlipHorizontal', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageRotate', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('ImageRotateCW', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageRotateCCW', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageColorTint', {symbol.voidPtr, Color}, symbol.void)
    ffi.cfunc('ImageColorInvert', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageColorGrayscale', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('ImageColorContrast', {symbol.voidPtr, symbol.float}, symbol.void)
    ffi.cfunc('ImageColorBrightness', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('ImageColorReplace', {symbol.voidPtr, Color, Color}, symbol.void)
    ffi.cfunc('LoadImageColors', {Image}, symbol.voidPtr)
    ffi.cfunc('LoadImagePalette', {Image, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('UnloadImageColors', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('UnloadImagePalette', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('GetImageAlphaBorder', {Image, symbol.float}, Rectangle)
    ffi.cfunc('GetImageColor', {Image, symbol.int, symbol.int}, Color)
    ffi.cfunc('ImageClearBackground', {symbol.voidPtr, Color}, symbol.void)
    ffi.cfunc('ImageDrawPixel', {symbol.voidPtr, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawPixelV', {symbol.voidPtr, Vector2, Color}, symbol.void)
    ffi.cfunc('ImageDrawLine', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawLineV', {symbol.voidPtr, Vector2, Vector2, Color}, symbol.void)
    ffi.cfunc('ImageDrawCircle', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawCircleV', {symbol.voidPtr, Vector2, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawCircleLines', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawCircleLinesV', {symbol.voidPtr, Vector2, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawRectangle', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawRectangleV', {symbol.voidPtr, Vector2, Vector2, Color}, symbol.void)
    ffi.cfunc('ImageDrawRectangleRec', {symbol.voidPtr, Rectangle, Color}, symbol.void)
    ffi.cfunc('ImageDrawRectangleLines', {symbol.voidPtr, Rectangle, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDraw', {symbol.voidPtr, Image, Rectangle, Rectangle, Color}, symbol.void)
    ffi.cfunc('ImageDrawText', {symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('ImageDrawTextEx', {symbol.voidPtr, Font, symbol.voidPtr, Vector2, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('LoadTexture', {symbol.voidPtr}, Texture2D)
    ffi.cfunc('LoadTextureFromImage', {Image}, Texture2D)
    ffi.cfunc('LoadTextureCubemap', {Image, symbol.int}, TextureCubemap)
    ffi.cfunc('LoadRenderTexture', {symbol.int, symbol.int}, RenderTexture2D)
    ffi.cfunc('IsTextureReady', {Texture2D}, symbol.bool)
    ffi.cfunc('UnloadTexture', {Texture2D}, symbol.void)
    ffi.cfunc('IsRenderTextureReady', {RenderTexture2D}, symbol.bool)
    ffi.cfunc('UnloadRenderTexture', {RenderTexture2D}, symbol.void)
    ffi.cfunc('UpdateTexture', {Texture2D, symbol.voidPtr}, symbol.void)
    ffi.cfunc('UpdateTextureRec', {Texture2D, Rectangle, symbol.voidPtr}, symbol.void)
    ffi.cfunc('GenTextureMipmaps', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('SetTextureFilter', {Texture2D, symbol.int}, symbol.void)
    ffi.cfunc('SetTextureWrap', {Texture2D, symbol.int}, symbol.void)
    ffi.cfunc('DrawTexture', {Texture2D, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawTextureV', {Texture2D, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawTextureEx', {Texture2D, Vector2, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTextureRec', {Texture2D, Rectangle, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawTexturePro', {Texture2D, Rectangle, Rectangle, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTextureNPatch', {Texture2D, NPatchInfo, Rectangle, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('Fade', {Color, symbol.float}, Color)
    ffi.cfunc('ColorToInt', {Color}, symbol.int)
    ffi.cfunc('ColorNormalize', {Color}, Vector4)
    ffi.cfunc('ColorFromNormalized', {Vector4}, Color)
    ffi.cfunc('ColorToHSV', {Color}, Vector3)
    ffi.cfunc('ColorFromHSV', {symbol.float, symbol.float, symbol.float}, Color)
    ffi.cfunc('ColorTint', {Color, Color}, Color)
    ffi.cfunc('ColorBrightness', {Color, symbol.float}, Color)
    ffi.cfunc('ColorContrast', {Color, symbol.float}, Color)
    ffi.cfunc('ColorAlpha', {Color, symbol.float}, Color)
    ffi.cfunc('ColorAlphaBlend', {Color, Color, Color}, Color)
    ffi.cfunc('GetColor', {symbol.uint}, Color)
    ffi.cfunc('GetPixelColor', {symbol.voidPtr, symbol.int}, Color)
    ffi.cfunc('SetPixelColor', {symbol.voidPtr, Color, symbol.int}, symbol.void)
    ffi.cfunc('GetPixelDataSize', {symbol.int, symbol.int, symbol.int}, symbol.int)
    ffi.cfunc('GetFontDefault', {_}, Font)
    ffi.cfunc('LoadFont', {symbol.voidPtr}, Font)
    ffi.cfunc('LoadFontEx', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.int}, Font)
    ffi.cfunc('LoadFontFromImage', {Image, Color, symbol.int}, Font)
    ffi.cfunc('LoadFontFromMemory', {symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.int, symbol.voidPtr, symbol.int}, Font)
    ffi.cfunc('IsFontReady', {Font}, symbol.bool)
    ffi.cfunc('LoadFontData', {symbol.voidPtr, symbol.int, symbol.int, symbol.voidPtr, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('GenImageFontAtlas', {symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.int, symbol.int, symbol.int}, Image)
    ffi.cfunc('UnloadFontData', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('UnloadFont', {Font}, symbol.void)
    ffi.cfunc('ExportFontAsCode', {Font, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('DrawFPS', {symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('DrawText', {symbol.voidPtr, symbol.int, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawTextEx', {Font, symbol.voidPtr, Vector2, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTextPro', {Font, symbol.voidPtr, Vector2, Vector2, symbol.float, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTextCodepoint', {Font, symbol.int, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTextCodepoints', {Font, symbol.voidPtr, symbol.int, Vector2, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('SetTextLineSpacing', {symbol.int}, symbol.void)
    ffi.cfunc('MeasureText', {symbol.voidPtr, symbol.int}, symbol.int)
    ffi.cfunc('MeasureTextEx', {Font, symbol.voidPtr, symbol.float, symbol.float}, Vector2)
    ffi.cfunc('GetGlyphIndex', {Font, symbol.int}, symbol.int)
    ffi.cfunc('GetGlyphInfo', {Font, symbol.int}, GlyphInfo)
    ffi.cfunc('GetGlyphAtlasRec', {Font, symbol.int}, Rectangle)
    ffi.cfunc('LoadUTF8', {symbol.voidPtr, symbol.int}, symbol.voidPtr)
    ffi.cfunc('UnloadUTF8', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LoadCodepoints', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('UnloadCodepoints', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('GetCodepointCount', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('GetCodepoint', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('GetCodepointNext', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('GetCodepointPrevious', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('CodepointToUTF8', {symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextCopy', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('TextIsEqual', {symbol.voidPtr, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('TextLength', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('TextFormat', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextSubtext', {symbol.voidPtr, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('TextReplace', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextInsert', {symbol.voidPtr, symbol.voidPtr, symbol.int}, symbol.voidPtr)
    ffi.cfunc('TextJoin', {symbol.voidPtr, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextSplit', {symbol.voidPtr, symbol.char, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextAppend', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('TextFindIndex', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('TextToUpper', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextToLower', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextToPascal', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('TextToInteger', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('DrawLine3D', {Vector3, Vector3, Color}, symbol.void)
    ffi.cfunc('DrawPoint3D', {Vector3, Color}, symbol.void)
    ffi.cfunc('DrawCircle3D', {Vector3, symbol.float, Vector3, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawTriangle3D', {Vector3, Vector3, Vector3, Color}, symbol.void)
    ffi.cfunc('DrawTriangleStrip3D', {symbol.voidPtr, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCube', {Vector3, symbol.float, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawCubeV', {Vector3, Vector3, Color}, symbol.void)
    ffi.cfunc('DrawCubeWires', {Vector3, symbol.float, symbol.float, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawCubeWiresV', {Vector3, Vector3, Color}, symbol.void)
    ffi.cfunc('DrawSphere', {Vector3, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawSphereEx', {Vector3, symbol.float, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawSphereWires', {Vector3, symbol.float, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCylinder', {Vector3, symbol.float, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCylinderEx', {Vector3, Vector3, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCylinderWires', {Vector3, symbol.float, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCylinderWiresEx', {Vector3, Vector3, symbol.float, symbol.float, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCapsule', {Vector3, Vector3, symbol.float, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawCapsuleWires', {Vector3, Vector3, symbol.float, symbol.int, symbol.int, Color}, symbol.void)
    ffi.cfunc('DrawPlane', {Vector3, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawRay', {Ray, Color}, symbol.void)
    ffi.cfunc('DrawGrid', {symbol.int, symbol.float}, symbol.void)
    ffi.cfunc('LoadModel', {symbol.voidPtr}, Model)
    ffi.cfunc('LoadModelFromMesh', {Mesh}, Model)
    ffi.cfunc('IsModelReady', {Model}, symbol.bool)
    ffi.cfunc('UnloadModel', {Model}, symbol.void)
    ffi.cfunc('GetModelBoundingBox', {Model}, BoundingBox)
    ffi.cfunc('DrawModel', {Model, Vector3, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawModelEx', {Model, Vector3, Vector3, symbol.float, Vector3, Color}, symbol.void)
    ffi.cfunc('DrawModelWires', {Model, Vector3, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawModelWiresEx', {Model, Vector3, Vector3, symbol.float, Vector3, Color}, symbol.void)
    ffi.cfunc('DrawBoundingBox', {BoundingBox, Color}, symbol.void)
    ffi.cfunc('DrawBillboard', {Camera, Texture2D, Vector3, symbol.float, Color}, symbol.void)
    ffi.cfunc('DrawBillboardRec', {Camera, Texture2D, Rectangle, Vector3, Vector2, Color}, symbol.void)
    ffi.cfunc('DrawBillboardPro', {Camera, Texture2D, Rectangle, Vector3, Vector3, Vector2, Vector2, symbol.float, Color}, symbol.void)
    ffi.cfunc('UploadMesh', {symbol.voidPtr, symbol.bool}, symbol.void)
    ffi.cfunc('UpdateMeshBuffer', {Mesh, symbol.int, symbol.voidPtr, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('UnloadMesh', {Mesh}, symbol.void)
    ffi.cfunc('DrawMesh', {Mesh, Material, Matrix}, symbol.void)
    ffi.cfunc('DrawMeshInstanced', {Mesh, Material, symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('ExportMesh', {Mesh, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('GetMeshBoundingBox', {Mesh}, BoundingBox)
    ffi.cfunc('GenMeshTangents', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('GenMeshPoly', {symbol.int, symbol.float}, Mesh)
    ffi.cfunc('GenMeshPlane', {symbol.float, symbol.float, symbol.int, symbol.int}, Mesh)
    ffi.cfunc('GenMeshCube', {symbol.float, symbol.float, symbol.float}, Mesh)
    ffi.cfunc('GenMeshSphere', {symbol.float, symbol.int, symbol.int}, Mesh)
    ffi.cfunc('GenMeshHemiSphere', {symbol.float, symbol.int, symbol.int}, Mesh)
    ffi.cfunc('GenMeshCylinder', {symbol.float, symbol.float, symbol.int}, Mesh)
    ffi.cfunc('GenMeshCone', {symbol.float, symbol.float, symbol.int}, Mesh)
    ffi.cfunc('GenMeshTorus', {symbol.float, symbol.float, symbol.int, symbol.int}, Mesh)
    ffi.cfunc('GenMeshKnot', {symbol.float, symbol.float, symbol.int, symbol.int}, Mesh)
    ffi.cfunc('GenMeshHeightmap', {Image, Vector3}, Mesh)
    ffi.cfunc('GenMeshCubicmap', {Image, Vector3}, Mesh)
    ffi.cfunc('LoadMaterials', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LoadMaterialDefault', {_}, Material)
    ffi.cfunc('IsMaterialReady', {Material}, symbol.bool)
    ffi.cfunc('UnloadMaterial', {Material}, symbol.void)
    ffi.cfunc('SetMaterialTexture', {symbol.voidPtr, symbol.int, Texture2D}, symbol.void)
    ffi.cfunc('SetModelMeshMaterial', {symbol.voidPtr, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('LoadModelAnimations', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('UpdateModelAnimation', {Model, ModelAnimation, symbol.int}, symbol.void)
    ffi.cfunc('UnloadModelAnimation', {ModelAnimation}, symbol.void)
    ffi.cfunc('UnloadModelAnimations', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('IsModelAnimationValid', {Model, ModelAnimation}, symbol.bool)
    ffi.cfunc('CheckCollisionSpheres', {Vector3, symbol.float, Vector3, symbol.float}, symbol.bool)
    ffi.cfunc('CheckCollisionBoxes', {BoundingBox, BoundingBox}, symbol.bool)
    ffi.cfunc('CheckCollisionBoxSphere', {BoundingBox, Vector3, symbol.float}, symbol.bool)
    ffi.cfunc('GetRayCollisionSphere', {Ray, Vector3, symbol.float}, RayCollision)
    ffi.cfunc('GetRayCollisionBox', {Ray, BoundingBox}, RayCollision)
    ffi.cfunc('GetRayCollisionMesh', {Ray, Mesh, Matrix}, RayCollision)
    ffi.cfunc('GetRayCollisionTriangle', {Ray, Vector3, Vector3, Vector3}, RayCollision)
    ffi.cfunc('GetRayCollisionQuad', {Ray, Vector3, Vector3, Vector3, Vector3}, RayCollision)
    ffi.cfunc('InitAudioDevice', {_}, symbol.void)
    ffi.cfunc('CloseAudioDevice', {_}, symbol.void)
    ffi.cfunc('IsAudioDeviceReady', {_}, symbol.bool)
    ffi.cfunc('SetMasterVolume', {symbol.float}, symbol.void)
    ffi.cfunc('GetMasterVolume', {_}, symbol.float)
    ffi.cfunc('LoadWave', {symbol.voidPtr}, Wave)
    ffi.cfunc('LoadWaveFromMemory', {symbol.voidPtr, symbol.voidPtr, symbol.int}, Wave)
    ffi.cfunc('IsWaveReady', {Wave}, symbol.bool)
    ffi.cfunc('LoadSound', {symbol.voidPtr}, Sound)
    ffi.cfunc('LoadSoundFromWave', {Wave}, Sound)
    ffi.cfunc('LoadSoundAlias', {Sound}, Sound)
    ffi.cfunc('IsSoundReady', {Sound}, symbol.bool)
    ffi.cfunc('UpdateSound', {Sound, symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('UnloadWave', {Wave}, symbol.void)
    ffi.cfunc('UnloadSound', {Sound}, symbol.void)
    ffi.cfunc('UnloadSoundAlias', {Sound}, symbol.void)
    ffi.cfunc('ExportWave', {Wave, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('ExportWaveAsCode', {Wave, symbol.voidPtr}, symbol.bool)
    ffi.cfunc('PlaySound', {Sound}, symbol.void)
    ffi.cfunc('StopSound', {Sound}, symbol.void)
    ffi.cfunc('PauseSound', {Sound}, symbol.void)
    ffi.cfunc('ResumeSound', {Sound}, symbol.void)
    ffi.cfunc('IsSoundPlaying', {Sound}, symbol.bool)
    ffi.cfunc('SetSoundVolume', {Sound, symbol.float}, symbol.void)
    ffi.cfunc('SetSoundPitch', {Sound, symbol.float}, symbol.void)
    ffi.cfunc('SetSoundPan', {Sound, symbol.float}, symbol.void)
    ffi.cfunc('WaveCopy', {Wave}, Wave)
    ffi.cfunc('WaveCrop', {symbol.voidPtr, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('WaveFormat', {symbol.voidPtr, symbol.int, symbol.int, symbol.int}, symbol.void)
    ffi.cfunc('LoadWaveSamples', {Wave}, symbol.voidPtr)
    ffi.cfunc('UnloadWaveSamples', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LoadMusicStream', {symbol.voidPtr}, Music)
    ffi.cfunc('LoadMusicStreamFromMemory', {symbol.voidPtr, symbol.voidPtr, symbol.int}, Music)
    ffi.cfunc('IsMusicReady', {Music}, symbol.bool)
    ffi.cfunc('UnloadMusicStream', {Music}, symbol.void)
    ffi.cfunc('PlayMusicStream', {Music}, symbol.void)
    ffi.cfunc('IsMusicStreamPlaying', {Music}, symbol.bool)
    ffi.cfunc('UpdateMusicStream', {Music}, symbol.void)
    ffi.cfunc('StopMusicStream', {Music}, symbol.void)
    ffi.cfunc('PauseMusicStream', {Music}, symbol.void)
    ffi.cfunc('ResumeMusicStream', {Music}, symbol.void)
    ffi.cfunc('SeekMusicStream', {Music, symbol.float}, symbol.void)
    ffi.cfunc('SetMusicVolume', {Music, symbol.float}, symbol.void)
    ffi.cfunc('SetMusicPitch', {Music, symbol.float}, symbol.void)
    ffi.cfunc('SetMusicPan', {Music, symbol.float}, symbol.void)
    ffi.cfunc('GetMusicTimeLength', {Music}, symbol.float)
    ffi.cfunc('GetMusicTimePlayed', {Music}, symbol.float)
    ffi.cfunc('LoadAudioStream', {symbol.uint, symbol.uint, symbol.uint}, AudioStream)
    ffi.cfunc('IsAudioStreamReady', {AudioStream}, symbol.bool)
    ffi.cfunc('UnloadAudioStream', {AudioStream}, symbol.void)
    ffi.cfunc('UpdateAudioStream', {AudioStream, symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('IsAudioStreamProcessed', {AudioStream}, symbol.bool)
    ffi.cfunc('PlayAudioStream', {AudioStream}, symbol.void)
    ffi.cfunc('PauseAudioStream', {AudioStream}, symbol.void)
    ffi.cfunc('ResumeAudioStream', {AudioStream}, symbol.void)
    ffi.cfunc('IsAudioStreamPlaying', {AudioStream}, symbol.bool)
    ffi.cfunc('StopAudioStream', {AudioStream}, symbol.void)
    ffi.cfunc('SetAudioStreamVolume', {AudioStream, symbol.float}, symbol.void)
    ffi.cfunc('SetAudioStreamPitch', {AudioStream, symbol.float}, symbol.void)
    ffi.cfunc('SetAudioStreamPan', {AudioStream, symbol.float}, symbol.void)
    ffi.cfunc('SetAudioStreamBufferSizeDefault', {symbol.int}, symbol.void)
    ffi.cfunc('SetAudioStreamCallback', {AudioStream, symbol.voidPtr}, symbol.void)
    ffi.cfunc('AttachAudioStreamProcessor', {AudioStream, symbol.voidPtr}, symbol.void)
    ffi.cfunc('DetachAudioStreamProcessor', {AudioStream, symbol.voidPtr}, symbol.void)
    ffi.cfunc('AttachAudioMixedProcessor', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('DetachAudioMixedProcessor', {symbol.voidPtr}, symbol.void)
    let lib = ffi.bindLib(Option[String].some(libPath), {gen_table=false})
    return lib

-- Macros
var ._GCC_HAVE_DWARF2_CFI_ASM int = 1
var .RAYLIB_VERSION_MAJOR int = 5
var .RAYLIB_VERSION_MINOR int = 0
var .RAYLIB_VERSION_PATCH int = 0
var .RAYLIB_VERSION String = "5.0"
var .PI float = 3.1415927410125732
var .DEG2RAD float = 0.01745329238474369
var .RAD2DEG float = 57.2957763671875
var .LIGHTGRAY Color = Color{r=200, g=200, b=200, a=255}
var .GRAY Color = Color{r=130, g=130, b=130, a=255}
var .DARKGRAY Color = Color{r=80, g=80, b=80, a=255}
var .YELLOW Color = Color{r=253, g=249, b=0, a=255}
var .GOLD Color = Color{r=255, g=203, b=0, a=255}
var .ORANGE Color = Color{r=255, g=161, b=0, a=255}
var .PINK Color = Color{r=255, g=109, b=194, a=255}
var .RED Color = Color{r=230, g=41, b=55, a=255}
var .MAROON Color = Color{r=190, g=33, b=55, a=255}
var .GREEN Color = Color{r=0, g=228, b=48, a=255}
var .LIME Color = Color{r=0, g=158, b=47, a=255}
var .DARKGREEN Color = Color{r=0, g=117, b=44, a=255}
var .SKYBLUE Color = Color{r=102, g=191, b=255, a=255}
var .BLUE Color = Color{r=0, g=121, b=241, a=255}
var .DARKBLUE Color = Color{r=0, g=82, b=172, a=255}
var .PURPLE Color = Color{r=200, g=122, b=255, a=255}
var .VIOLET Color = Color{r=135, g=60, b=190, a=255}
var .DARKPURPLE Color = Color{r=112, g=31, b=126, a=255}
var .BEIGE Color = Color{r=211, g=176, b=131, a=255}
var .BROWN Color = Color{r=127, g=106, b=79, a=255}
var .DARKBROWN Color = Color{r=76, g=63, b=47, a=255}
var .WHITE Color = Color{r=255, g=255, b=255, a=255}
var .BLACK Color = Color{r=0, g=0, b=0, a=255}
var .BLANK Color = Color{r=0, g=0, b=0, a=0}
var .MAGENTA Color = Color{r=255, g=0, b=255, a=255}
var .RAYWHITE Color = Color{r=245, g=245, b=245, a=255}
-- var .true int = 1
-- var .false int = 0
var .MOUSE_LEFT_BUTTON int = 0
var .MOUSE_RIGHT_BUTTON int = 1
var .MOUSE_MIDDLE_BUTTON int = 2
var .MATERIAL_MAP_DIFFUSE int = 0
var .MATERIAL_MAP_SPECULAR int = 1
var .SHADER_LOC_MAP_DIFFUSE int = 15
var .SHADER_LOC_MAP_SPECULAR int = 16
