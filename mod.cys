import os 'os'

var libUrl = match os.system:
    'linux': 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.so.4.2.0'
    'windows': 'https://raw.githubusercontent.com/fubark/ray-cyber/master/raylib.4.2.0.dll'
    'macos': 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.4.2.0.dylib'
    else: panic(#unsupported)

export func BeginDrawing() = lib.BeginDrawing
export func CheckCollisionCircles(v1, r1, v2, r2) = lib.CheckCollisionCircles
export func ClearBackground(color) = lib.ClearBackground
export func CloseWindow() = lib.CloseWindow
export func DrawCircle(centerX, centerY, radius, color) = lib.DrawCircle
export func DrawCircleV(center, radius, color) = lib.DrawCircleV
export func DrawLine(x, y, x2, y2, color) = lib.DrawLine
export func DrawRectangle(x, y, width, height, color) = lib.DrawRectangle
export func DrawText(text, x, y, size, color) = lib.DrawText
export func DrawTriangle(v1, v2, v3, color) = lib.DrawTriangle
export func EndDrawing() = lib.EndDrawing
export func Fade(color, alpha) = lib.Fade
export func GetRandomValue(start, end) = lib.GetRandomValue
export func GetScreenHeight() = lib.GetScreenHeight
export func GetScreenWidth() = lib.GetScreenWidth
export func InitWindow(width, height, title) = lib.InitWindow
export func IsKeyDown(key) = lib.IsKeyDown
export func IsKeyPressed(key) = lib.IsKeyPressed
export func MeasureText(text, size) = lib.MeasureText
export func SetTargetFPS(fps) = lib.SetTargetFPS
export func WindowShouldClose() = lib.WindowShouldClose

var libPath = cacheUrl(libUrl)
var lib = try os.bindLib(libPath, [
    os.CFunc{ sym: 'BeginDrawing', args: [], ret: #void }
    os.CFunc{ sym: 'CheckCollisionCircles', args: [Vec2, #float, Vec2, #float], ret: #bool }
    os.CFunc{ sym: 'ClearBackground', args: [#uint], ret: #void }
    os.CFunc{ sym: 'CloseWindow', args: [], ret: #void }
    os.CFunc{ sym: 'DrawCircle', args: [#int, #int, #float, #int], ret: #void }
    os.CFunc{ sym: 'DrawCircleV', args: [Vec2, #float, #int], ret: #void }
    os.CFunc{ sym: 'DrawLine', args: [#int, #int, #int, #int, #int], ret: #void }
    os.CFunc{ sym: 'DrawRectangle', args: [#int, #int, #int, #int, #int], ret: #void }
    os.CFunc{ sym: 'DrawText', args: [#charPtrZ, #int, #int, #int, #int], ret: #void }
    os.CFunc{ sym: 'DrawTriangle', args: [Vec2, Vec2, Vec2, #int], ret: #void }
    os.CFunc{ sym: 'EndDrawing', args: [], ret: #void }
    os.CFunc{ sym: 'Fade', args: [#int, #float], ret: #int }
    os.CFunc{ sym: 'GetRandomValue', args: [#int, #int], ret: #int }
    os.CFunc{ sym: 'GetScreenHeight', args: [], ret: #int }
    os.CFunc{ sym: 'GetScreenWidth', args: [], ret: #int }
    os.CFunc{ sym: 'InitWindow', args: [#int, #int, #charPtrZ], ret: #void }
    os.CFunc{ sym: 'IsKeyDown', args: [#int], ret: #bool }
    os.CFunc{ sym: 'IsKeyPressed', args: [#int], ret: #bool }
    os.CFunc{ sym: 'MeasureText', args: [#charPtrZ, #int], ret: #int }
    os.CFunc{ sym: 'SetTargetFPS', args: [#int], ret: #void }
    os.CFunc{ sym: 'WindowShouldClose', args: [], ret: #bool }
    os.CStruct{ fields: [#float, #float], type: Vec2 }
], { genMap: true })

object Vec2:
    x number
    y number

export func toColor(r, g, b, a):
    if os.endian == #little:
        return r | g << 8 | b << 16 | a << 24
    else:
        return a | b << 8 | g << 16 | r << 24

export var BLACK = toColor(0, 0, 0, 255)
export var BLUE = toColor(0, 121, 241, 255)
export var DARKBLUE = toColor(0, 82, 172, 255)
export var DARKGRAY = toColor(80, 80, 80, 255)
export var GRAY = toColor(130, 130, 130, 255)
export var GREEN = toColor(0, 228, 48, 255)
export var LIGHTGRAY = toColor(200, 200, 200, 255)
export var MAROON = toColor(190, 33, 55, 255)
export var RAYWHITE = toColor(245, 245, 245, 255)
export var RED = toColor(230, 41, 55, 255)
export var SKYBLUE = toColor(102, 191, 255, 255)
export var WHITE = toColor(255, 255, 255, 255)
export var YELLOW = toColor(253, 249, 0, 255)

export var KEY_RIGHT = 262
export var KEY_LEFT = 263
export var KEY_DOWN = 264
export var KEY_UP = 265
export var KEY_ENTER = 257
export var KEY_SPACE = 32