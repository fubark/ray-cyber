import os 'os'
import m 'math'

var libUrl: match os.system:
    'linux': 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.so.4.2.0'
    'windows': 'https://raw.githubusercontent.com/fubark/ray-cyber/master/raylib.4.2.0.dll'
    'macos': 'https://raw.githubusercontent.com/fubark/ray-cyber/master/libraylib.4.2.0.dylib'
    else: panic(#unsupported)

func BeginDrawing() none = lib.BeginDrawing
func CheckCollisionCircles(v1 Vec2, r1 number, v2 Vec2, r2 number) boolean = lib.CheckCollisionCircles
func CheckCollisionRecs(rec1 Rect, rec2 Rect) boolean = lib.CheckCollisionRecs
func ClearBackground(color number) none = lib.ClearBackground
func CloseWindow() none = lib.CloseWindow
func DrawCircle(centerX number, centerY number, radius number, color number) none = lib.DrawCircle
func DrawCircleV(center Vec2, radius number, color number) none = lib.DrawCircleV
func DrawLine(x number, y number, x2 number, y2 number, color number) none = lib.DrawLine
func DrawRectangle(x number, y number, width number, height number, color number) none = lib.DrawRectangle
func DrawText(text any, x number, y number, size number, color number) none:
    cstr = os.cstr(text)
    (lib.DrawText)(cstr, x, y, size, color)
    os.free(cstr)
func DrawTextureEx(tex Texture2D, pos Vec2, rotation number, scale number, tint number) none = lib.DrawTextureEx
func DrawTexturePro(tex Texture2D, src Rect, dst Rect, origin Vec2, rotation number, tint number) none = lib.DrawTexturePro
func DrawTriangle(v1 Vec2, v2 Vec2, v3 Vec2, color number) none = lib.DrawTriangle
func EndDrawing() none = lib.EndDrawing
func Fade(color number, alpha number) number = lib.Fade
func GetFrameTime() number = lib.GetFrameTime
func GetRandomValue(start number, end number) number = lib.GetRandomValue
func GetScreenHeight() number = lib.GetScreenHeight
func GetScreenWidth() number = lib.GetScreenWidth
func InitWindow(width number, height number, title any) none:
    cstr = os.cstr(title)
    (lib.InitWindow)(width, height, cstr)
    os.free(cstr)
func IsKeyDown(key number) boolean = lib.IsKeyDown
func IsKeyPressed(key number) boolean = lib.IsKeyPressed
func IsMouseButtonPressed(button number) boolean = lib.IsMouseButtonPressed
func IsMouseButtonDown(button number) boolean = lib.IsMouseButtonDown
func IsMouseButtonReleased(button number) boolean = lib.IsMouseButtonReleased
func IsMouseButtonUp(button number) boolean = lib.IsMouseButtonUp 
func LoadTexture(fileName any) Texture2D:
    cstr = os.cstr(fileName)
    res = (lib.LoadTexture)(cstr)
    os.free(cstr)
    return res
func MeasureText(text any, size number) number:
    cstr = os.cstr(text)
    res = (lib.MeasureText)(cstr, size)
    os.free(cstr)
    return res
func SetTargetFPS(fps number) none = lib.SetTargetFPS
func WindowShouldClose() boolean = lib.WindowShouldClose

var libPath: cacheUrl(libUrl)
var lib: try os.bindLib(libPath, [
    os.CFunc{ sym: 'BeginDrawing', args: [], ret: #void }
    os.CFunc{ sym: 'CheckCollisionCircles', args: [Vec2, #float, Vec2, #float], ret: #bool }
    os.CFunc{ sym: 'CheckCollisionRecs', args: [Rect, Rect], ret: #bool }
    os.CFunc{ sym: 'ClearBackground', args: [#uint], ret: #void }
    os.CFunc{ sym: 'CloseWindow', args: [], ret: #void }
    os.CFunc{ sym: 'DrawCircle', args: [#int, #int, #float, #int], ret: #void }
    os.CFunc{ sym: 'DrawCircleV', args: [Vec2, #float, #int], ret: #void }
    os.CFunc{ sym: 'DrawLine', args: [#int, #int, #int, #int, #int], ret: #void }
    os.CFunc{ sym: 'DrawRectangle', args: [#int, #int, #int, #int, #int], ret: #void }
    os.CFunc{ sym: 'DrawText', args: [#charPtr, #int, #int, #int, #int], ret: #void }
    os.CFunc{ sym: 'DrawTextureEx', args: [Texture2D, Vec2, #float, #float, #int], ret: #void }
    os.CFunc{ sym: 'DrawTexturePro', args: [Texture2D, Rect, Rect, Vec2, #float, #int], ret: #void }
    os.CFunc{ sym: 'DrawTriangle', args: [Vec2, Vec2, Vec2, #int], ret: #void }
    os.CFunc{ sym: 'EndDrawing', args: [], ret: #void }
    os.CFunc{ sym: 'Fade', args: [#int, #float], ret: #int }
    os.CFunc{ sym: 'GetFrameTime', args: [], ret: #float }
    os.CFunc{ sym: 'GetRandomValue', args: [#int, #int], ret: #int }
    os.CFunc{ sym: 'GetScreenHeight', args: [], ret: #int }
    os.CFunc{ sym: 'GetScreenWidth', args: [], ret: #int }
    os.CFunc{ sym: 'InitWindow', args: [#int, #int, #charPtr], ret: #void }
    os.CFunc{ sym: 'IsKeyDown', args: [#int], ret: #bool }
    os.CFunc{ sym: 'IsKeyPressed', args: [#int], ret: #bool }
    os.CFunc{ sym: 'IsMouseButtonPressed', args: [#int], ret: #bool }
    os.CFunc{ sym: 'IsMouseButtonDown', args: [#int], ret: #bool }
    os.CFunc{ sym: 'IsMouseButtonReleased', args: [#int], ret: #bool }
    os.CFunc{ sym: 'IsMouseButtonUp', args: [#int], ret: #bool }
    os.CFunc{ sym: 'LoadTexture', args: [#charPtr], ret: Texture2D }
    os.CFunc{ sym: 'MeasureText', args: [#charPtr, #int], ret: #int }
    os.CFunc{ sym: 'SetTargetFPS', args: [#int], ret: #void }
    os.CFunc{ sym: 'WindowShouldClose', args: [], ret: #bool }
    os.CStruct{ fields: [#float, #float], type: Vec2 }
    os.CStruct{ fields: [#float, #float, #float, #float], type: Rect }
    os.CStruct{ fields: [#uint, #int, #int, #int, #int], type: Texture2D }
], { genMap: true })

type Texture2D object:
    id number
    width number
    height number
    mipmaps number
    format number

type Vec2 object:
    x number
    y number

    func sub(v1, v2) Vec2:
        return Vec2{
            x: v1.x - v2.x,
            y: v1.y - v2.y,
        }

    func add(v1, v2):
        return Vec2{
            x: v1.x + v2.x,
            y: v1.y + v2.y,
        }

    func scale(v, scale) Vec2:
        return Vec2{
            x: v.x * scale,
            y: v.y * scale,
        }

    func normalize(v):
        res = Vec2{ x: 0, y: 0 }
        len = v.len()
        if len > 0:
            ilen = 1/len
            res.x = v.x*ilen
            res.y = v.y*ilen
        return res

    func len(self):
        return m.sqrt(self.x*self.x + self.y*self.y)

type Rect object:
    x number
    y number
    width number
    height number

func toColor(r, g, b, a):
    if os.endian == #little:
        return r | g << 8 | b << 16 | a << 24
    else:
        return a | b << 8 | g << 16 | r << 24

var BLACK number: toColor(0, 0, 0, 255)
var BLUE number: toColor(0, 121, 241, 255)
var DARKBLUE number: toColor(0, 82, 172, 255)
var DARKGRAY number: toColor(80, 80, 80, 255)
var GRAY number: toColor(130, 130, 130, 255)
var GREEN number: toColor(0, 228, 48, 255)
var LIGHTGRAY number: toColor(200, 200, 200, 255)
var MAROON number: toColor(190, 33, 55, 255)
var RAYWHITE number: toColor(245, 245, 245, 255)
var RED number: toColor(230, 41, 55, 255)
var SKYBLUE number: toColor(102, 191, 255, 255)
var WHITE number: toColor(255, 255, 255, 255)
var YELLOW number: toColor(253, 249, 0, 255)

var KEY_A number: 65
var KEY_B number: 66
var KEY_C number: 67
var KEY_D number: 68
var KEY_E number: 69
var KEY_F number: 70
var KEY_G number: 71
var KEY_H number: 72
var KEY_I number: 73
var KEY_J number: 74
var KEY_K number: 75
var KEY_L number: 76
var KEY_M number: 77
var KEY_N number: 78
var KEY_O number: 79
var KEY_P number: 80
var KEY_Q number: 81
var KEY_R number: 82
var KEY_S number: 83
var KEY_T number: 84
var KEY_U number: 85
var KEY_V number: 86
var KEY_W number: 87
var KEY_X number: 88
var KEY_Y number: 89
var KEY_Z number: 90  
var KEY_RIGHT number: 262
var KEY_LEFT number: 263
var KEY_DOWN number: 264
var KEY_UP number: 265
var KEY_ENTER number: 257
var KEY_SPACE number: 32

var MOUSE_LEFT_BUTTON number: 0
var MOUSE_RIGHT_BUTTON number: 1
var MOUSE_MIDDLE_BUTTON number: 2
